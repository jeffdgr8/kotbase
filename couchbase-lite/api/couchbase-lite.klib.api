// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64]
// Alias: apple => [iosArm64, iosSimulatorArm64, iosX64, macosArm64, macosX64]
// Alias: linux => [linuxArm64, linuxX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <dev.kotbase:couchbase-lite>
final enum class kotbase/ConcurrencyControl : kotlin/Enum<kotbase/ConcurrencyControl> { // kotbase/ConcurrencyControl|null[0]
    enum entry FAIL_ON_CONFLICT // kotbase/ConcurrencyControl.FAIL_ON_CONFLICT|null[0]
    enum entry LAST_WRITE_WINS // kotbase/ConcurrencyControl.LAST_WRITE_WINS|null[0]

    final val entries // kotbase/ConcurrencyControl.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotbase/ConcurrencyControl> // kotbase/ConcurrencyControl.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotbase/ConcurrencyControl // kotbase/ConcurrencyControl.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotbase/ConcurrencyControl> // kotbase/ConcurrencyControl.values|values#static(){}[0]
}

final enum class kotbase/DocumentFlag : kotlin/Enum<kotbase/DocumentFlag> { // kotbase/DocumentFlag|null[0]
    enum entry ACCESS_REMOVED // kotbase/DocumentFlag.ACCESS_REMOVED|null[0]
    enum entry DELETED // kotbase/DocumentFlag.DELETED|null[0]

    final val entries // kotbase/DocumentFlag.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotbase/DocumentFlag> // kotbase/DocumentFlag.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotbase/DocumentFlag // kotbase/DocumentFlag.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotbase/DocumentFlag> // kotbase/DocumentFlag.values|values#static(){}[0]
}

final enum class kotbase/LogDomain : kotlin/Enum<kotbase/LogDomain> { // kotbase/LogDomain|null[0]
    enum entry DATABASE // kotbase/LogDomain.DATABASE|null[0]
    enum entry LISTENER // kotbase/LogDomain.LISTENER|null[0]
    enum entry NETWORK // kotbase/LogDomain.NETWORK|null[0]
    enum entry QUERY // kotbase/LogDomain.QUERY|null[0]
    enum entry REPLICATOR // kotbase/LogDomain.REPLICATOR|null[0]

    final val entries // kotbase/LogDomain.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotbase/LogDomain> // kotbase/LogDomain.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotbase/LogDomain // kotbase/LogDomain.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotbase/LogDomain> // kotbase/LogDomain.values|values#static(){}[0]

    final object Companion { // kotbase/LogDomain.Companion|null[0]
        final val ALL // kotbase/LogDomain.Companion.ALL|{}ALL[0]
            final fun <get-ALL>(): kotlin.collections/Set<kotbase/LogDomain> // kotbase/LogDomain.Companion.ALL.<get-ALL>|<get-ALL>(){}[0]
        final val ALL_DOMAINS // kotbase/LogDomain.Companion.ALL_DOMAINS|{}ALL_DOMAINS[0]
            final fun <get-ALL_DOMAINS>(): kotlin.collections/Set<kotbase/LogDomain> // kotbase/LogDomain.Companion.ALL_DOMAINS.<get-ALL_DOMAINS>|<get-ALL_DOMAINS>(){}[0]
    }
}

final enum class kotbase/LogLevel : kotlin/Enum<kotbase/LogLevel> { // kotbase/LogLevel|null[0]
    enum entry DEBUG // kotbase/LogLevel.DEBUG|null[0]
    enum entry ERROR // kotbase/LogLevel.ERROR|null[0]
    enum entry INFO // kotbase/LogLevel.INFO|null[0]
    enum entry NONE // kotbase/LogLevel.NONE|null[0]
    enum entry VERBOSE // kotbase/LogLevel.VERBOSE|null[0]
    enum entry WARNING // kotbase/LogLevel.WARNING|null[0]

    final val entries // kotbase/LogLevel.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotbase/LogLevel> // kotbase/LogLevel.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotbase/LogLevel // kotbase/LogLevel.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotbase/LogLevel> // kotbase/LogLevel.values|values#static(){}[0]
}

final enum class kotbase/MaintenanceType : kotlin/Enum<kotbase/MaintenanceType> { // kotbase/MaintenanceType|null[0]
    enum entry COMPACT // kotbase/MaintenanceType.COMPACT|null[0]
    enum entry FULL_OPTIMIZE // kotbase/MaintenanceType.FULL_OPTIMIZE|null[0]
    enum entry INTEGRITY_CHECK // kotbase/MaintenanceType.INTEGRITY_CHECK|null[0]
    enum entry OPTIMIZE // kotbase/MaintenanceType.OPTIMIZE|null[0]
    enum entry REINDEX // kotbase/MaintenanceType.REINDEX|null[0]

    final val entries // kotbase/MaintenanceType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotbase/MaintenanceType> // kotbase/MaintenanceType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotbase/MaintenanceType // kotbase/MaintenanceType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotbase/MaintenanceType> // kotbase/MaintenanceType.values|values#static(){}[0]
}

final enum class kotbase/ReplicatorActivityLevel : kotlin/Enum<kotbase/ReplicatorActivityLevel> { // kotbase/ReplicatorActivityLevel|null[0]
    enum entry BUSY // kotbase/ReplicatorActivityLevel.BUSY|null[0]
    enum entry CONNECTING // kotbase/ReplicatorActivityLevel.CONNECTING|null[0]
    enum entry IDLE // kotbase/ReplicatorActivityLevel.IDLE|null[0]
    enum entry OFFLINE // kotbase/ReplicatorActivityLevel.OFFLINE|null[0]
    enum entry STOPPED // kotbase/ReplicatorActivityLevel.STOPPED|null[0]

    final val entries // kotbase/ReplicatorActivityLevel.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotbase/ReplicatorActivityLevel> // kotbase/ReplicatorActivityLevel.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotbase/ReplicatorActivityLevel // kotbase/ReplicatorActivityLevel.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotbase/ReplicatorActivityLevel> // kotbase/ReplicatorActivityLevel.values|values#static(){}[0]
}

final enum class kotbase/ReplicatorType : kotlin/Enum<kotbase/ReplicatorType> { // kotbase/ReplicatorType|null[0]
    enum entry PULL // kotbase/ReplicatorType.PULL|null[0]
    enum entry PUSH // kotbase/ReplicatorType.PUSH|null[0]
    enum entry PUSH_AND_PULL // kotbase/ReplicatorType.PUSH_AND_PULL|null[0]

    final val entries // kotbase/ReplicatorType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotbase/ReplicatorType> // kotbase/ReplicatorType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): kotbase/ReplicatorType // kotbase/ReplicatorType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotbase/ReplicatorType> // kotbase/ReplicatorType.values|values#static(){}[0]
}

abstract fun interface kotbase.logging/LogSink { // kotbase.logging/LogSink|null[0]
    abstract fun writeLog(kotbase/LogLevel, kotbase/LogDomain, kotlin/String) // kotbase.logging/LogSink.writeLog|writeLog(kotbase.LogLevel;kotbase.LogDomain;kotlin.String){}[0]
}

abstract interface kotbase/ArrayInterface { // kotbase/ArrayInterface|null[0]
    abstract val count // kotbase/ArrayInterface.count|{}count[0]
        abstract fun <get-count>(): kotlin/Int // kotbase/ArrayInterface.count.<get-count>|<get-count>(){}[0]

    abstract fun getArray(kotlin/Int): kotbase/Array? // kotbase/ArrayInterface.getArray|getArray(kotlin.Int){}[0]
    abstract fun getBlob(kotlin/Int): kotbase/Blob? // kotbase/ArrayInterface.getBlob|getBlob(kotlin.Int){}[0]
    abstract fun getBoolean(kotlin/Int): kotlin/Boolean // kotbase/ArrayInterface.getBoolean|getBoolean(kotlin.Int){}[0]
    abstract fun getDate(kotlin/Int): kotlinx.datetime/Instant? // kotbase/ArrayInterface.getDate|getDate(kotlin.Int){}[0]
    abstract fun getDictionary(kotlin/Int): kotbase/Dictionary? // kotbase/ArrayInterface.getDictionary|getDictionary(kotlin.Int){}[0]
    abstract fun getDouble(kotlin/Int): kotlin/Double // kotbase/ArrayInterface.getDouble|getDouble(kotlin.Int){}[0]
    abstract fun getFloat(kotlin/Int): kotlin/Float // kotbase/ArrayInterface.getFloat|getFloat(kotlin.Int){}[0]
    abstract fun getInt(kotlin/Int): kotlin/Int // kotbase/ArrayInterface.getInt|getInt(kotlin.Int){}[0]
    abstract fun getLong(kotlin/Int): kotlin/Long // kotbase/ArrayInterface.getLong|getLong(kotlin.Int){}[0]
    abstract fun getNumber(kotlin/Int): kotlin/Number? // kotbase/ArrayInterface.getNumber|getNumber(kotlin.Int){}[0]
    abstract fun getString(kotlin/Int): kotlin/String? // kotbase/ArrayInterface.getString|getString(kotlin.Int){}[0]
    abstract fun getValue(kotlin/Int): kotlin/Any? // kotbase/ArrayInterface.getValue|getValue(kotlin.Int){}[0]
    abstract fun toJSON(): kotlin/String // kotbase/ArrayInterface.toJSON|toJSON(){}[0]
    abstract fun toList(): kotlin.collections/List<kotlin/Any?> // kotbase/ArrayInterface.toList|toList(){}[0]
}

abstract interface kotbase/DictionaryInterface { // kotbase/DictionaryInterface|null[0]
    abstract val count // kotbase/DictionaryInterface.count|{}count[0]
        abstract fun <get-count>(): kotlin/Int // kotbase/DictionaryInterface.count.<get-count>|<get-count>(){}[0]
    abstract val keys // kotbase/DictionaryInterface.keys|{}keys[0]
        abstract fun <get-keys>(): kotlin.collections/List<kotlin/String> // kotbase/DictionaryInterface.keys.<get-keys>|<get-keys>(){}[0]

    abstract fun contains(kotlin/String): kotlin/Boolean // kotbase/DictionaryInterface.contains|contains(kotlin.String){}[0]
    abstract fun getArray(kotlin/String): kotbase/Array? // kotbase/DictionaryInterface.getArray|getArray(kotlin.String){}[0]
    abstract fun getBlob(kotlin/String): kotbase/Blob? // kotbase/DictionaryInterface.getBlob|getBlob(kotlin.String){}[0]
    abstract fun getBoolean(kotlin/String): kotlin/Boolean // kotbase/DictionaryInterface.getBoolean|getBoolean(kotlin.String){}[0]
    abstract fun getDate(kotlin/String): kotlinx.datetime/Instant? // kotbase/DictionaryInterface.getDate|getDate(kotlin.String){}[0]
    abstract fun getDictionary(kotlin/String): kotbase/Dictionary? // kotbase/DictionaryInterface.getDictionary|getDictionary(kotlin.String){}[0]
    abstract fun getDouble(kotlin/String): kotlin/Double // kotbase/DictionaryInterface.getDouble|getDouble(kotlin.String){}[0]
    abstract fun getFloat(kotlin/String): kotlin/Float // kotbase/DictionaryInterface.getFloat|getFloat(kotlin.String){}[0]
    abstract fun getInt(kotlin/String): kotlin/Int // kotbase/DictionaryInterface.getInt|getInt(kotlin.String){}[0]
    abstract fun getLong(kotlin/String): kotlin/Long // kotbase/DictionaryInterface.getLong|getLong(kotlin.String){}[0]
    abstract fun getNumber(kotlin/String): kotlin/Number? // kotbase/DictionaryInterface.getNumber|getNumber(kotlin.String){}[0]
    abstract fun getString(kotlin/String): kotlin/String? // kotbase/DictionaryInterface.getString|getString(kotlin.String){}[0]
    abstract fun getValue(kotlin/String): kotlin/Any? // kotbase/DictionaryInterface.getValue|getValue(kotlin.String){}[0]
    abstract fun toJSON(): kotlin/String // kotbase/DictionaryInterface.toJSON|toJSON(){}[0]
    abstract fun toMap(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // kotbase/DictionaryInterface.toMap|toMap(){}[0]
}

abstract interface kotbase/FromRouter : kotbase/Query { // kotbase/FromRouter|null[0]
    abstract fun from(kotbase/DataSource): kotbase/From // kotbase/FromRouter.from|from(kotbase.DataSource){}[0]
}

abstract interface kotbase/FullTextIndexExpression : kotbase/IndexExpression { // kotbase/FullTextIndexExpression|null[0]
    abstract fun from(kotlin/String): kotbase/IndexExpression // kotbase/FullTextIndexExpression.from|from(kotlin.String){}[0]
}

abstract interface kotbase/GroupByRouter : kotbase/Query { // kotbase/GroupByRouter|null[0]
    abstract fun groupBy(kotlin/Array<out kotbase/Expression>...): kotbase/GroupBy // kotbase/GroupByRouter.groupBy|groupBy(kotlin.Array<out|kotbase.Expression>...){}[0]
}

abstract interface kotbase/HavingRouter : kotbase/Query { // kotbase/HavingRouter|null[0]
    abstract fun having(kotbase/Expression): kotbase/Having // kotbase/HavingRouter.having|having(kotbase.Expression){}[0]
}

abstract interface kotbase/IndexExpression // kotbase/IndexExpression|null[0]

abstract interface kotbase/JoinRouter : kotbase/Query { // kotbase/JoinRouter|null[0]
    abstract fun join(kotlin/Array<out kotbase/Join>...): kotbase/Joins // kotbase/JoinRouter.join|join(kotlin.Array<out|kotbase.Join>...){}[0]
}

abstract interface kotbase/LimitRouter : kotbase/Query { // kotbase/LimitRouter|null[0]
    abstract fun limit(kotbase/Expression): kotbase/Limit // kotbase/LimitRouter.limit|limit(kotbase.Expression){}[0]
    abstract fun limit(kotbase/Expression, kotbase/Expression?): kotbase/Limit // kotbase/LimitRouter.limit|limit(kotbase.Expression;kotbase.Expression?){}[0]
}

abstract interface kotbase/Logger { // kotbase/Logger|null[0]
    abstract val level // kotbase/Logger.level|{}level[0]
        abstract fun <get-level>(): kotbase/LogLevel // kotbase/Logger.level.<get-level>|<get-level>(){}[0]

    abstract fun log(kotbase/LogLevel, kotbase/LogDomain, kotlin/String) // kotbase/Logger.log|log(kotbase.LogLevel;kotbase.LogDomain;kotlin.String){}[0]
}

abstract interface kotbase/MutableArrayInterface : kotbase/ArrayInterface { // kotbase/MutableArrayInterface|null[0]
    abstract fun addArray(kotbase/Array?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.addArray|addArray(kotbase.Array?){}[0]
    abstract fun addBlob(kotbase/Blob?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.addBlob|addBlob(kotbase.Blob?){}[0]
    abstract fun addBoolean(kotlin/Boolean): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.addBoolean|addBoolean(kotlin.Boolean){}[0]
    abstract fun addDate(kotlinx.datetime/Instant?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.addDate|addDate(kotlinx.datetime.Instant?){}[0]
    abstract fun addDictionary(kotbase/Dictionary?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.addDictionary|addDictionary(kotbase.Dictionary?){}[0]
    abstract fun addDouble(kotlin/Double): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.addDouble|addDouble(kotlin.Double){}[0]
    abstract fun addFloat(kotlin/Float): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.addFloat|addFloat(kotlin.Float){}[0]
    abstract fun addInt(kotlin/Int): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.addInt|addInt(kotlin.Int){}[0]
    abstract fun addLong(kotlin/Long): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.addLong|addLong(kotlin.Long){}[0]
    abstract fun addNumber(kotlin/Number?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.addNumber|addNumber(kotlin.Number?){}[0]
    abstract fun addString(kotlin/String?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.addString|addString(kotlin.String?){}[0]
    abstract fun addValue(kotlin/Any?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.addValue|addValue(kotlin.Any?){}[0]
    abstract fun getArray(kotlin/Int): kotbase/MutableArray? // kotbase/MutableArrayInterface.getArray|getArray(kotlin.Int){}[0]
    abstract fun getDictionary(kotlin/Int): kotbase/MutableDictionary? // kotbase/MutableArrayInterface.getDictionary|getDictionary(kotlin.Int){}[0]
    abstract fun insertArray(kotlin/Int, kotbase/Array?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.insertArray|insertArray(kotlin.Int;kotbase.Array?){}[0]
    abstract fun insertBlob(kotlin/Int, kotbase/Blob?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.insertBlob|insertBlob(kotlin.Int;kotbase.Blob?){}[0]
    abstract fun insertBoolean(kotlin/Int, kotlin/Boolean): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.insertBoolean|insertBoolean(kotlin.Int;kotlin.Boolean){}[0]
    abstract fun insertDate(kotlin/Int, kotlinx.datetime/Instant?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.insertDate|insertDate(kotlin.Int;kotlinx.datetime.Instant?){}[0]
    abstract fun insertDictionary(kotlin/Int, kotbase/Dictionary?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.insertDictionary|insertDictionary(kotlin.Int;kotbase.Dictionary?){}[0]
    abstract fun insertDouble(kotlin/Int, kotlin/Double): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.insertDouble|insertDouble(kotlin.Int;kotlin.Double){}[0]
    abstract fun insertFloat(kotlin/Int, kotlin/Float): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.insertFloat|insertFloat(kotlin.Int;kotlin.Float){}[0]
    abstract fun insertInt(kotlin/Int, kotlin/Int): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.insertInt|insertInt(kotlin.Int;kotlin.Int){}[0]
    abstract fun insertLong(kotlin/Int, kotlin/Long): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.insertLong|insertLong(kotlin.Int;kotlin.Long){}[0]
    abstract fun insertNumber(kotlin/Int, kotlin/Number?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.insertNumber|insertNumber(kotlin.Int;kotlin.Number?){}[0]
    abstract fun insertString(kotlin/Int, kotlin/String?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.insertString|insertString(kotlin.Int;kotlin.String?){}[0]
    abstract fun insertValue(kotlin/Int, kotlin/Any?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.insertValue|insertValue(kotlin.Int;kotlin.Any?){}[0]
    abstract fun remove(kotlin/Int): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.remove|remove(kotlin.Int){}[0]
    abstract fun setArray(kotlin/Int, kotbase/Array?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setArray|setArray(kotlin.Int;kotbase.Array?){}[0]
    abstract fun setBlob(kotlin/Int, kotbase/Blob?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setBlob|setBlob(kotlin.Int;kotbase.Blob?){}[0]
    abstract fun setBoolean(kotlin/Int, kotlin/Boolean): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setBoolean|setBoolean(kotlin.Int;kotlin.Boolean){}[0]
    abstract fun setData(kotlin.collections/List<kotlin/Any?>): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setData|setData(kotlin.collections.List<kotlin.Any?>){}[0]
    abstract fun setDate(kotlin/Int, kotlinx.datetime/Instant?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setDate|setDate(kotlin.Int;kotlinx.datetime.Instant?){}[0]
    abstract fun setDictionary(kotlin/Int, kotbase/Dictionary?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setDictionary|setDictionary(kotlin.Int;kotbase.Dictionary?){}[0]
    abstract fun setDouble(kotlin/Int, kotlin/Double): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setDouble|setDouble(kotlin.Int;kotlin.Double){}[0]
    abstract fun setFloat(kotlin/Int, kotlin/Float): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setFloat|setFloat(kotlin.Int;kotlin.Float){}[0]
    abstract fun setInt(kotlin/Int, kotlin/Int): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setInt|setInt(kotlin.Int;kotlin.Int){}[0]
    abstract fun setJSON(kotlin/String): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setJSON|setJSON(kotlin.String){}[0]
    abstract fun setLong(kotlin/Int, kotlin/Long): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setLong|setLong(kotlin.Int;kotlin.Long){}[0]
    abstract fun setNumber(kotlin/Int, kotlin/Number?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setNumber|setNumber(kotlin.Int;kotlin.Number?){}[0]
    abstract fun setString(kotlin/Int, kotlin/String?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setString|setString(kotlin.Int;kotlin.String?){}[0]
    abstract fun setValue(kotlin/Int, kotlin/Any?): kotbase/MutableArrayInterface // kotbase/MutableArrayInterface.setValue|setValue(kotlin.Int;kotlin.Any?){}[0]
}

abstract interface kotbase/MutableDictionaryInterface : kotbase/DictionaryInterface { // kotbase/MutableDictionaryInterface|null[0]
    abstract fun getArray(kotlin/String): kotbase/MutableArray? // kotbase/MutableDictionaryInterface.getArray|getArray(kotlin.String){}[0]
    abstract fun getDictionary(kotlin/String): kotbase/MutableDictionary? // kotbase/MutableDictionaryInterface.getDictionary|getDictionary(kotlin.String){}[0]
    abstract fun remove(kotlin/String): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.remove|remove(kotlin.String){}[0]
    abstract fun setArray(kotlin/String, kotbase/Array?): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setArray|setArray(kotlin.String;kotbase.Array?){}[0]
    abstract fun setBlob(kotlin/String, kotbase/Blob?): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setBlob|setBlob(kotlin.String;kotbase.Blob?){}[0]
    abstract fun setBoolean(kotlin/String, kotlin/Boolean): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setBoolean|setBoolean(kotlin.String;kotlin.Boolean){}[0]
    abstract fun setData(kotlin.collections/Map<kotlin/String, kotlin/Any?>): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setData|setData(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    abstract fun setDate(kotlin/String, kotlinx.datetime/Instant?): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setDate|setDate(kotlin.String;kotlinx.datetime.Instant?){}[0]
    abstract fun setDictionary(kotlin/String, kotbase/Dictionary?): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setDictionary|setDictionary(kotlin.String;kotbase.Dictionary?){}[0]
    abstract fun setDouble(kotlin/String, kotlin/Double): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setDouble|setDouble(kotlin.String;kotlin.Double){}[0]
    abstract fun setFloat(kotlin/String, kotlin/Float): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setFloat|setFloat(kotlin.String;kotlin.Float){}[0]
    abstract fun setInt(kotlin/String, kotlin/Int): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setInt|setInt(kotlin.String;kotlin.Int){}[0]
    abstract fun setJSON(kotlin/String): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setJSON|setJSON(kotlin.String){}[0]
    abstract fun setLong(kotlin/String, kotlin/Long): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setLong|setLong(kotlin.String;kotlin.Long){}[0]
    abstract fun setNumber(kotlin/String, kotlin/Number?): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setNumber|setNumber(kotlin.String;kotlin.Number?){}[0]
    abstract fun setString(kotlin/String, kotlin/String?): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setString|setString(kotlin.String;kotlin.String?){}[0]
    abstract fun setValue(kotlin/String, kotlin/Any?): kotbase/MutableDictionaryInterface // kotbase/MutableDictionaryInterface.setValue|setValue(kotlin.String;kotlin.Any?){}[0]
}

abstract interface kotbase/OrderByRouter : kotbase/Query { // kotbase/OrderByRouter|null[0]
    abstract fun orderBy(kotlin/Array<out kotbase/Ordering>...): kotbase/OrderBy // kotbase/OrderByRouter.orderBy|orderBy(kotlin.Array<out|kotbase.Ordering>...){}[0]
}

abstract interface kotbase/Query { // kotbase/Query|null[0]
    abstract var parameters // kotbase/Query.parameters|{}parameters[0]
        abstract fun <get-parameters>(): kotbase/Parameters? // kotbase/Query.parameters.<get-parameters>|<get-parameters>(){}[0]
        abstract fun <set-parameters>(kotbase/Parameters?) // kotbase/Query.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    abstract fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Query.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    abstract fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Query.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    abstract fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/Query.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    abstract fun execute(): kotbase/ResultSet // kotbase/Query.execute|execute(){}[0]
    abstract fun explain(): kotlin/String // kotbase/Query.explain|explain(){}[0]
    abstract fun removeChangeListener(kotbase/ListenerToken) // kotbase/Query.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
}

abstract interface kotbase/WhereRouter : kotbase/Query { // kotbase/WhereRouter|null[0]
    abstract fun where(kotbase/Expression): kotbase/Where // kotbase/WhereRouter.where|where(kotbase.Expression){}[0]
}

final class kotbase.logging/ConsoleLogSink { // kotbase.logging/ConsoleLogSink|null[0]
    constructor <init>(kotbase/LogLevel, kotlin.collections/Collection<kotbase/LogDomain>?) // kotbase.logging/ConsoleLogSink.<init>|<init>(kotbase.LogLevel;kotlin.collections.Collection<kotbase.LogDomain>?){}[0]
    constructor <init>(kotbase/LogLevel, kotlin/Array<out kotbase/LogDomain>...) // kotbase.logging/ConsoleLogSink.<init>|<init>(kotbase.LogLevel;kotlin.Array<out|kotbase.LogDomain>...){}[0]
}

final class kotbase.logging/CustomLogSink { // kotbase.logging/CustomLogSink|null[0]
    constructor <init>(kotbase/LogLevel, kotlin.collections/Set<kotbase/LogDomain>, kotbase.logging/LogSink) // kotbase.logging/CustomLogSink.<init>|<init>(kotbase.LogLevel;kotlin.collections.Set<kotbase.LogDomain>;kotbase.logging.LogSink){}[0]
    constructor <init>(kotbase/LogLevel, kotlin/Array<out kotbase/LogDomain>..., kotbase.logging/LogSink) // kotbase.logging/CustomLogSink.<init>|<init>(kotbase.LogLevel;kotlin.Array<out|kotbase.LogDomain>...;kotbase.logging.LogSink){}[0]
}

final class kotbase.logging/FileLogSink { // kotbase.logging/FileLogSink|null[0]
    constructor <init>(kotbase/LogLevel = ..., kotlin/String, kotlin/Boolean = ..., kotlin/Int = ..., kotlin/Long = ...) // kotbase.logging/FileLogSink.<init>|<init>(kotbase.LogLevel;kotlin.String;kotlin.Boolean;kotlin.Int;kotlin.Long){}[0]

    final val directory // kotbase.logging/FileLogSink.directory|{}directory[0]
        final fun <get-directory>(): kotlin/String // kotbase.logging/FileLogSink.directory.<get-directory>|<get-directory>(){}[0]
    final val isPlainText // kotbase.logging/FileLogSink.isPlainText|{}isPlainText[0]
        final fun <get-isPlainText>(): kotlin/Boolean // kotbase.logging/FileLogSink.isPlainText.<get-isPlainText>|<get-isPlainText>(){}[0]
    final val level // kotbase.logging/FileLogSink.level|{}level[0]
        final fun <get-level>(): kotbase/LogLevel // kotbase.logging/FileLogSink.level.<get-level>|<get-level>(){}[0]
    final val maxFileSize // kotbase.logging/FileLogSink.maxFileSize|{}maxFileSize[0]
        final fun <get-maxFileSize>(): kotlin/Long // kotbase.logging/FileLogSink.maxFileSize.<get-maxFileSize>|<get-maxFileSize>(){}[0]
    final val maxKeptFiles // kotbase.logging/FileLogSink.maxKeptFiles|{}maxKeptFiles[0]
        final fun <get-maxKeptFiles>(): kotlin/Int // kotbase.logging/FileLogSink.maxKeptFiles.<get-maxKeptFiles>|<get-maxKeptFiles>(){}[0]
}

final class kotbase/ArrayExpressionIn { // kotbase/ArrayExpressionIn|null[0]
    final fun in(kotbase/Expression): kotbase/ArrayExpressionSatisfies // kotbase/ArrayExpressionIn.in|in(kotbase.Expression){}[0]
}

final class kotbase/ArrayExpressionSatisfies { // kotbase/ArrayExpressionSatisfies|null[0]
    final fun satisfies(kotbase/Expression): kotbase/Expression // kotbase/ArrayExpressionSatisfies.satisfies|satisfies(kotbase.Expression){}[0]
}

final class kotbase/ArrayIndexConfiguration : kotbase/IndexConfiguration { // kotbase/ArrayIndexConfiguration|null[0]
    constructor <init>(kotlin/String) // kotbase/ArrayIndexConfiguration.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin.collections/List<kotlin/String>? = ...) // kotbase/ArrayIndexConfiguration.<init>|<init>(kotlin.String;kotlin.collections.List<kotlin.String>?){}[0]
    constructor <init>(kotlin/String, kotlin/Array<out kotlin/String>...) // kotbase/ArrayIndexConfiguration.<init>|<init>(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]

    final val path // kotbase/ArrayIndexConfiguration.path|{}path[0]
        final fun <get-path>(): kotlin/String // kotbase/ArrayIndexConfiguration.path.<get-path>|<get-path>(){}[0]
}

final class kotbase/BasicAuthenticator : kotbase/Authenticator { // kotbase/BasicAuthenticator|null[0]
    constructor <init>(kotlin/String, kotlin/CharArray) // kotbase/BasicAuthenticator.<init>|<init>(kotlin.String;kotlin.CharArray){}[0]

    final val passwordChars // kotbase/BasicAuthenticator.passwordChars|{}passwordChars[0]
        final fun <get-passwordChars>(): kotlin/CharArray // kotbase/BasicAuthenticator.passwordChars.<get-passwordChars>|<get-passwordChars>(){}[0]
    final val username // kotbase/BasicAuthenticator.username|{}username[0]
        final fun <get-username>(): kotlin/String // kotbase/BasicAuthenticator.username.<get-username>|<get-username>(){}[0]
}

final class kotbase/CouchbaseLiteError : kotlin/IllegalStateException { // kotbase/CouchbaseLiteError|null[0]
    constructor <init>(kotlin/String) // kotbase/CouchbaseLiteError.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/Exception?) // kotbase/CouchbaseLiteError.<init>|<init>(kotlin.String;kotlin.Exception?){}[0]
}

final class kotbase/CouchbaseLiteException : kotlin/Exception { // kotbase/CouchbaseLiteException|null[0]
    constructor <init>(kotlin/String) // kotbase/CouchbaseLiteException.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/Exception) // kotbase/CouchbaseLiteException.<init>|<init>(kotlin.String;kotlin.Exception){}[0]
    constructor <init>(kotlin/String, kotlin/Exception, kotlin/String, kotlin/Int) // kotbase/CouchbaseLiteException.<init>|<init>(kotlin.String;kotlin.Exception;kotlin.String;kotlin.Int){}[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/Int) // kotbase/CouchbaseLiteException.<init>|<init>(kotlin.String;kotlin.String;kotlin.Int){}[0]

    final val message // kotbase/CouchbaseLiteException.message|{}message[0]
        final fun <get-message>(): kotlin/String // kotbase/CouchbaseLiteException.message.<get-message>|<get-message>(){}[0]

    final fun toString(): kotlin/String // kotbase/CouchbaseLiteException.toString|toString(){}[0]
}

final class kotbase/DocumentFragment { // kotbase/DocumentFragment|null[0]
    final val document // kotbase/DocumentFragment.document|{}document[0]
        final fun <get-document>(): kotbase/Document? // kotbase/DocumentFragment.document.<get-document>|<get-document>(){}[0]
    final val exists // kotbase/DocumentFragment.exists|{}exists[0]
        final fun <get-exists>(): kotlin/Boolean // kotbase/DocumentFragment.exists.<get-exists>|<get-exists>(){}[0]

    final fun get(kotlin/String): kotbase/Fragment // kotbase/DocumentFragment.get|get(kotlin.String){}[0]
}

final class kotbase/FullTextIndex : kotbase/Index { // kotbase/FullTextIndex|null[0]
    final var isIgnoringAccents // kotbase/FullTextIndex.isIgnoringAccents|{}isIgnoringAccents[0]
        final fun <get-isIgnoringAccents>(): kotlin/Boolean // kotbase/FullTextIndex.isIgnoringAccents.<get-isIgnoringAccents>|<get-isIgnoringAccents>(){}[0]
        final fun <set-isIgnoringAccents>(kotlin/Boolean) // kotbase/FullTextIndex.isIgnoringAccents.<set-isIgnoringAccents>|<set-isIgnoringAccents>(kotlin.Boolean){}[0]
    final var language // kotbase/FullTextIndex.language|{}language[0]
        final fun <get-language>(): kotlin/String? // kotbase/FullTextIndex.language.<get-language>|<get-language>(){}[0]
        final fun <set-language>(kotlin/String?) // kotbase/FullTextIndex.language.<set-language>|<set-language>(kotlin.String?){}[0]

    final fun ignoreAccents(kotlin/Boolean): kotbase/FullTextIndex // kotbase/FullTextIndex.ignoreAccents|ignoreAccents(kotlin.Boolean){}[0]
    final fun setLanguage(kotlin/String?): kotbase/FullTextIndex // kotbase/FullTextIndex.setLanguage|setLanguage(kotlin.String?){}[0]
}

final class kotbase/FullTextIndexConfiguration : kotbase/IndexConfiguration { // kotbase/FullTextIndexConfiguration|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String>) // kotbase/FullTextIndexConfiguration.<init>|<init>(kotlin.collections.List<kotlin.String>){}[0]
    constructor <init>(kotlin.collections/List<kotlin/String>, kotlin/String? = ..., kotlin/Boolean = ..., kotlin/String? = ...) // kotbase/FullTextIndexConfiguration.<init>|<init>(kotlin.collections.List<kotlin.String>;kotlin.String?;kotlin.Boolean;kotlin.String?){}[0]
    constructor <init>(kotlin/Array<out kotlin/String>...) // kotbase/FullTextIndexConfiguration.<init>|<init>(kotlin.Array<out|kotlin.String>...){}[0]
    constructor <init>(kotlin/Array<out kotlin/String>..., kotlin/String? = ..., kotlin/Boolean = ..., kotlin/String? = ...) // kotbase/FullTextIndexConfiguration.<init>|<init>(kotlin.Array<out|kotlin.String>...;kotlin.String?;kotlin.Boolean;kotlin.String?){}[0]

    final var isIgnoringAccents // kotbase/FullTextIndexConfiguration.isIgnoringAccents|{}isIgnoringAccents[0]
        final fun <get-isIgnoringAccents>(): kotlin/Boolean // kotbase/FullTextIndexConfiguration.isIgnoringAccents.<get-isIgnoringAccents>|<get-isIgnoringAccents>(){}[0]
        final fun <set-isIgnoringAccents>(kotlin/Boolean) // kotbase/FullTextIndexConfiguration.isIgnoringAccents.<set-isIgnoringAccents>|<set-isIgnoringAccents>(kotlin.Boolean){}[0]
    final var language // kotbase/FullTextIndexConfiguration.language|{}language[0]
        final fun <get-language>(): kotlin/String? // kotbase/FullTextIndexConfiguration.language.<get-language>|<get-language>(){}[0]
        final fun <set-language>(kotlin/String?) // kotbase/FullTextIndexConfiguration.language.<set-language>|<set-language>(kotlin.String?){}[0]
    final var where // kotbase/FullTextIndexConfiguration.where|{}where[0]
        final fun <get-where>(): kotlin/String? // kotbase/FullTextIndexConfiguration.where.<get-where>|<get-where>(){}[0]
        final fun <set-where>(kotlin/String?) // kotbase/FullTextIndexConfiguration.where.<set-where>|<set-where>(kotlin.String?){}[0]

    final fun ignoreAccents(kotlin/Boolean): kotbase/FullTextIndexConfiguration // kotbase/FullTextIndexConfiguration.ignoreAccents|ignoreAccents(kotlin.Boolean){}[0]
    final fun setLanguage(kotlin/String?): kotbase/FullTextIndexConfiguration // kotbase/FullTextIndexConfiguration.setLanguage|setLanguage(kotlin.String?){}[0]
    final fun setWhere(kotlin/String?): kotbase/FullTextIndexConfiguration // kotbase/FullTextIndexConfiguration.setWhere|setWhere(kotlin.String?){}[0]
}

final class kotbase/MetaExpression : kotbase/Expression { // kotbase/MetaExpression|null[0]
    final fun from(kotlin/String): kotbase/Expression // kotbase/MetaExpression.from|from(kotlin.String){}[0]
}

final class kotbase/MutableArray : kotbase/Array, kotbase/MutableArrayInterface { // kotbase/MutableArray|null[0]
    constructor <init>() // kotbase/MutableArray.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/List<kotlin/Any?>) // kotbase/MutableArray.<init>|<init>(kotlin.collections.List<kotlin.Any?>){}[0]
    constructor <init>(kotlin/String) // kotbase/MutableArray.<init>|<init>(kotlin.String){}[0]

    final fun addArray(kotbase/Array?): kotbase/MutableArray // kotbase/MutableArray.addArray|addArray(kotbase.Array?){}[0]
    final fun addBlob(kotbase/Blob?): kotbase/MutableArray // kotbase/MutableArray.addBlob|addBlob(kotbase.Blob?){}[0]
    final fun addBoolean(kotlin/Boolean): kotbase/MutableArray // kotbase/MutableArray.addBoolean|addBoolean(kotlin.Boolean){}[0]
    final fun addDate(kotlinx.datetime/Instant?): kotbase/MutableArray // kotbase/MutableArray.addDate|addDate(kotlinx.datetime.Instant?){}[0]
    final fun addDictionary(kotbase/Dictionary?): kotbase/MutableArray // kotbase/MutableArray.addDictionary|addDictionary(kotbase.Dictionary?){}[0]
    final fun addDouble(kotlin/Double): kotbase/MutableArray // kotbase/MutableArray.addDouble|addDouble(kotlin.Double){}[0]
    final fun addFloat(kotlin/Float): kotbase/MutableArray // kotbase/MutableArray.addFloat|addFloat(kotlin.Float){}[0]
    final fun addInt(kotlin/Int): kotbase/MutableArray // kotbase/MutableArray.addInt|addInt(kotlin.Int){}[0]
    final fun addLong(kotlin/Long): kotbase/MutableArray // kotbase/MutableArray.addLong|addLong(kotlin.Long){}[0]
    final fun addNumber(kotlin/Number?): kotbase/MutableArray // kotbase/MutableArray.addNumber|addNumber(kotlin.Number?){}[0]
    final fun addString(kotlin/String?): kotbase/MutableArray // kotbase/MutableArray.addString|addString(kotlin.String?){}[0]
    final fun addValue(kotlin/Any?): kotbase/MutableArray // kotbase/MutableArray.addValue|addValue(kotlin.Any?){}[0]
    final fun getArray(kotlin/Int): kotbase/MutableArray? // kotbase/MutableArray.getArray|getArray(kotlin.Int){}[0]
    final fun getDictionary(kotlin/Int): kotbase/MutableDictionary? // kotbase/MutableArray.getDictionary|getDictionary(kotlin.Int){}[0]
    final fun insertArray(kotlin/Int, kotbase/Array?): kotbase/MutableArray // kotbase/MutableArray.insertArray|insertArray(kotlin.Int;kotbase.Array?){}[0]
    final fun insertBlob(kotlin/Int, kotbase/Blob?): kotbase/MutableArray // kotbase/MutableArray.insertBlob|insertBlob(kotlin.Int;kotbase.Blob?){}[0]
    final fun insertBoolean(kotlin/Int, kotlin/Boolean): kotbase/MutableArray // kotbase/MutableArray.insertBoolean|insertBoolean(kotlin.Int;kotlin.Boolean){}[0]
    final fun insertDate(kotlin/Int, kotlinx.datetime/Instant?): kotbase/MutableArray // kotbase/MutableArray.insertDate|insertDate(kotlin.Int;kotlinx.datetime.Instant?){}[0]
    final fun insertDictionary(kotlin/Int, kotbase/Dictionary?): kotbase/MutableArray // kotbase/MutableArray.insertDictionary|insertDictionary(kotlin.Int;kotbase.Dictionary?){}[0]
    final fun insertDouble(kotlin/Int, kotlin/Double): kotbase/MutableArray // kotbase/MutableArray.insertDouble|insertDouble(kotlin.Int;kotlin.Double){}[0]
    final fun insertFloat(kotlin/Int, kotlin/Float): kotbase/MutableArray // kotbase/MutableArray.insertFloat|insertFloat(kotlin.Int;kotlin.Float){}[0]
    final fun insertInt(kotlin/Int, kotlin/Int): kotbase/MutableArray // kotbase/MutableArray.insertInt|insertInt(kotlin.Int;kotlin.Int){}[0]
    final fun insertLong(kotlin/Int, kotlin/Long): kotbase/MutableArray // kotbase/MutableArray.insertLong|insertLong(kotlin.Int;kotlin.Long){}[0]
    final fun insertNumber(kotlin/Int, kotlin/Number?): kotbase/MutableArray // kotbase/MutableArray.insertNumber|insertNumber(kotlin.Int;kotlin.Number?){}[0]
    final fun insertString(kotlin/Int, kotlin/String?): kotbase/MutableArray // kotbase/MutableArray.insertString|insertString(kotlin.Int;kotlin.String?){}[0]
    final fun insertValue(kotlin/Int, kotlin/Any?): kotbase/MutableArray // kotbase/MutableArray.insertValue|insertValue(kotlin.Int;kotlin.Any?){}[0]
    final fun remove(kotlin/Int): kotbase/MutableArray // kotbase/MutableArray.remove|remove(kotlin.Int){}[0]
    final fun setArray(kotlin/Int, kotbase/Array?): kotbase/MutableArray // kotbase/MutableArray.setArray|setArray(kotlin.Int;kotbase.Array?){}[0]
    final fun setBlob(kotlin/Int, kotbase/Blob?): kotbase/MutableArray // kotbase/MutableArray.setBlob|setBlob(kotlin.Int;kotbase.Blob?){}[0]
    final fun setBoolean(kotlin/Int, kotlin/Boolean): kotbase/MutableArray // kotbase/MutableArray.setBoolean|setBoolean(kotlin.Int;kotlin.Boolean){}[0]
    final fun setData(kotlin.collections/List<kotlin/Any?>): kotbase/MutableArray // kotbase/MutableArray.setData|setData(kotlin.collections.List<kotlin.Any?>){}[0]
    final fun setDate(kotlin/Int, kotlinx.datetime/Instant?): kotbase/MutableArray // kotbase/MutableArray.setDate|setDate(kotlin.Int;kotlinx.datetime.Instant?){}[0]
    final fun setDictionary(kotlin/Int, kotbase/Dictionary?): kotbase/MutableArray // kotbase/MutableArray.setDictionary|setDictionary(kotlin.Int;kotbase.Dictionary?){}[0]
    final fun setDouble(kotlin/Int, kotlin/Double): kotbase/MutableArray // kotbase/MutableArray.setDouble|setDouble(kotlin.Int;kotlin.Double){}[0]
    final fun setFloat(kotlin/Int, kotlin/Float): kotbase/MutableArray // kotbase/MutableArray.setFloat|setFloat(kotlin.Int;kotlin.Float){}[0]
    final fun setInt(kotlin/Int, kotlin/Int): kotbase/MutableArray // kotbase/MutableArray.setInt|setInt(kotlin.Int;kotlin.Int){}[0]
    final fun setJSON(kotlin/String): kotbase/MutableArray // kotbase/MutableArray.setJSON|setJSON(kotlin.String){}[0]
    final fun setLong(kotlin/Int, kotlin/Long): kotbase/MutableArray // kotbase/MutableArray.setLong|setLong(kotlin.Int;kotlin.Long){}[0]
    final fun setNumber(kotlin/Int, kotlin/Number?): kotbase/MutableArray // kotbase/MutableArray.setNumber|setNumber(kotlin.Int;kotlin.Number?){}[0]
    final fun setString(kotlin/Int, kotlin/String?): kotbase/MutableArray // kotbase/MutableArray.setString|setString(kotlin.Int;kotlin.String?){}[0]
    final fun setValue(kotlin/Int, kotlin/Any?): kotbase/MutableArray // kotbase/MutableArray.setValue|setValue(kotlin.Int;kotlin.Any?){}[0]
    final fun toJSON(): kotlin/String // kotbase/MutableArray.toJSON|toJSON(){}[0]

    // Targets: [linux, mingwX64]
    final val actual // kotbase/MutableArray.actual|{}actual[0]
        final fun <get-actual>(): kotlinx.cinterop/CPointer<cnames.structs/_FLArray> // kotbase/MutableArray.actual.<get-actual>|<get-actual>(){}[0]

    // Targets: [linux, mingwX64]
    final fun getBlob(kotlin/Int): kotbase/Blob? // kotbase/MutableArray.getBlob|getBlob(kotlin.Int){}[0]

    // Targets: [linux, mingwX64]
    final fun getValue(kotlin/Int): kotlin/Any? // kotbase/MutableArray.getValue|getValue(kotlin.Int){}[0]
}

final class kotbase/MutableDictionary : kotbase/Dictionary, kotbase/MutableDictionaryInterface { // kotbase/MutableDictionary|null[0]
    constructor <init>() // kotbase/MutableDictionary.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/Map<kotlin/String, kotlin/Any?>) // kotbase/MutableDictionary.<init>|<init>(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    constructor <init>(kotlin/String) // kotbase/MutableDictionary.<init>|<init>(kotlin.String){}[0]

    final fun getArray(kotlin/String): kotbase/MutableArray? // kotbase/MutableDictionary.getArray|getArray(kotlin.String){}[0]
    final fun getDictionary(kotlin/String): kotbase/MutableDictionary? // kotbase/MutableDictionary.getDictionary|getDictionary(kotlin.String){}[0]
    final fun remove(kotlin/String): kotbase/MutableDictionary // kotbase/MutableDictionary.remove|remove(kotlin.String){}[0]
    final fun setArray(kotlin/String, kotbase/Array?): kotbase/MutableDictionary // kotbase/MutableDictionary.setArray|setArray(kotlin.String;kotbase.Array?){}[0]
    final fun setBlob(kotlin/String, kotbase/Blob?): kotbase/MutableDictionary // kotbase/MutableDictionary.setBlob|setBlob(kotlin.String;kotbase.Blob?){}[0]
    final fun setBoolean(kotlin/String, kotlin/Boolean): kotbase/MutableDictionary // kotbase/MutableDictionary.setBoolean|setBoolean(kotlin.String;kotlin.Boolean){}[0]
    final fun setData(kotlin.collections/Map<kotlin/String, kotlin/Any?>): kotbase/MutableDictionary // kotbase/MutableDictionary.setData|setData(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    final fun setDate(kotlin/String, kotlinx.datetime/Instant?): kotbase/MutableDictionary // kotbase/MutableDictionary.setDate|setDate(kotlin.String;kotlinx.datetime.Instant?){}[0]
    final fun setDictionary(kotlin/String, kotbase/Dictionary?): kotbase/MutableDictionary // kotbase/MutableDictionary.setDictionary|setDictionary(kotlin.String;kotbase.Dictionary?){}[0]
    final fun setDouble(kotlin/String, kotlin/Double): kotbase/MutableDictionary // kotbase/MutableDictionary.setDouble|setDouble(kotlin.String;kotlin.Double){}[0]
    final fun setFloat(kotlin/String, kotlin/Float): kotbase/MutableDictionary // kotbase/MutableDictionary.setFloat|setFloat(kotlin.String;kotlin.Float){}[0]
    final fun setInt(kotlin/String, kotlin/Int): kotbase/MutableDictionary // kotbase/MutableDictionary.setInt|setInt(kotlin.String;kotlin.Int){}[0]
    final fun setJSON(kotlin/String): kotbase/MutableDictionary // kotbase/MutableDictionary.setJSON|setJSON(kotlin.String){}[0]
    final fun setLong(kotlin/String, kotlin/Long): kotbase/MutableDictionary // kotbase/MutableDictionary.setLong|setLong(kotlin.String;kotlin.Long){}[0]
    final fun setNumber(kotlin/String, kotlin/Number?): kotbase/MutableDictionary // kotbase/MutableDictionary.setNumber|setNumber(kotlin.String;kotlin.Number?){}[0]
    final fun setString(kotlin/String, kotlin/String?): kotbase/MutableDictionary // kotbase/MutableDictionary.setString|setString(kotlin.String;kotlin.String?){}[0]
    final fun setValue(kotlin/String, kotlin/Any?): kotbase/MutableDictionary // kotbase/MutableDictionary.setValue|setValue(kotlin.String;kotlin.Any?){}[0]
    final fun toJSON(): kotlin/String // kotbase/MutableDictionary.toJSON|toJSON(){}[0]

    // Targets: [linux, mingwX64]
    final fun getBlob(kotlin/String): kotbase/Blob? // kotbase/MutableDictionary.getBlob|getBlob(kotlin.String){}[0]

    // Targets: [linux, mingwX64]
    final fun getValue(kotlin/String): kotlin/Any? // kotbase/MutableDictionary.getValue|getValue(kotlin.String){}[0]
}

final class kotbase/MutableDocument : kotbase/Document, kotbase/MutableDictionaryInterface { // kotbase/MutableDocument|null[0]
    constructor <init>() // kotbase/MutableDocument.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/Map<kotlin/String, kotlin/Any?>) // kotbase/MutableDocument.<init>|<init>(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    constructor <init>(kotlin/String?) // kotbase/MutableDocument.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin.collections/Map<kotlin/String, kotlin/Any?>) // kotbase/MutableDocument.<init>|<init>(kotlin.String?;kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    constructor <init>(kotlin/String?, kotlin/String) // kotbase/MutableDocument.<init>|<init>(kotlin.String?;kotlin.String){}[0]

    final fun getArray(kotlin/String): kotbase/MutableArray? // kotbase/MutableDocument.getArray|getArray(kotlin.String){}[0]
    final fun getDictionary(kotlin/String): kotbase/MutableDictionary? // kotbase/MutableDocument.getDictionary|getDictionary(kotlin.String){}[0]
    final fun remove(kotlin/String): kotbase/MutableDocument // kotbase/MutableDocument.remove|remove(kotlin.String){}[0]
    final fun setArray(kotlin/String, kotbase/Array?): kotbase/MutableDocument // kotbase/MutableDocument.setArray|setArray(kotlin.String;kotbase.Array?){}[0]
    final fun setBlob(kotlin/String, kotbase/Blob?): kotbase/MutableDocument // kotbase/MutableDocument.setBlob|setBlob(kotlin.String;kotbase.Blob?){}[0]
    final fun setBoolean(kotlin/String, kotlin/Boolean): kotbase/MutableDocument // kotbase/MutableDocument.setBoolean|setBoolean(kotlin.String;kotlin.Boolean){}[0]
    final fun setData(kotlin.collections/Map<kotlin/String, kotlin/Any?>): kotbase/MutableDocument // kotbase/MutableDocument.setData|setData(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    final fun setDate(kotlin/String, kotlinx.datetime/Instant?): kotbase/MutableDocument // kotbase/MutableDocument.setDate|setDate(kotlin.String;kotlinx.datetime.Instant?){}[0]
    final fun setDictionary(kotlin/String, kotbase/Dictionary?): kotbase/MutableDocument // kotbase/MutableDocument.setDictionary|setDictionary(kotlin.String;kotbase.Dictionary?){}[0]
    final fun setDouble(kotlin/String, kotlin/Double): kotbase/MutableDocument // kotbase/MutableDocument.setDouble|setDouble(kotlin.String;kotlin.Double){}[0]
    final fun setFloat(kotlin/String, kotlin/Float): kotbase/MutableDocument // kotbase/MutableDocument.setFloat|setFloat(kotlin.String;kotlin.Float){}[0]
    final fun setInt(kotlin/String, kotlin/Int): kotbase/MutableDocument // kotbase/MutableDocument.setInt|setInt(kotlin.String;kotlin.Int){}[0]
    final fun setJSON(kotlin/String): kotbase/MutableDocument // kotbase/MutableDocument.setJSON|setJSON(kotlin.String){}[0]
    final fun setLong(kotlin/String, kotlin/Long): kotbase/MutableDocument // kotbase/MutableDocument.setLong|setLong(kotlin.String;kotlin.Long){}[0]
    final fun setNumber(kotlin/String, kotlin/Number?): kotbase/MutableDocument // kotbase/MutableDocument.setNumber|setNumber(kotlin.String;kotlin.Number?){}[0]
    final fun setString(kotlin/String, kotlin/String?): kotbase/MutableDocument // kotbase/MutableDocument.setString|setString(kotlin.String;kotlin.String?){}[0]
    final fun setValue(kotlin/String, kotlin/Any?): kotbase/MutableDocument // kotbase/MutableDocument.setValue|setValue(kotlin.String;kotlin.Any?){}[0]
    final fun toJSON(): kotlin/String // kotbase/MutableDocument.toJSON|toJSON(){}[0]

    // Targets: [linux, mingwX64]
    final fun getBlob(kotlin/String): kotbase/Blob? // kotbase/MutableDocument.getBlob|getBlob(kotlin.String){}[0]

    // Targets: [linux, mingwX64]
    final fun getValue(kotlin/String): kotlin/Any? // kotbase/MutableDocument.getValue|getValue(kotlin.String){}[0]
}

final class kotbase/MutableFragment : kotbase/Fragment { // kotbase/MutableFragment|null[0]
    final var array // kotbase/MutableFragment.array|{}array[0]
        final fun <get-array>(): kotbase/MutableArray? // kotbase/MutableFragment.array.<get-array>|<get-array>(){}[0]
        final fun <set-array>(kotbase/MutableArray?) // kotbase/MutableFragment.array.<set-array>|<set-array>(kotbase.MutableArray?){}[0]
    final var blob // kotbase/MutableFragment.blob|{}blob[0]
        final fun <get-blob>(): kotbase/Blob? // kotbase/MutableFragment.blob.<get-blob>|<get-blob>(){}[0]
        final fun <set-blob>(kotbase/Blob?) // kotbase/MutableFragment.blob.<set-blob>|<set-blob>(kotbase.Blob?){}[0]
    final var boolean // kotbase/MutableFragment.boolean|{}boolean[0]
        final fun <get-boolean>(): kotlin/Boolean // kotbase/MutableFragment.boolean.<get-boolean>|<get-boolean>(){}[0]
        final fun <set-boolean>(kotlin/Boolean) // kotbase/MutableFragment.boolean.<set-boolean>|<set-boolean>(kotlin.Boolean){}[0]
    final var date // kotbase/MutableFragment.date|{}date[0]
        final fun <get-date>(): kotlinx.datetime/Instant? // kotbase/MutableFragment.date.<get-date>|<get-date>(){}[0]
        final fun <set-date>(kotlinx.datetime/Instant?) // kotbase/MutableFragment.date.<set-date>|<set-date>(kotlinx.datetime.Instant?){}[0]
    final var dictionary // kotbase/MutableFragment.dictionary|{}dictionary[0]
        final fun <get-dictionary>(): kotbase/MutableDictionary? // kotbase/MutableFragment.dictionary.<get-dictionary>|<get-dictionary>(){}[0]
        final fun <set-dictionary>(kotbase/MutableDictionary?) // kotbase/MutableFragment.dictionary.<set-dictionary>|<set-dictionary>(kotbase.MutableDictionary?){}[0]
    final var double // kotbase/MutableFragment.double|{}double[0]
        final fun <get-double>(): kotlin/Double // kotbase/MutableFragment.double.<get-double>|<get-double>(){}[0]
        final fun <set-double>(kotlin/Double) // kotbase/MutableFragment.double.<set-double>|<set-double>(kotlin.Double){}[0]
    final var float // kotbase/MutableFragment.float|{}float[0]
        final fun <get-float>(): kotlin/Float // kotbase/MutableFragment.float.<get-float>|<get-float>(){}[0]
        final fun <set-float>(kotlin/Float) // kotbase/MutableFragment.float.<set-float>|<set-float>(kotlin.Float){}[0]
    final var int // kotbase/MutableFragment.int|{}int[0]
        final fun <get-int>(): kotlin/Int // kotbase/MutableFragment.int.<get-int>|<get-int>(){}[0]
        final fun <set-int>(kotlin/Int) // kotbase/MutableFragment.int.<set-int>|<set-int>(kotlin.Int){}[0]
    final var long // kotbase/MutableFragment.long|{}long[0]
        final fun <get-long>(): kotlin/Long // kotbase/MutableFragment.long.<get-long>|<get-long>(){}[0]
        final fun <set-long>(kotlin/Long) // kotbase/MutableFragment.long.<set-long>|<set-long>(kotlin.Long){}[0]
    final var number // kotbase/MutableFragment.number|{}number[0]
        final fun <get-number>(): kotlin/Number? // kotbase/MutableFragment.number.<get-number>|<get-number>(){}[0]
        final fun <set-number>(kotlin/Number?) // kotbase/MutableFragment.number.<set-number>|<set-number>(kotlin.Number?){}[0]
    final var string // kotbase/MutableFragment.string|{}string[0]
        final fun <get-string>(): kotlin/String? // kotbase/MutableFragment.string.<get-string>|<get-string>(){}[0]
        final fun <set-string>(kotlin/String?) // kotbase/MutableFragment.string.<set-string>|<set-string>(kotlin.String?){}[0]
    final var value // kotbase/MutableFragment.value|{}value[0]
        final fun <get-value>(): kotlin/Any? // kotbase/MutableFragment.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(kotlin/Any?) // kotbase/MutableFragment.value.<set-value>|<set-value>(kotlin.Any?){}[0]

    final fun get(kotlin/Int): kotbase/MutableFragment // kotbase/MutableFragment.get|get(kotlin.Int){}[0]
    final fun get(kotlin/String): kotbase/MutableFragment // kotbase/MutableFragment.get|get(kotlin.String){}[0]
}

final class kotbase/PropertyExpression : kotbase/Expression { // kotbase/PropertyExpression|null[0]
    final fun from(kotlin/String): kotbase/Expression // kotbase/PropertyExpression.from|from(kotlin.String){}[0]
}

final class kotbase/ReplicatorProgress { // kotbase/ReplicatorProgress|null[0]
    final val completed // kotbase/ReplicatorProgress.completed|{}completed[0]
        final fun <get-completed>(): kotlin/Long // kotbase/ReplicatorProgress.completed.<get-completed>|<get-completed>(){}[0]
    final val total // kotbase/ReplicatorProgress.total|{}total[0]
        final fun <get-total>(): kotlin/Long // kotbase/ReplicatorProgress.total.<get-total>|<get-total>(){}[0]

    final fun toString(): kotlin/String // kotbase/ReplicatorProgress.toString|toString(){}[0]
}

final class kotbase/SessionAuthenticator : kotbase/Authenticator { // kotbase/SessionAuthenticator|null[0]
    constructor <init>(kotlin/String) // kotbase/SessionAuthenticator.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/String?) // kotbase/SessionAuthenticator.<init>|<init>(kotlin.String;kotlin.String?){}[0]

    final val cookieName // kotbase/SessionAuthenticator.cookieName|{}cookieName[0]
        final fun <get-cookieName>(): kotlin/String // kotbase/SessionAuthenticator.cookieName.<get-cookieName>|<get-cookieName>(){}[0]
    final val sessionID // kotbase/SessionAuthenticator.sessionID|{}sessionID[0]
        final fun <get-sessionID>(): kotlin/String // kotbase/SessionAuthenticator.sessionID.<get-sessionID>|<get-sessionID>(){}[0]
}

final class kotbase/URLEndpoint : kotbase/Endpoint { // kotbase/URLEndpoint|null[0]
    constructor <init>(kotlin/String) // kotbase/URLEndpoint.<init>|<init>(kotlin.String){}[0]

    final val url // kotbase/URLEndpoint.url|{}url[0]
        final fun <get-url>(): kotlin/String // kotbase/URLEndpoint.url.<get-url>|<get-url>(){}[0]

    // Targets: [linux, mingwX64]
    final fun toString(): kotlin/String // kotbase/URLEndpoint.toString|toString(){}[0]
}

final class kotbase/ValueIndex : kotbase/Index // kotbase/ValueIndex|null[0]

final class kotbase/ValueIndexConfiguration : kotbase/IndexConfiguration { // kotbase/ValueIndexConfiguration|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String>) // kotbase/ValueIndexConfiguration.<init>|<init>(kotlin.collections.List<kotlin.String>){}[0]
    constructor <init>(kotlin.collections/List<kotlin/String>, kotlin/String? = ...) // kotbase/ValueIndexConfiguration.<init>|<init>(kotlin.collections.List<kotlin.String>;kotlin.String?){}[0]
    constructor <init>(kotlin/Array<out kotlin/String>...) // kotbase/ValueIndexConfiguration.<init>|<init>(kotlin.Array<out|kotlin.String>...){}[0]
    constructor <init>(kotlin/Array<out kotlin/String>..., kotlin/String? = ...) // kotbase/ValueIndexConfiguration.<init>|<init>(kotlin.Array<out|kotlin.String>...;kotlin.String?){}[0]

    final var where // kotbase/ValueIndexConfiguration.where|{}where[0]
        final fun <get-where>(): kotlin/String? // kotbase/ValueIndexConfiguration.where.<get-where>|<get-where>(){}[0]
        final fun <set-where>(kotlin/String?) // kotbase/ValueIndexConfiguration.where.<set-where>|<set-where>(kotlin.String?){}[0]

    final fun setWhere(kotlin/String?): kotbase/ValueIndexConfiguration // kotbase/ValueIndexConfiguration.setWhere|setWhere(kotlin.String?){}[0]
}

final class kotbase/VariableExpression : kotbase/Expression // kotbase/VariableExpression|null[0]

open class kotbase/Fragment { // kotbase/Fragment|null[0]
    final val exists // kotbase/Fragment.exists|{}exists[0]
        final fun <get-exists>(): kotlin/Boolean // kotbase/Fragment.exists.<get-exists>|<get-exists>(){}[0]
    final val index // kotbase/Fragment.index|{}index[0]
        final fun <get-index>(): kotlin/Int? // kotbase/Fragment.index.<get-index>|<get-index>(){}[0]
    final val key // kotbase/Fragment.key|{}key[0]
        final fun <get-key>(): kotlin/String? // kotbase/Fragment.key.<get-key>|<get-key>(){}[0]
    final val parent // kotbase/Fragment.parent|{}parent[0]
        final fun <get-parent>(): kotlin/Any? // kotbase/Fragment.parent.<get-parent>|<get-parent>(){}[0]
    open val array // kotbase/Fragment.array|{}array[0]
        open fun <get-array>(): kotbase/Array? // kotbase/Fragment.array.<get-array>|<get-array>(){}[0]
    open val arrayParent // kotbase/Fragment.arrayParent|{}arrayParent[0]
        open fun <get-arrayParent>(): kotbase/ArrayInterface // kotbase/Fragment.arrayParent.<get-arrayParent>|<get-arrayParent>(){}[0]
    open val blob // kotbase/Fragment.blob|{}blob[0]
        open fun <get-blob>(): kotbase/Blob? // kotbase/Fragment.blob.<get-blob>|<get-blob>(){}[0]
    open val boolean // kotbase/Fragment.boolean|{}boolean[0]
        open fun <get-boolean>(): kotlin/Boolean // kotbase/Fragment.boolean.<get-boolean>|<get-boolean>(){}[0]
    open val date // kotbase/Fragment.date|{}date[0]
        open fun <get-date>(): kotlinx.datetime/Instant? // kotbase/Fragment.date.<get-date>|<get-date>(){}[0]
    open val dictParent // kotbase/Fragment.dictParent|{}dictParent[0]
        open fun <get-dictParent>(): kotbase/DictionaryInterface // kotbase/Fragment.dictParent.<get-dictParent>|<get-dictParent>(){}[0]
    open val dictionary // kotbase/Fragment.dictionary|{}dictionary[0]
        open fun <get-dictionary>(): kotbase/Dictionary? // kotbase/Fragment.dictionary.<get-dictionary>|<get-dictionary>(){}[0]
    open val double // kotbase/Fragment.double|{}double[0]
        open fun <get-double>(): kotlin/Double // kotbase/Fragment.double.<get-double>|<get-double>(){}[0]
    open val float // kotbase/Fragment.float|{}float[0]
        open fun <get-float>(): kotlin/Float // kotbase/Fragment.float.<get-float>|<get-float>(){}[0]
    open val int // kotbase/Fragment.int|{}int[0]
        open fun <get-int>(): kotlin/Int // kotbase/Fragment.int.<get-int>|<get-int>(){}[0]
    open val long // kotbase/Fragment.long|{}long[0]
        open fun <get-long>(): kotlin/Long // kotbase/Fragment.long.<get-long>|<get-long>(){}[0]
    open val number // kotbase/Fragment.number|{}number[0]
        open fun <get-number>(): kotlin/Number? // kotbase/Fragment.number.<get-number>|<get-number>(){}[0]
    open val string // kotbase/Fragment.string|{}string[0]
        open fun <get-string>(): kotlin/String? // kotbase/Fragment.string.<get-string>|<get-string>(){}[0]
    open val value // kotbase/Fragment.value|{}value[0]
        open fun <get-value>(): kotlin/Any? // kotbase/Fragment.value.<get-value>|<get-value>(){}[0]

    open fun get(kotlin/Int): kotbase/Fragment // kotbase/Fragment.get|get(kotlin.Int){}[0]
    open fun get(kotlin/String): kotbase/Fragment // kotbase/Fragment.get|get(kotlin.String){}[0]
}

final object kotbase.logging/LogSinks { // kotbase.logging/LogSinks|null[0]
    final var console // kotbase.logging/LogSinks.console|{}console[0]
        final fun <get-console>(): kotbase.logging/ConsoleLogSink? // kotbase.logging/LogSinks.console.<get-console>|<get-console>(){}[0]
        final fun <set-console>(kotbase.logging/ConsoleLogSink?) // kotbase.logging/LogSinks.console.<set-console>|<set-console>(kotbase.logging.ConsoleLogSink?){}[0]
    final var custom // kotbase.logging/LogSinks.custom|{}custom[0]
        final fun <get-custom>(): kotbase.logging/CustomLogSink? // kotbase.logging/LogSinks.custom.<get-custom>|<get-custom>(){}[0]
        final fun <set-custom>(kotbase.logging/CustomLogSink?) // kotbase.logging/LogSinks.custom.<set-custom>|<set-custom>(kotbase.logging.CustomLogSink?){}[0]
    final var file // kotbase.logging/LogSinks.file|{}file[0]
        final fun <get-file>(): kotbase.logging/FileLogSink? // kotbase.logging/LogSinks.file.<get-file>|<get-file>(){}[0]
        final fun <set-file>(kotbase.logging/FileLogSink?) // kotbase.logging/LogSinks.file.<set-file>|<set-file>(kotbase.logging.FileLogSink?){}[0]
}

final object kotbase/ArrayExpression { // kotbase/ArrayExpression|null[0]
    final fun any(kotbase/VariableExpression): kotbase/ArrayExpressionIn // kotbase/ArrayExpression.any|any(kotbase.VariableExpression){}[0]
    final fun anyAndEvery(kotbase/VariableExpression): kotbase/ArrayExpressionIn // kotbase/ArrayExpression.anyAndEvery|anyAndEvery(kotbase.VariableExpression){}[0]
    final fun every(kotbase/VariableExpression): kotbase/ArrayExpressionIn // kotbase/ArrayExpression.every|every(kotbase.VariableExpression){}[0]
    final fun variable(kotlin/String): kotbase/VariableExpression // kotbase/ArrayExpression.variable|variable(kotlin.String){}[0]
}

final object kotbase/ArrayFunction { // kotbase/ArrayFunction|null[0]
    final fun contains(kotbase/Expression, kotbase/Expression): kotbase/Expression // kotbase/ArrayFunction.contains|contains(kotbase.Expression;kotbase.Expression){}[0]
    final fun length(kotbase/Expression): kotbase/Expression // kotbase/ArrayFunction.length|length(kotbase.Expression){}[0]
}

final object kotbase/CBLError { // kotbase/CBLError|null[0]
    final object Code { // kotbase/CBLError.Code|null[0]
        final const val ASSERTION_FAILED // kotbase/CBLError.Code.ASSERTION_FAILED|{}ASSERTION_FAILED[0]
            final fun <get-ASSERTION_FAILED>(): kotlin/Int // kotbase/CBLError.Code.ASSERTION_FAILED.<get-ASSERTION_FAILED>|<get-ASSERTION_FAILED>(){}[0]
        final const val BAD_DOC_ID // kotbase/CBLError.Code.BAD_DOC_ID|{}BAD_DOC_ID[0]
            final fun <get-BAD_DOC_ID>(): kotlin/Int // kotbase/CBLError.Code.BAD_DOC_ID.<get-BAD_DOC_ID>|<get-BAD_DOC_ID>(){}[0]
        final const val BAD_REVISION_ID // kotbase/CBLError.Code.BAD_REVISION_ID|{}BAD_REVISION_ID[0]
            final fun <get-BAD_REVISION_ID>(): kotlin/Int // kotbase/CBLError.Code.BAD_REVISION_ID.<get-BAD_REVISION_ID>|<get-BAD_REVISION_ID>(){}[0]
        final const val BUSY // kotbase/CBLError.Code.BUSY|{}BUSY[0]
            final fun <get-BUSY>(): kotlin/Int // kotbase/CBLError.Code.BUSY.<get-BUSY>|<get-BUSY>(){}[0]
        final const val CANT_OPEN_FILE // kotbase/CBLError.Code.CANT_OPEN_FILE|{}CANT_OPEN_FILE[0]
            final fun <get-CANT_OPEN_FILE>(): kotlin/Int // kotbase/CBLError.Code.CANT_OPEN_FILE.<get-CANT_OPEN_FILE>|<get-CANT_OPEN_FILE>(){}[0]
        final const val CANT_UPGRADE_DATABASE // kotbase/CBLError.Code.CANT_UPGRADE_DATABASE|{}CANT_UPGRADE_DATABASE[0]
            final fun <get-CANT_UPGRADE_DATABASE>(): kotlin/Int // kotbase/CBLError.Code.CANT_UPGRADE_DATABASE.<get-CANT_UPGRADE_DATABASE>|<get-CANT_UPGRADE_DATABASE>(){}[0]
        final const val CONFLICT // kotbase/CBLError.Code.CONFLICT|{}CONFLICT[0]
            final fun <get-CONFLICT>(): kotlin/Int // kotbase/CBLError.Code.CONFLICT.<get-CONFLICT>|<get-CONFLICT>(){}[0]
        final const val CORRUPT_DATA // kotbase/CBLError.Code.CORRUPT_DATA|{}CORRUPT_DATA[0]
            final fun <get-CORRUPT_DATA>(): kotlin/Int // kotbase/CBLError.Code.CORRUPT_DATA.<get-CORRUPT_DATA>|<get-CORRUPT_DATA>(){}[0]
        final const val CORRUPT_REVISION_DATA // kotbase/CBLError.Code.CORRUPT_REVISION_DATA|{}CORRUPT_REVISION_DATA[0]
            final fun <get-CORRUPT_REVISION_DATA>(): kotlin/Int // kotbase/CBLError.Code.CORRUPT_REVISION_DATA.<get-CORRUPT_REVISION_DATA>|<get-CORRUPT_REVISION_DATA>(){}[0]
        final const val CRYPTO // kotbase/CBLError.Code.CRYPTO|{}CRYPTO[0]
            final fun <get-CRYPTO>(): kotlin/Int // kotbase/CBLError.Code.CRYPTO.<get-CRYPTO>|<get-CRYPTO>(){}[0]
        final const val DATABASE_TOO_NEW // kotbase/CBLError.Code.DATABASE_TOO_NEW|{}DATABASE_TOO_NEW[0]
            final fun <get-DATABASE_TOO_NEW>(): kotlin/Int // kotbase/CBLError.Code.DATABASE_TOO_NEW.<get-DATABASE_TOO_NEW>|<get-DATABASE_TOO_NEW>(){}[0]
        final const val DATABASE_TOO_OLD // kotbase/CBLError.Code.DATABASE_TOO_OLD|{}DATABASE_TOO_OLD[0]
            final fun <get-DATABASE_TOO_OLD>(): kotlin/Int // kotbase/CBLError.Code.DATABASE_TOO_OLD.<get-DATABASE_TOO_OLD>|<get-DATABASE_TOO_OLD>(){}[0]
        final const val DNS_FAILURE // kotbase/CBLError.Code.DNS_FAILURE|{}DNS_FAILURE[0]
            final fun <get-DNS_FAILURE>(): kotlin/Int // kotbase/CBLError.Code.DNS_FAILURE.<get-DNS_FAILURE>|<get-DNS_FAILURE>(){}[0]
        final const val HTTP_AUTH_REQUIRED // kotbase/CBLError.Code.HTTP_AUTH_REQUIRED|{}HTTP_AUTH_REQUIRED[0]
            final fun <get-HTTP_AUTH_REQUIRED>(): kotlin/Int // kotbase/CBLError.Code.HTTP_AUTH_REQUIRED.<get-HTTP_AUTH_REQUIRED>|<get-HTTP_AUTH_REQUIRED>(){}[0]
        final const val HTTP_BASE // kotbase/CBLError.Code.HTTP_BASE|{}HTTP_BASE[0]
            final fun <get-HTTP_BASE>(): kotlin/Int // kotbase/CBLError.Code.HTTP_BASE.<get-HTTP_BASE>|<get-HTTP_BASE>(){}[0]
        final const val HTTP_CONFLICT // kotbase/CBLError.Code.HTTP_CONFLICT|{}HTTP_CONFLICT[0]
            final fun <get-HTTP_CONFLICT>(): kotlin/Int // kotbase/CBLError.Code.HTTP_CONFLICT.<get-HTTP_CONFLICT>|<get-HTTP_CONFLICT>(){}[0]
        final const val HTTP_ENTITY_TOO_LARGE // kotbase/CBLError.Code.HTTP_ENTITY_TOO_LARGE|{}HTTP_ENTITY_TOO_LARGE[0]
            final fun <get-HTTP_ENTITY_TOO_LARGE>(): kotlin/Int // kotbase/CBLError.Code.HTTP_ENTITY_TOO_LARGE.<get-HTTP_ENTITY_TOO_LARGE>|<get-HTTP_ENTITY_TOO_LARGE>(){}[0]
        final const val HTTP_FORBIDDEN // kotbase/CBLError.Code.HTTP_FORBIDDEN|{}HTTP_FORBIDDEN[0]
            final fun <get-HTTP_FORBIDDEN>(): kotlin/Int // kotbase/CBLError.Code.HTTP_FORBIDDEN.<get-HTTP_FORBIDDEN>|<get-HTTP_FORBIDDEN>(){}[0]
        final const val HTTP_IM_A_TEAPOT // kotbase/CBLError.Code.HTTP_IM_A_TEAPOT|{}HTTP_IM_A_TEAPOT[0]
            final fun <get-HTTP_IM_A_TEAPOT>(): kotlin/Int // kotbase/CBLError.Code.HTTP_IM_A_TEAPOT.<get-HTTP_IM_A_TEAPOT>|<get-HTTP_IM_A_TEAPOT>(){}[0]
        final const val HTTP_INTERNAL_SERVER_ERROR // kotbase/CBLError.Code.HTTP_INTERNAL_SERVER_ERROR|{}HTTP_INTERNAL_SERVER_ERROR[0]
            final fun <get-HTTP_INTERNAL_SERVER_ERROR>(): kotlin/Int // kotbase/CBLError.Code.HTTP_INTERNAL_SERVER_ERROR.<get-HTTP_INTERNAL_SERVER_ERROR>|<get-HTTP_INTERNAL_SERVER_ERROR>(){}[0]
        final const val HTTP_NOT_FOUND // kotbase/CBLError.Code.HTTP_NOT_FOUND|{}HTTP_NOT_FOUND[0]
            final fun <get-HTTP_NOT_FOUND>(): kotlin/Int // kotbase/CBLError.Code.HTTP_NOT_FOUND.<get-HTTP_NOT_FOUND>|<get-HTTP_NOT_FOUND>(){}[0]
        final const val HTTP_NOT_IMPLEMENTED // kotbase/CBLError.Code.HTTP_NOT_IMPLEMENTED|{}HTTP_NOT_IMPLEMENTED[0]
            final fun <get-HTTP_NOT_IMPLEMENTED>(): kotlin/Int // kotbase/CBLError.Code.HTTP_NOT_IMPLEMENTED.<get-HTTP_NOT_IMPLEMENTED>|<get-HTTP_NOT_IMPLEMENTED>(){}[0]
        final const val HTTP_PROXY_AUTH_REQUIRED // kotbase/CBLError.Code.HTTP_PROXY_AUTH_REQUIRED|{}HTTP_PROXY_AUTH_REQUIRED[0]
            final fun <get-HTTP_PROXY_AUTH_REQUIRED>(): kotlin/Int // kotbase/CBLError.Code.HTTP_PROXY_AUTH_REQUIRED.<get-HTTP_PROXY_AUTH_REQUIRED>|<get-HTTP_PROXY_AUTH_REQUIRED>(){}[0]
        final const val HTTP_SERVICE_UNAVAILABLE // kotbase/CBLError.Code.HTTP_SERVICE_UNAVAILABLE|{}HTTP_SERVICE_UNAVAILABLE[0]
            final fun <get-HTTP_SERVICE_UNAVAILABLE>(): kotlin/Int // kotbase/CBLError.Code.HTTP_SERVICE_UNAVAILABLE.<get-HTTP_SERVICE_UNAVAILABLE>|<get-HTTP_SERVICE_UNAVAILABLE>(){}[0]
        final const val INVALID_PARAMETER // kotbase/CBLError.Code.INVALID_PARAMETER|{}INVALID_PARAMETER[0]
            final fun <get-INVALID_PARAMETER>(): kotlin/Int // kotbase/CBLError.Code.INVALID_PARAMETER.<get-INVALID_PARAMETER>|<get-INVALID_PARAMETER>(){}[0]
        final const val INVALID_QUERY // kotbase/CBLError.Code.INVALID_QUERY|{}INVALID_QUERY[0]
            final fun <get-INVALID_QUERY>(): kotlin/Int // kotbase/CBLError.Code.INVALID_QUERY.<get-INVALID_QUERY>|<get-INVALID_QUERY>(){}[0]
        final const val INVALID_QUERY_PARAM // kotbase/CBLError.Code.INVALID_QUERY_PARAM|{}INVALID_QUERY_PARAM[0]
            final fun <get-INVALID_QUERY_PARAM>(): kotlin/Int // kotbase/CBLError.Code.INVALID_QUERY_PARAM.<get-INVALID_QUERY_PARAM>|<get-INVALID_QUERY_PARAM>(){}[0]
        final const val INVALID_REDIRECT // kotbase/CBLError.Code.INVALID_REDIRECT|{}INVALID_REDIRECT[0]
            final fun <get-INVALID_REDIRECT>(): kotlin/Int // kotbase/CBLError.Code.INVALID_REDIRECT.<get-INVALID_REDIRECT>|<get-INVALID_REDIRECT>(){}[0]
        final const val INVALID_URL // kotbase/CBLError.Code.INVALID_URL|{}INVALID_URL[0]
            final fun <get-INVALID_URL>(): kotlin/Int // kotbase/CBLError.Code.INVALID_URL.<get-INVALID_URL>|<get-INVALID_URL>(){}[0]
        final const val IO_ERROR // kotbase/CBLError.Code.IO_ERROR|{}IO_ERROR[0]
            final fun <get-IO_ERROR>(): kotlin/Int // kotbase/CBLError.Code.IO_ERROR.<get-IO_ERROR>|<get-IO_ERROR>(){}[0]
        final const val MEMORY_ERROR // kotbase/CBLError.Code.MEMORY_ERROR|{}MEMORY_ERROR[0]
            final fun <get-MEMORY_ERROR>(): kotlin/Int // kotbase/CBLError.Code.MEMORY_ERROR.<get-MEMORY_ERROR>|<get-MEMORY_ERROR>(){}[0]
        final const val MISSING_INDEX // kotbase/CBLError.Code.MISSING_INDEX|{}MISSING_INDEX[0]
            final fun <get-MISSING_INDEX>(): kotlin/Int // kotbase/CBLError.Code.MISSING_INDEX.<get-MISSING_INDEX>|<get-MISSING_INDEX>(){}[0]
        final const val NETWORK_OFFSET // kotbase/CBLError.Code.NETWORK_OFFSET|{}NETWORK_OFFSET[0]
            final fun <get-NETWORK_OFFSET>(): kotlin/Int // kotbase/CBLError.Code.NETWORK_OFFSET.<get-NETWORK_OFFSET>|<get-NETWORK_OFFSET>(){}[0]
        final const val NOT_A_DATABASE_FILE // kotbase/CBLError.Code.NOT_A_DATABASE_FILE|{}NOT_A_DATABASE_FILE[0]
            final fun <get-NOT_A_DATABASE_FILE>(): kotlin/Int // kotbase/CBLError.Code.NOT_A_DATABASE_FILE.<get-NOT_A_DATABASE_FILE>|<get-NOT_A_DATABASE_FILE>(){}[0]
        final const val NOT_FOUND // kotbase/CBLError.Code.NOT_FOUND|{}NOT_FOUND[0]
            final fun <get-NOT_FOUND>(): kotlin/Int // kotbase/CBLError.Code.NOT_FOUND.<get-NOT_FOUND>|<get-NOT_FOUND>(){}[0]
        final const val NOT_IN_TRANSACTION // kotbase/CBLError.Code.NOT_IN_TRANSACTION|{}NOT_IN_TRANSACTION[0]
            final fun <get-NOT_IN_TRANSACTION>(): kotlin/Int // kotbase/CBLError.Code.NOT_IN_TRANSACTION.<get-NOT_IN_TRANSACTION>|<get-NOT_IN_TRANSACTION>(){}[0]
        final const val NOT_OPEN // kotbase/CBLError.Code.NOT_OPEN|{}NOT_OPEN[0]
            final fun <get-NOT_OPEN>(): kotlin/Int // kotbase/CBLError.Code.NOT_OPEN.<get-NOT_OPEN>|<get-NOT_OPEN>(){}[0]
        final const val NOT_WRITABLE // kotbase/CBLError.Code.NOT_WRITABLE|{}NOT_WRITABLE[0]
            final fun <get-NOT_WRITABLE>(): kotlin/Int // kotbase/CBLError.Code.NOT_WRITABLE.<get-NOT_WRITABLE>|<get-NOT_WRITABLE>(){}[0]
        final const val REMOTE_ERROR // kotbase/CBLError.Code.REMOTE_ERROR|{}REMOTE_ERROR[0]
            final fun <get-REMOTE_ERROR>(): kotlin/Int // kotbase/CBLError.Code.REMOTE_ERROR.<get-REMOTE_ERROR>|<get-REMOTE_ERROR>(){}[0]
        final const val TIMEOUT // kotbase/CBLError.Code.TIMEOUT|{}TIMEOUT[0]
            final fun <get-TIMEOUT>(): kotlin/Int // kotbase/CBLError.Code.TIMEOUT.<get-TIMEOUT>|<get-TIMEOUT>(){}[0]
        final const val TLS_CERT_EXPIRED // kotbase/CBLError.Code.TLS_CERT_EXPIRED|{}TLS_CERT_EXPIRED[0]
            final fun <get-TLS_CERT_EXPIRED>(): kotlin/Int // kotbase/CBLError.Code.TLS_CERT_EXPIRED.<get-TLS_CERT_EXPIRED>|<get-TLS_CERT_EXPIRED>(){}[0]
        final const val TLS_CERT_UNKNOWN_ROOT // kotbase/CBLError.Code.TLS_CERT_UNKNOWN_ROOT|{}TLS_CERT_UNKNOWN_ROOT[0]
            final fun <get-TLS_CERT_UNKNOWN_ROOT>(): kotlin/Int // kotbase/CBLError.Code.TLS_CERT_UNKNOWN_ROOT.<get-TLS_CERT_UNKNOWN_ROOT>|<get-TLS_CERT_UNKNOWN_ROOT>(){}[0]
        final const val TLS_CERT_UNTRUSTED // kotbase/CBLError.Code.TLS_CERT_UNTRUSTED|{}TLS_CERT_UNTRUSTED[0]
            final fun <get-TLS_CERT_UNTRUSTED>(): kotlin/Int // kotbase/CBLError.Code.TLS_CERT_UNTRUSTED.<get-TLS_CERT_UNTRUSTED>|<get-TLS_CERT_UNTRUSTED>(){}[0]
        final const val TLS_CLIENT_CERT_REJECTED // kotbase/CBLError.Code.TLS_CLIENT_CERT_REJECTED|{}TLS_CLIENT_CERT_REJECTED[0]
            final fun <get-TLS_CLIENT_CERT_REJECTED>(): kotlin/Int // kotbase/CBLError.Code.TLS_CLIENT_CERT_REJECTED.<get-TLS_CLIENT_CERT_REJECTED>|<get-TLS_CLIENT_CERT_REJECTED>(){}[0]
        final const val TLS_CLIENT_CERT_REQUIRED // kotbase/CBLError.Code.TLS_CLIENT_CERT_REQUIRED|{}TLS_CLIENT_CERT_REQUIRED[0]
            final fun <get-TLS_CLIENT_CERT_REQUIRED>(): kotlin/Int // kotbase/CBLError.Code.TLS_CLIENT_CERT_REQUIRED.<get-TLS_CLIENT_CERT_REQUIRED>|<get-TLS_CLIENT_CERT_REQUIRED>(){}[0]
        final const val TLS_HANDSHAKE_FAILED // kotbase/CBLError.Code.TLS_HANDSHAKE_FAILED|{}TLS_HANDSHAKE_FAILED[0]
            final fun <get-TLS_HANDSHAKE_FAILED>(): kotlin/Int // kotbase/CBLError.Code.TLS_HANDSHAKE_FAILED.<get-TLS_HANDSHAKE_FAILED>|<get-TLS_HANDSHAKE_FAILED>(){}[0]
        final const val TOO_MANY_REDIRECTS // kotbase/CBLError.Code.TOO_MANY_REDIRECTS|{}TOO_MANY_REDIRECTS[0]
            final fun <get-TOO_MANY_REDIRECTS>(): kotlin/Int // kotbase/CBLError.Code.TOO_MANY_REDIRECTS.<get-TOO_MANY_REDIRECTS>|<get-TOO_MANY_REDIRECTS>(){}[0]
        final const val TRANSACTION_NOT_CLOSED // kotbase/CBLError.Code.TRANSACTION_NOT_CLOSED|{}TRANSACTION_NOT_CLOSED[0]
            final fun <get-TRANSACTION_NOT_CLOSED>(): kotlin/Int // kotbase/CBLError.Code.TRANSACTION_NOT_CLOSED.<get-TRANSACTION_NOT_CLOSED>|<get-TRANSACTION_NOT_CLOSED>(){}[0]
        final const val UNEXPECTED_ERROR // kotbase/CBLError.Code.UNEXPECTED_ERROR|{}UNEXPECTED_ERROR[0]
            final fun <get-UNEXPECTED_ERROR>(): kotlin/Int // kotbase/CBLError.Code.UNEXPECTED_ERROR.<get-UNEXPECTED_ERROR>|<get-UNEXPECTED_ERROR>(){}[0]
        final const val UNIMPLEMENTED // kotbase/CBLError.Code.UNIMPLEMENTED|{}UNIMPLEMENTED[0]
            final fun <get-UNIMPLEMENTED>(): kotlin/Int // kotbase/CBLError.Code.UNIMPLEMENTED.<get-UNIMPLEMENTED>|<get-UNIMPLEMENTED>(){}[0]
        final const val UNKNOWN_HOST // kotbase/CBLError.Code.UNKNOWN_HOST|{}UNKNOWN_HOST[0]
            final fun <get-UNKNOWN_HOST>(): kotlin/Int // kotbase/CBLError.Code.UNKNOWN_HOST.<get-UNKNOWN_HOST>|<get-UNKNOWN_HOST>(){}[0]
        final const val UNSUPPORTED // kotbase/CBLError.Code.UNSUPPORTED|{}UNSUPPORTED[0]
            final fun <get-UNSUPPORTED>(): kotlin/Int // kotbase/CBLError.Code.UNSUPPORTED.<get-UNSUPPORTED>|<get-UNSUPPORTED>(){}[0]
        final const val UNSUPPORTED_ENCRYPTION // kotbase/CBLError.Code.UNSUPPORTED_ENCRYPTION|{}UNSUPPORTED_ENCRYPTION[0]
            final fun <get-UNSUPPORTED_ENCRYPTION>(): kotlin/Int // kotbase/CBLError.Code.UNSUPPORTED_ENCRYPTION.<get-UNSUPPORTED_ENCRYPTION>|<get-UNSUPPORTED_ENCRYPTION>(){}[0]
        final const val WEB_SOCKET_ABNORMAL_CLOSE // kotbase/CBLError.Code.WEB_SOCKET_ABNORMAL_CLOSE|{}WEB_SOCKET_ABNORMAL_CLOSE[0]
            final fun <get-WEB_SOCKET_ABNORMAL_CLOSE>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_ABNORMAL_CLOSE.<get-WEB_SOCKET_ABNORMAL_CLOSE>|<get-WEB_SOCKET_ABNORMAL_CLOSE>(){}[0]
        final const val WEB_SOCKET_BAD_MESSAGE_FORMAT // kotbase/CBLError.Code.WEB_SOCKET_BAD_MESSAGE_FORMAT|{}WEB_SOCKET_BAD_MESSAGE_FORMAT[0]
            final fun <get-WEB_SOCKET_BAD_MESSAGE_FORMAT>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_BAD_MESSAGE_FORMAT.<get-WEB_SOCKET_BAD_MESSAGE_FORMAT>|<get-WEB_SOCKET_BAD_MESSAGE_FORMAT>(){}[0]
        final const val WEB_SOCKET_CANT_FULFILL // kotbase/CBLError.Code.WEB_SOCKET_CANT_FULFILL|{}WEB_SOCKET_CANT_FULFILL[0]
            final fun <get-WEB_SOCKET_CANT_FULFILL>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_CANT_FULFILL.<get-WEB_SOCKET_CANT_FULFILL>|<get-WEB_SOCKET_CANT_FULFILL>(){}[0]
        final const val WEB_SOCKET_CLOSE_USER_PERMANENT // kotbase/CBLError.Code.WEB_SOCKET_CLOSE_USER_PERMANENT|{}WEB_SOCKET_CLOSE_USER_PERMANENT[0]
            final fun <get-WEB_SOCKET_CLOSE_USER_PERMANENT>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_CLOSE_USER_PERMANENT.<get-WEB_SOCKET_CLOSE_USER_PERMANENT>|<get-WEB_SOCKET_CLOSE_USER_PERMANENT>(){}[0]
        final const val WEB_SOCKET_CLOSE_USER_TRANSIENT // kotbase/CBLError.Code.WEB_SOCKET_CLOSE_USER_TRANSIENT|{}WEB_SOCKET_CLOSE_USER_TRANSIENT[0]
            final fun <get-WEB_SOCKET_CLOSE_USER_TRANSIENT>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_CLOSE_USER_TRANSIENT.<get-WEB_SOCKET_CLOSE_USER_TRANSIENT>|<get-WEB_SOCKET_CLOSE_USER_TRANSIENT>(){}[0]
        final const val WEB_SOCKET_DATA_ERROR // kotbase/CBLError.Code.WEB_SOCKET_DATA_ERROR|{}WEB_SOCKET_DATA_ERROR[0]
            final fun <get-WEB_SOCKET_DATA_ERROR>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_DATA_ERROR.<get-WEB_SOCKET_DATA_ERROR>|<get-WEB_SOCKET_DATA_ERROR>(){}[0]
        final const val WEB_SOCKET_GOING_AWAY // kotbase/CBLError.Code.WEB_SOCKET_GOING_AWAY|{}WEB_SOCKET_GOING_AWAY[0]
            final fun <get-WEB_SOCKET_GOING_AWAY>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_GOING_AWAY.<get-WEB_SOCKET_GOING_AWAY>|<get-WEB_SOCKET_GOING_AWAY>(){}[0]
        final const val WEB_SOCKET_MESSAGE_TOO_BIG // kotbase/CBLError.Code.WEB_SOCKET_MESSAGE_TOO_BIG|{}WEB_SOCKET_MESSAGE_TOO_BIG[0]
            final fun <get-WEB_SOCKET_MESSAGE_TOO_BIG>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_MESSAGE_TOO_BIG.<get-WEB_SOCKET_MESSAGE_TOO_BIG>|<get-WEB_SOCKET_MESSAGE_TOO_BIG>(){}[0]
        final const val WEB_SOCKET_MISSING_EXTENSION // kotbase/CBLError.Code.WEB_SOCKET_MISSING_EXTENSION|{}WEB_SOCKET_MISSING_EXTENSION[0]
            final fun <get-WEB_SOCKET_MISSING_EXTENSION>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_MISSING_EXTENSION.<get-WEB_SOCKET_MISSING_EXTENSION>|<get-WEB_SOCKET_MISSING_EXTENSION>(){}[0]
        final const val WEB_SOCKET_NORMAL_CLOSE // kotbase/CBLError.Code.WEB_SOCKET_NORMAL_CLOSE|{}WEB_SOCKET_NORMAL_CLOSE[0]
            final fun <get-WEB_SOCKET_NORMAL_CLOSE>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_NORMAL_CLOSE.<get-WEB_SOCKET_NORMAL_CLOSE>|<get-WEB_SOCKET_NORMAL_CLOSE>(){}[0]
        final const val WEB_SOCKET_POLICY_ERROR // kotbase/CBLError.Code.WEB_SOCKET_POLICY_ERROR|{}WEB_SOCKET_POLICY_ERROR[0]
            final fun <get-WEB_SOCKET_POLICY_ERROR>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_POLICY_ERROR.<get-WEB_SOCKET_POLICY_ERROR>|<get-WEB_SOCKET_POLICY_ERROR>(){}[0]
        final const val WEB_SOCKET_PROTOCOL_ERROR // kotbase/CBLError.Code.WEB_SOCKET_PROTOCOL_ERROR|{}WEB_SOCKET_PROTOCOL_ERROR[0]
            final fun <get-WEB_SOCKET_PROTOCOL_ERROR>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_PROTOCOL_ERROR.<get-WEB_SOCKET_PROTOCOL_ERROR>|<get-WEB_SOCKET_PROTOCOL_ERROR>(){}[0]
        final const val WEB_SOCKET_TLS_FAILURE // kotbase/CBLError.Code.WEB_SOCKET_TLS_FAILURE|{}WEB_SOCKET_TLS_FAILURE[0]
            final fun <get-WEB_SOCKET_TLS_FAILURE>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_TLS_FAILURE.<get-WEB_SOCKET_TLS_FAILURE>|<get-WEB_SOCKET_TLS_FAILURE>(){}[0]
        final const val WEB_SOCKET_USER // kotbase/CBLError.Code.WEB_SOCKET_USER|{}WEB_SOCKET_USER[0]
            final fun <get-WEB_SOCKET_USER>(): kotlin/Int // kotbase/CBLError.Code.WEB_SOCKET_USER.<get-WEB_SOCKET_USER>|<get-WEB_SOCKET_USER>(){}[0]
        final const val WRONG_FORMAT // kotbase/CBLError.Code.WRONG_FORMAT|{}WRONG_FORMAT[0]
            final fun <get-WRONG_FORMAT>(): kotlin/Int // kotbase/CBLError.Code.WRONG_FORMAT.<get-WRONG_FORMAT>|<get-WRONG_FORMAT>(){}[0]
    }

    final object Domain { // kotbase/CBLError.Domain|null[0]
        final const val CBLITE // kotbase/CBLError.Domain.CBLITE|{}CBLITE[0]
            final fun <get-CBLITE>(): kotlin/String // kotbase/CBLError.Domain.CBLITE.<get-CBLITE>|<get-CBLITE>(){}[0]
        final const val FLEECE // kotbase/CBLError.Domain.FLEECE|{}FLEECE[0]
            final fun <get-FLEECE>(): kotlin/String // kotbase/CBLError.Domain.FLEECE.<get-FLEECE>|<get-FLEECE>(){}[0]
        final const val POSIX // kotbase/CBLError.Domain.POSIX|{}POSIX[0]
            final fun <get-POSIX>(): kotlin/String // kotbase/CBLError.Domain.POSIX.<get-POSIX>|<get-POSIX>(){}[0]
        final const val SQLITE // kotbase/CBLError.Domain.SQLITE|{}SQLITE[0]
            final fun <get-SQLITE>(): kotlin/String // kotbase/CBLError.Domain.SQLITE.<get-SQLITE>|<get-SQLITE>(){}[0]
    }
}

final object kotbase/Defaults { // kotbase/Defaults|null[0]
    final object Database { // kotbase/Defaults.Database|null[0]
        final const val FULL_SYNC // kotbase/Defaults.Database.FULL_SYNC|{}FULL_SYNC[0]
            final fun <get-FULL_SYNC>(): kotlin/Boolean // kotbase/Defaults.Database.FULL_SYNC.<get-FULL_SYNC>|<get-FULL_SYNC>(){}[0]
        final const val MMAP_ENABLED // kotbase/Defaults.Database.MMAP_ENABLED|{}MMAP_ENABLED[0]
            final fun <get-MMAP_ENABLED>(): kotlin/Boolean // kotbase/Defaults.Database.MMAP_ENABLED.<get-MMAP_ENABLED>|<get-MMAP_ENABLED>(){}[0]
    }

    final object FileLogSink { // kotbase/Defaults.FileLogSink|null[0]
        final const val MAX_KEPT_FILES // kotbase/Defaults.FileLogSink.MAX_KEPT_FILES|{}MAX_KEPT_FILES[0]
            final fun <get-MAX_KEPT_FILES>(): kotlin/Int // kotbase/Defaults.FileLogSink.MAX_KEPT_FILES.<get-MAX_KEPT_FILES>|<get-MAX_KEPT_FILES>(){}[0]
        final const val MAX_SIZE // kotbase/Defaults.FileLogSink.MAX_SIZE|{}MAX_SIZE[0]
            final fun <get-MAX_SIZE>(): kotlin/Long // kotbase/Defaults.FileLogSink.MAX_SIZE.<get-MAX_SIZE>|<get-MAX_SIZE>(){}[0]
        final const val USE_PLAINTEXT // kotbase/Defaults.FileLogSink.USE_PLAINTEXT|{}USE_PLAINTEXT[0]
            final fun <get-USE_PLAINTEXT>(): kotlin/Boolean // kotbase/Defaults.FileLogSink.USE_PLAINTEXT.<get-USE_PLAINTEXT>|<get-USE_PLAINTEXT>(){}[0]
    }

    final object FullTextIndex { // kotbase/Defaults.FullTextIndex|null[0]
        final const val IGNORE_ACCENTS // kotbase/Defaults.FullTextIndex.IGNORE_ACCENTS|{}IGNORE_ACCENTS[0]
            final fun <get-IGNORE_ACCENTS>(): kotlin/Boolean // kotbase/Defaults.FullTextIndex.IGNORE_ACCENTS.<get-IGNORE_ACCENTS>|<get-IGNORE_ACCENTS>(){}[0]
    }

    final object LogFile { // kotbase/Defaults.LogFile|null[0]
        final const val MAX_ROTATE_COUNT // kotbase/Defaults.LogFile.MAX_ROTATE_COUNT|{}MAX_ROTATE_COUNT[0]
            final fun <get-MAX_ROTATE_COUNT>(): kotlin/Int // kotbase/Defaults.LogFile.MAX_ROTATE_COUNT.<get-MAX_ROTATE_COUNT>|<get-MAX_ROTATE_COUNT>(){}[0]
        final const val MAX_SIZE // kotbase/Defaults.LogFile.MAX_SIZE|{}MAX_SIZE[0]
            final fun <get-MAX_SIZE>(): kotlin/Long // kotbase/Defaults.LogFile.MAX_SIZE.<get-MAX_SIZE>|<get-MAX_SIZE>(){}[0]
        final const val USE_PLAINTEXT // kotbase/Defaults.LogFile.USE_PLAINTEXT|{}USE_PLAINTEXT[0]
            final fun <get-USE_PLAINTEXT>(): kotlin/Boolean // kotbase/Defaults.LogFile.USE_PLAINTEXT.<get-USE_PLAINTEXT>|<get-USE_PLAINTEXT>(){}[0]
        final const val USE_PLAIN_TEXT // kotbase/Defaults.LogFile.USE_PLAIN_TEXT|{}USE_PLAIN_TEXT[0]
            final fun <get-USE_PLAIN_TEXT>(): kotlin/Boolean // kotbase/Defaults.LogFile.USE_PLAIN_TEXT.<get-USE_PLAIN_TEXT>|<get-USE_PLAIN_TEXT>(){}[0]
    }

    final object Replicator { // kotbase/Defaults.Replicator|null[0]
        final const val ACCEPT_PARENT_COOKIES // kotbase/Defaults.Replicator.ACCEPT_PARENT_COOKIES|{}ACCEPT_PARENT_COOKIES[0]
            final fun <get-ACCEPT_PARENT_COOKIES>(): kotlin/Boolean // kotbase/Defaults.Replicator.ACCEPT_PARENT_COOKIES.<get-ACCEPT_PARENT_COOKIES>|<get-ACCEPT_PARENT_COOKIES>(){}[0]
        final const val ALLOW_REPLICATING_IN_BACKGROUND // kotbase/Defaults.Replicator.ALLOW_REPLICATING_IN_BACKGROUND|{}ALLOW_REPLICATING_IN_BACKGROUND[0]
            final fun <get-ALLOW_REPLICATING_IN_BACKGROUND>(): kotlin/Boolean // kotbase/Defaults.Replicator.ALLOW_REPLICATING_IN_BACKGROUND.<get-ALLOW_REPLICATING_IN_BACKGROUND>|<get-ALLOW_REPLICATING_IN_BACKGROUND>(){}[0]
        final const val CONTINUOUS // kotbase/Defaults.Replicator.CONTINUOUS|{}CONTINUOUS[0]
            final fun <get-CONTINUOUS>(): kotlin/Boolean // kotbase/Defaults.Replicator.CONTINUOUS.<get-CONTINUOUS>|<get-CONTINUOUS>(){}[0]
        final const val ENABLE_AUTO_PURGE // kotbase/Defaults.Replicator.ENABLE_AUTO_PURGE|{}ENABLE_AUTO_PURGE[0]
            final fun <get-ENABLE_AUTO_PURGE>(): kotlin/Boolean // kotbase/Defaults.Replicator.ENABLE_AUTO_PURGE.<get-ENABLE_AUTO_PURGE>|<get-ENABLE_AUTO_PURGE>(){}[0]
        final const val HEARTBEAT // kotbase/Defaults.Replicator.HEARTBEAT|{}HEARTBEAT[0]
            final fun <get-HEARTBEAT>(): kotlin/Int // kotbase/Defaults.Replicator.HEARTBEAT.<get-HEARTBEAT>|<get-HEARTBEAT>(){}[0]
        final const val MAX_ATTEMPTS_CONTINUOUS // kotbase/Defaults.Replicator.MAX_ATTEMPTS_CONTINUOUS|{}MAX_ATTEMPTS_CONTINUOUS[0]
            final fun <get-MAX_ATTEMPTS_CONTINUOUS>(): kotlin/Int // kotbase/Defaults.Replicator.MAX_ATTEMPTS_CONTINUOUS.<get-MAX_ATTEMPTS_CONTINUOUS>|<get-MAX_ATTEMPTS_CONTINUOUS>(){}[0]
        final const val MAX_ATTEMPTS_SINGLE_SHOT // kotbase/Defaults.Replicator.MAX_ATTEMPTS_SINGLE_SHOT|{}MAX_ATTEMPTS_SINGLE_SHOT[0]
            final fun <get-MAX_ATTEMPTS_SINGLE_SHOT>(): kotlin/Int // kotbase/Defaults.Replicator.MAX_ATTEMPTS_SINGLE_SHOT.<get-MAX_ATTEMPTS_SINGLE_SHOT>|<get-MAX_ATTEMPTS_SINGLE_SHOT>(){}[0]
        final const val MAX_ATTEMPTS_WAIT_TIME // kotbase/Defaults.Replicator.MAX_ATTEMPTS_WAIT_TIME|{}MAX_ATTEMPTS_WAIT_TIME[0]
            final fun <get-MAX_ATTEMPTS_WAIT_TIME>(): kotlin/Int // kotbase/Defaults.Replicator.MAX_ATTEMPTS_WAIT_TIME.<get-MAX_ATTEMPTS_WAIT_TIME>|<get-MAX_ATTEMPTS_WAIT_TIME>(){}[0]
        final const val MAX_ATTEMPT_WAIT_TIME // kotbase/Defaults.Replicator.MAX_ATTEMPT_WAIT_TIME|{}MAX_ATTEMPT_WAIT_TIME[0]
            final fun <get-MAX_ATTEMPT_WAIT_TIME>(): kotlin/Int // kotbase/Defaults.Replicator.MAX_ATTEMPT_WAIT_TIME.<get-MAX_ATTEMPT_WAIT_TIME>|<get-MAX_ATTEMPT_WAIT_TIME>(){}[0]
        final const val SELF_SIGNED_CERTIFICATE_ONLY // kotbase/Defaults.Replicator.SELF_SIGNED_CERTIFICATE_ONLY|{}SELF_SIGNED_CERTIFICATE_ONLY[0]
            final fun <get-SELF_SIGNED_CERTIFICATE_ONLY>(): kotlin/Boolean // kotbase/Defaults.Replicator.SELF_SIGNED_CERTIFICATE_ONLY.<get-SELF_SIGNED_CERTIFICATE_ONLY>|<get-SELF_SIGNED_CERTIFICATE_ONLY>(){}[0]

        final val TYPE // kotbase/Defaults.Replicator.TYPE|{}TYPE[0]
            final fun <get-TYPE>(): kotbase/ReplicatorType // kotbase/Defaults.Replicator.TYPE.<get-TYPE>|<get-TYPE>(){}[0]
    }
}

final object kotbase/FullTextFunction { // kotbase/FullTextFunction|null[0]
    final fun match(kotbase/IndexExpression, kotlin/String): kotbase/Expression // kotbase/FullTextFunction.match|match(kotbase.IndexExpression;kotlin.String){}[0]
    final fun match(kotlin/String, kotlin/String): kotbase/Expression // kotbase/FullTextFunction.match|match(kotlin.String;kotlin.String){}[0]
    final fun rank(kotbase/IndexExpression): kotbase/Expression // kotbase/FullTextFunction.rank|rank(kotbase.IndexExpression){}[0]
    final fun rank(kotlin/String): kotbase/Expression // kotbase/FullTextFunction.rank|rank(kotlin.String){}[0]
}

final object kotbase/Function { // kotbase/Function|null[0]
    final fun abs(kotbase/Expression): kotbase/Expression // kotbase/Function.abs|abs(kotbase.Expression){}[0]
    final fun acos(kotbase/Expression): kotbase/Expression // kotbase/Function.acos|acos(kotbase.Expression){}[0]
    final fun asin(kotbase/Expression): kotbase/Expression // kotbase/Function.asin|asin(kotbase.Expression){}[0]
    final fun atan(kotbase/Expression): kotbase/Expression // kotbase/Function.atan|atan(kotbase.Expression){}[0]
    final fun atan2(kotbase/Expression, kotbase/Expression): kotbase/Expression // kotbase/Function.atan2|atan2(kotbase.Expression;kotbase.Expression){}[0]
    final fun avg(kotbase/Expression): kotbase/Expression // kotbase/Function.avg|avg(kotbase.Expression){}[0]
    final fun ceil(kotbase/Expression): kotbase/Expression // kotbase/Function.ceil|ceil(kotbase.Expression){}[0]
    final fun contains(kotbase/Expression, kotbase/Expression): kotbase/Expression // kotbase/Function.contains|contains(kotbase.Expression;kotbase.Expression){}[0]
    final fun cos(kotbase/Expression): kotbase/Expression // kotbase/Function.cos|cos(kotbase.Expression){}[0]
    final fun count(kotbase/Expression?): kotbase/Expression // kotbase/Function.count|count(kotbase.Expression?){}[0]
    final fun degrees(kotbase/Expression): kotbase/Expression // kotbase/Function.degrees|degrees(kotbase.Expression){}[0]
    final fun e(): kotbase/Expression // kotbase/Function.e|e(){}[0]
    final fun exp(kotbase/Expression): kotbase/Expression // kotbase/Function.exp|exp(kotbase.Expression){}[0]
    final fun floor(kotbase/Expression): kotbase/Expression // kotbase/Function.floor|floor(kotbase.Expression){}[0]
    final fun length(kotbase/Expression): kotbase/Expression // kotbase/Function.length|length(kotbase.Expression){}[0]
    final fun ln(kotbase/Expression): kotbase/Expression // kotbase/Function.ln|ln(kotbase.Expression){}[0]
    final fun log(kotbase/Expression): kotbase/Expression // kotbase/Function.log|log(kotbase.Expression){}[0]
    final fun lower(kotbase/Expression): kotbase/Expression // kotbase/Function.lower|lower(kotbase.Expression){}[0]
    final fun ltrim(kotbase/Expression): kotbase/Expression // kotbase/Function.ltrim|ltrim(kotbase.Expression){}[0]
    final fun max(kotbase/Expression): kotbase/Expression // kotbase/Function.max|max(kotbase.Expression){}[0]
    final fun millisToString(kotbase/Expression): kotbase/Expression // kotbase/Function.millisToString|millisToString(kotbase.Expression){}[0]
    final fun millisToUTC(kotbase/Expression): kotbase/Expression // kotbase/Function.millisToUTC|millisToUTC(kotbase.Expression){}[0]
    final fun min(kotbase/Expression): kotbase/Expression // kotbase/Function.min|min(kotbase.Expression){}[0]
    final fun pi(): kotbase/Expression // kotbase/Function.pi|pi(){}[0]
    final fun power(kotbase/Expression, kotbase/Expression): kotbase/Expression // kotbase/Function.power|power(kotbase.Expression;kotbase.Expression){}[0]
    final fun radians(kotbase/Expression): kotbase/Expression // kotbase/Function.radians|radians(kotbase.Expression){}[0]
    final fun round(kotbase/Expression): kotbase/Expression // kotbase/Function.round|round(kotbase.Expression){}[0]
    final fun round(kotbase/Expression, kotbase/Expression): kotbase/Expression // kotbase/Function.round|round(kotbase.Expression;kotbase.Expression){}[0]
    final fun rtrim(kotbase/Expression): kotbase/Expression // kotbase/Function.rtrim|rtrim(kotbase.Expression){}[0]
    final fun sign(kotbase/Expression): kotbase/Expression // kotbase/Function.sign|sign(kotbase.Expression){}[0]
    final fun sin(kotbase/Expression): kotbase/Expression // kotbase/Function.sin|sin(kotbase.Expression){}[0]
    final fun sqrt(kotbase/Expression): kotbase/Expression // kotbase/Function.sqrt|sqrt(kotbase.Expression){}[0]
    final fun stringToMillis(kotbase/Expression): kotbase/Expression // kotbase/Function.stringToMillis|stringToMillis(kotbase.Expression){}[0]
    final fun stringToUTC(kotbase/Expression): kotbase/Expression // kotbase/Function.stringToUTC|stringToUTC(kotbase.Expression){}[0]
    final fun sum(kotbase/Expression): kotbase/Expression // kotbase/Function.sum|sum(kotbase.Expression){}[0]
    final fun tan(kotbase/Expression): kotbase/Expression // kotbase/Function.tan|tan(kotbase.Expression){}[0]
    final fun trim(kotbase/Expression): kotbase/Expression // kotbase/Function.trim|trim(kotbase.Expression){}[0]
    final fun trunc(kotbase/Expression): kotbase/Expression // kotbase/Function.trunc|trunc(kotbase.Expression){}[0]
    final fun trunc(kotbase/Expression, kotbase/Expression): kotbase/Expression // kotbase/Function.trunc|trunc(kotbase.Expression;kotbase.Expression){}[0]
    final fun upper(kotbase/Expression): kotbase/Expression // kotbase/Function.upper|upper(kotbase.Expression){}[0]
}

final object kotbase/IndexBuilder { // kotbase/IndexBuilder|null[0]
    final fun fullTextIndex(kotlin/Array<out kotbase/FullTextIndexItem>...): kotbase/FullTextIndex // kotbase/IndexBuilder.fullTextIndex|fullTextIndex(kotlin.Array<out|kotbase.FullTextIndexItem>...){}[0]
    final fun valueIndex(kotlin/Array<out kotbase/ValueIndexItem>...): kotbase/ValueIndex // kotbase/IndexBuilder.valueIndex|valueIndex(kotlin.Array<out|kotbase.ValueIndexItem>...){}[0]
}

final object kotbase/Meta { // kotbase/Meta|null[0]
    final val deleted // kotbase/Meta.deleted|{}deleted[0]
        final fun <get-deleted>(): kotbase/MetaExpression // kotbase/Meta.deleted.<get-deleted>|<get-deleted>(){}[0]
    final val expiration // kotbase/Meta.expiration|{}expiration[0]
        final fun <get-expiration>(): kotbase/MetaExpression // kotbase/Meta.expiration.<get-expiration>|<get-expiration>(){}[0]
    final val id // kotbase/Meta.id|{}id[0]
        final fun <get-id>(): kotbase/MetaExpression // kotbase/Meta.id.<get-id>|<get-id>(){}[0]
    final val revisionID // kotbase/Meta.revisionID|{}revisionID[0]
        final fun <get-revisionID>(): kotbase/MetaExpression // kotbase/Meta.revisionID.<get-revisionID>|<get-revisionID>(){}[0]
    final val sequence // kotbase/Meta.sequence|{}sequence[0]
        final fun <get-sequence>(): kotbase/MetaExpression // kotbase/Meta.sequence.<get-sequence>|<get-sequence>(){}[0]
}

final object kotbase/QueryBuilder { // kotbase/QueryBuilder|null[0]
    final fun createQuery(kotlin/String, kotbase/Database): kotbase/Query // kotbase/QueryBuilder.createQuery|createQuery(kotlin.String;kotbase.Database){}[0]
    final fun select(kotlin/Array<out kotbase/SelectResult>...): kotbase/Select // kotbase/QueryBuilder.select|select(kotlin.Array<out|kotbase.SelectResult>...){}[0]
    final fun selectDistinct(kotlin/Array<out kotbase/SelectResult>...): kotbase/Select // kotbase/QueryBuilder.selectDistinct|selectDistinct(kotlin.Array<out|kotbase.SelectResult>...){}[0]
}

final val kotbase/CollectionConfigurationFactory // kotbase/CollectionConfigurationFactory|{}CollectionConfigurationFactory[0]
    final fun <get-CollectionConfigurationFactory>(): kotbase/CollectionConfiguration? // kotbase/CollectionConfigurationFactory.<get-CollectionConfigurationFactory>|<get-CollectionConfigurationFactory>(){}[0]
final val kotbase/DEFAULT_CONFLICT_RESOLVER // kotbase/DEFAULT_CONFLICT_RESOLVER|@kotbase.ReplicatorConfiguration.Companion{}DEFAULT_CONFLICT_RESOLVER[0]
    final fun (kotbase/ReplicatorConfiguration.Companion).<get-DEFAULT_CONFLICT_RESOLVER>(): kotlin/Function1<kotbase/Conflict, kotbase/Document?> // kotbase/DEFAULT_CONFLICT_RESOLVER.<get-DEFAULT_CONFLICT_RESOLVER>|<get-DEFAULT_CONFLICT_RESOLVER>@kotbase.ReplicatorConfiguration.Companion(){}[0]
final val kotbase/DEFAULT_NAME // kotbase/DEFAULT_NAME|@kotbase.Collection.Companion{}DEFAULT_NAME[0]
    final fun (kotbase/Collection.Companion).<get-DEFAULT_NAME>(): kotlin/String // kotbase/DEFAULT_NAME.<get-DEFAULT_NAME>|<get-DEFAULT_NAME>@kotbase.Collection.Companion(){}[0]
final val kotbase/DEFAULT_NAME // kotbase/DEFAULT_NAME|@kotbase.Scope.Companion{}DEFAULT_NAME[0]
    final fun (kotbase/Scope.Companion).<get-DEFAULT_NAME>(): kotlin/String // kotbase/DEFAULT_NAME.<get-DEFAULT_NAME>|<get-DEFAULT_NAME>@kotbase.Scope.Companion(){}[0]
final val kotbase/DISABLE_HEARTBEAT // kotbase/DISABLE_HEARTBEAT|@kotbase.ReplicatorConfiguration.Companion{}DISABLE_HEARTBEAT[0]
    final fun (kotbase/ReplicatorConfiguration.Companion).<get-DISABLE_HEARTBEAT>(): kotlin/Int // kotbase/DISABLE_HEARTBEAT.<get-DISABLE_HEARTBEAT>|<get-DISABLE_HEARTBEAT>@kotbase.ReplicatorConfiguration.Companion(){}[0]
final val kotbase/DatabaseConfigurationFactory // kotbase/DatabaseConfigurationFactory|{}DatabaseConfigurationFactory[0]
    final fun <get-DatabaseConfigurationFactory>(): kotbase/DatabaseConfiguration? // kotbase/DatabaseConfigurationFactory.<get-DatabaseConfigurationFactory>|<get-DatabaseConfigurationFactory>(){}[0]
final val kotbase/FullTextIndexConfigurationFactory // kotbase/FullTextIndexConfigurationFactory|{}FullTextIndexConfigurationFactory[0]
    final fun <get-FullTextIndexConfigurationFactory>(): kotbase/FullTextIndexConfiguration? // kotbase/FullTextIndexConfigurationFactory.<get-FullTextIndexConfigurationFactory>|<get-FullTextIndexConfigurationFactory>(){}[0]
final val kotbase/LogFileConfigurationFactory // kotbase/LogFileConfigurationFactory|{}LogFileConfigurationFactory[0]
    final fun <get-LogFileConfigurationFactory>(): kotbase/LogFileConfiguration? // kotbase/LogFileConfigurationFactory.<get-LogFileConfigurationFactory>|<get-LogFileConfigurationFactory>(){}[0]
final val kotbase/ReplicatorConfigurationFactory // kotbase/ReplicatorConfigurationFactory|{}ReplicatorConfigurationFactory[0]
    final fun <get-ReplicatorConfigurationFactory>(): kotbase/ReplicatorConfiguration? // kotbase/ReplicatorConfigurationFactory.<get-ReplicatorConfigurationFactory>|<get-ReplicatorConfigurationFactory>(){}[0]
final val kotbase/ValueIndexConfigurationFactory // kotbase/ValueIndexConfigurationFactory|{}ValueIndexConfigurationFactory[0]
    final fun <get-ValueIndexConfigurationFactory>(): kotbase/ValueIndexConfiguration? // kotbase/ValueIndexConfigurationFactory.<get-ValueIndexConfigurationFactory>|<get-ValueIndexConfigurationFactory>(){}[0]
final val kotbase/code // kotbase/code|@kotbase.CouchbaseLiteException{}code[0]
    final fun (kotbase/CouchbaseLiteException).<get-code>(): kotlin/Int // kotbase/code.<get-code>|<get-code>@kotbase.CouchbaseLiteException(){}[0]
final val kotbase/domain // kotbase/domain|@kotbase.CouchbaseLiteException{}domain[0]
    final fun (kotbase/CouchbaseLiteException).<get-domain>(): kotlin/String // kotbase/domain.<get-domain>|<get-domain>@kotbase.CouchbaseLiteException(){}[0]
final val kotbase/info // kotbase/info|@kotbase.CouchbaseLiteException{}info[0]
    final fun (kotbase/CouchbaseLiteException).<get-info>(): kotlin.collections/Map<kotlin/String, kotlin/Any?>? // kotbase/info.<get-info>|<get-info>@kotbase.CouchbaseLiteException(){}[0]

final var kotbase/allowReplicatingInBackground // kotbase/allowReplicatingInBackground|@kotbase.ReplicatorConfiguration{}allowReplicatingInBackground[0]
    final fun (kotbase/ReplicatorConfiguration).<get-allowReplicatingInBackground>(): kotlin/Boolean // kotbase/allowReplicatingInBackground.<get-allowReplicatingInBackground>|<get-allowReplicatingInBackground>@kotbase.ReplicatorConfiguration(){}[0]
    final fun (kotbase/ReplicatorConfiguration).<set-allowReplicatingInBackground>(kotlin/Boolean) // kotbase/allowReplicatingInBackground.<set-allowReplicatingInBackground>|<set-allowReplicatingInBackground>@kotbase.ReplicatorConfiguration(kotlin.Boolean){}[0]

final fun (kotbase/ArrayInterface).kotbase/get(kotlin/Int): kotbase/Fragment // kotbase/get|get@kotbase.ArrayInterface(kotlin.Int){}[0]
final fun (kotbase/Collection).kotbase/collectionChangeFlow(kotlin.coroutines/CoroutineContext? = ...): kotlinx.coroutines.flow/Flow<kotbase/CollectionChange> // kotbase/collectionChangeFlow|collectionChangeFlow@kotbase.Collection(kotlin.coroutines.CoroutineContext?){}[0]
final fun (kotbase/Collection).kotbase/documentChangeFlow(kotlin/String, kotlin.coroutines/CoroutineContext? = ...): kotlinx.coroutines.flow/Flow<kotbase/DocumentChange> // kotbase/documentChangeFlow|documentChangeFlow@kotbase.Collection(kotlin.String;kotlin.coroutines.CoroutineContext?){}[0]
final fun (kotbase/Collection).kotbase/get(kotlin/String): kotbase/DocumentFragment // kotbase/get|get@kotbase.Collection(kotlin.String){}[0]
final fun (kotbase/CollectionConfiguration?).kotbase/newConfig(kotlin.collections/List<kotlin/String>? = ..., kotlin.collections/List<kotlin/String>? = ..., kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? = ..., kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? = ..., kotlin/Function1<kotbase/Conflict, kotbase/Document?>? = ...): kotbase/CollectionConfiguration // kotbase/newConfig|newConfig@kotbase.CollectionConfiguration?(kotlin.collections.List<kotlin.String>?;kotlin.collections.List<kotlin.String>?;kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?;kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?;kotlin.Function1<kotbase.Conflict,kotbase.Document?>?){}[0]
final fun (kotbase/Database).kotbase/databaseChangeFlow(kotlin.coroutines/CoroutineContext? = ...): kotlinx.coroutines.flow/Flow<kotbase/DatabaseChange> // kotbase/databaseChangeFlow|databaseChangeFlow@kotbase.Database(kotlin.coroutines.CoroutineContext?){}[0]
final fun (kotbase/Database).kotbase/documentChangeFlow(kotlin/String, kotlin.coroutines/CoroutineContext? = ...): kotlinx.coroutines.flow/Flow<kotbase/DocumentChange> // kotbase/documentChangeFlow|documentChangeFlow@kotbase.Database(kotlin.String;kotlin.coroutines.CoroutineContext?){}[0]
final fun (kotbase/Database).kotbase/get(kotlin/String): kotbase/DocumentFragment // kotbase/get|get@kotbase.Database(kotlin.String){}[0]
final fun (kotbase/DatabaseConfiguration?).kotbase/newConfig(kotlin/String? = ...): kotbase/DatabaseConfiguration // kotbase/newConfig|newConfig@kotbase.DatabaseConfiguration?(kotlin.String?){}[0]
final fun (kotbase/DatabaseConfiguration?).kotbase/newConfig(kotlin/String? = ..., kotlin/Boolean? = ...): kotbase/DatabaseConfiguration // kotbase/newConfig|newConfig@kotbase.DatabaseConfiguration?(kotlin.String?;kotlin.Boolean?){}[0]
final fun (kotbase/DictionaryInterface).kotbase/get(kotlin/String): kotbase/Fragment // kotbase/get|get@kotbase.DictionaryInterface(kotlin.String){}[0]
final fun (kotbase/FullTextIndexConfiguration?).kotbase/newConfig(kotlin/Array<out kotlin/String>..., kotlin/String? = ..., kotlin/Boolean? = ...): kotbase/FullTextIndexConfiguration // kotbase/newConfig|newConfig@kotbase.FullTextIndexConfiguration?(kotlin.Array<out|kotlin.String>...;kotlin.String?;kotlin.Boolean?){}[0]
final fun (kotbase/LogFileConfiguration?).kotbase/newConfig(kotlin/String? = ..., kotlin/Long? = ..., kotlin/Int? = ..., kotlin/Boolean? = ...): kotbase/LogFileConfiguration // kotbase/newConfig|newConfig@kotbase.LogFileConfiguration?(kotlin.String?;kotlin.Long?;kotlin.Int?;kotlin.Boolean?){}[0]
final fun (kotbase/MutableArray).kotbase/get(kotlin/Int): kotbase/MutableFragment // kotbase/get|get@kotbase.MutableArray(kotlin.Int){}[0]
final fun (kotbase/MutableDictionary).kotbase/get(kotlin/String): kotbase/MutableFragment // kotbase/get|get@kotbase.MutableDictionary(kotlin.String){}[0]
final fun (kotbase/MutableDictionaryInterface).kotbase/get(kotlin/String): kotbase/MutableFragment // kotbase/get|get@kotbase.MutableDictionaryInterface(kotlin.String){}[0]
final fun (kotbase/Query).kotbase/queryChangeFlow(kotlin.coroutines/CoroutineContext? = ...): kotlinx.coroutines.flow/Flow<kotbase/QueryChange> // kotbase/queryChangeFlow|queryChangeFlow@kotbase.Query(kotlin.coroutines.CoroutineContext?){}[0]
final fun (kotbase/Replicator).kotbase/documentReplicationFlow(kotlin.coroutines/CoroutineContext? = ...): kotlinx.coroutines.flow/Flow<kotbase/DocumentReplication> // kotbase/documentReplicationFlow|documentReplicationFlow@kotbase.Replicator(kotlin.coroutines.CoroutineContext?){}[0]
final fun (kotbase/Replicator).kotbase/replicatorChangesFlow(kotlin.coroutines/CoroutineContext? = ...): kotlinx.coroutines.flow/Flow<kotbase/ReplicatorChange> // kotbase/replicatorChangesFlow|replicatorChangesFlow@kotbase.Replicator(kotlin.coroutines.CoroutineContext?){}[0]
final fun (kotbase/ReplicatorConfiguration).kotbase/setAllowReplicatingInBackground(kotlin/Boolean): kotbase/ReplicatorConfiguration // kotbase/setAllowReplicatingInBackground|setAllowReplicatingInBackground@kotbase.ReplicatorConfiguration(kotlin.Boolean){}[0]
final fun (kotbase/ReplicatorConfiguration?).kotbase/newConfig(kotbase/Database? = ..., kotbase/Endpoint? = ..., kotbase/ReplicatorType? = ..., kotlin/Boolean? = ..., kotbase/Authenticator? = ..., kotlin.collections/Map<kotlin/String, kotlin/String>? = ..., kotlin/ByteArray? = ..., kotlin.collections/List<kotlin/String>? = ..., kotlin.collections/List<kotlin/String>? = ..., kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? = ..., kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? = ..., kotlin/Function1<kotbase/Conflict, kotbase/Document?>? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ...): kotbase/ReplicatorConfiguration // kotbase/newConfig|newConfig@kotbase.ReplicatorConfiguration?(kotbase.Database?;kotbase.Endpoint?;kotbase.ReplicatorType?;kotlin.Boolean?;kotbase.Authenticator?;kotlin.collections.Map<kotlin.String,kotlin.String>?;kotlin.ByteArray?;kotlin.collections.List<kotlin.String>?;kotlin.collections.List<kotlin.String>?;kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?;kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?;kotlin.Function1<kotbase.Conflict,kotbase.Document?>?;kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlin.Boolean?;kotlin.Boolean?){}[0]
final fun (kotbase/ReplicatorConfiguration?).kotbase/newConfig(kotbase/Endpoint? = ..., kotlin.collections/Map<out kotlin.collections/Collection<kotbase/Collection>, kotbase/CollectionConfiguration?>? = ..., kotbase/ReplicatorType? = ..., kotlin/Boolean? = ..., kotbase/Authenticator? = ..., kotlin.collections/Map<kotlin/String, kotlin/String>? = ..., kotlin/ByteArray? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Int? = ..., kotlin/Boolean? = ..., kotlin/Boolean? = ...): kotbase/ReplicatorConfiguration // kotbase/newConfig|newConfig@kotbase.ReplicatorConfiguration?(kotbase.Endpoint?;kotlin.collections.Map<out|kotlin.collections.Collection<kotbase.Collection>,kotbase.CollectionConfiguration?>?;kotbase.ReplicatorType?;kotlin.Boolean?;kotbase.Authenticator?;kotlin.collections.Map<kotlin.String,kotlin.String>?;kotlin.ByteArray?;kotlin.Int?;kotlin.Int?;kotlin.Int?;kotlin.Boolean?;kotlin.Boolean?){}[0]
final fun (kotbase/ValueIndexConfiguration?).kotbase/newConfig(kotlin/Array<out kotlin/String>...): kotbase/ValueIndexConfiguration // kotbase/newConfig|newConfig@kotbase.ValueIndexConfiguration?(kotlin.Array<out|kotlin.String>...){}[0]

// Targets: [apple]
abstract class <#A: platform.darwin/NSObject> kotbase.internal/AbstractDelegatedClass { // kotbase.internal/AbstractDelegatedClass|null[0]
    constructor <init>() // kotbase.internal/AbstractDelegatedClass.<init>|<init>(){}[0]

    open fun equals(kotlin/Any?): kotlin/Boolean // kotbase.internal/AbstractDelegatedClass.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotbase.internal/AbstractDelegatedClass.hashCode|hashCode(){}[0]
    open fun toString(): kotlin/String // kotbase.internal/AbstractDelegatedClass.toString|toString(){}[0]
}

// Targets: [apple]
abstract class <#A: platform.darwin/NSObject> kotbase.internal/DelegatedClass : kotbase.internal/AbstractDelegatedClass<#A> // kotbase.internal/DelegatedClass|null[0]

// Targets: [apple]
abstract class <#A: platform.darwin/NSObjectProtocol> kotbase.internal/DelegatedProtocol { // kotbase.internal/DelegatedProtocol|null[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // kotbase.internal/DelegatedProtocol.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotbase.internal/DelegatedProtocol.hashCode|hashCode(){}[0]
    open fun toString(): kotlin/String // kotbase.internal/DelegatedProtocol.toString|toString(){}[0]
}

// Targets: [apple]
final class kotbase.ext/NSErrorException : kotlin/Exception { // kotbase.ext/NSErrorException|null[0]
    constructor <init>(platform.Foundation/NSError) // kotbase.ext/NSErrorException.<init>|<init>(platform.Foundation.NSError){}[0]

    final val nsError // kotbase.ext/NSErrorException.nsError|{}nsError[0]
        final fun <get-nsError>(): platform.Foundation/NSError // kotbase.ext/NSErrorException.nsError.<get-nsError>|<get-nsError>(){}[0]
}

// Targets: [apple]
final class kotbase/Blob : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLBlob> { // kotbase/Blob|null[0]
    constructor <init>(kotlin/String, kotlin/ByteArray) // kotbase/Blob.<init>|<init>(kotlin.String;kotlin.ByteArray){}[0]
    constructor <init>(kotlin/String, kotlin/String) // kotbase/Blob.<init>|<init>(kotlin.String;kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlinx.io/Source) // kotbase/Blob.<init>|<init>(kotlin.String;kotlinx.io.Source){}[0]

    final val content // kotbase/Blob.content|{}content[0]
        final fun <get-content>(): kotlin/ByteArray? // kotbase/Blob.content.<get-content>|<get-content>(){}[0]
    final val contentStream // kotbase/Blob.contentStream|{}contentStream[0]
        final fun <get-contentStream>(): kotlinx.io/Source? // kotbase/Blob.contentStream.<get-contentStream>|<get-contentStream>(){}[0]
    final val contentType // kotbase/Blob.contentType|{}contentType[0]
        final fun <get-contentType>(): kotlin/String // kotbase/Blob.contentType.<get-contentType>|<get-contentType>(){}[0]
    final val digest // kotbase/Blob.digest|{}digest[0]
        final fun <get-digest>(): kotlin/String? // kotbase/Blob.digest.<get-digest>|<get-digest>(){}[0]
    final val length // kotbase/Blob.length|{}length[0]
        final fun <get-length>(): kotlin/Long // kotbase/Blob.length.<get-length>|<get-length>(){}[0]
    final val properties // kotbase/Blob.properties|{}properties[0]
        final fun <get-properties>(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // kotbase/Blob.properties.<get-properties>|<get-properties>(){}[0]

    final fun toJSON(): kotlin/String // kotbase/Blob.toJSON|toJSON(){}[0]

    final object Companion { // kotbase/Blob.Companion|null[0]
        final fun isBlob(kotlin.collections/Map<kotlin/String, kotlin/Any?>?): kotlin/Boolean // kotbase/Blob.Companion.isBlob|isBlob(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
    }
}

// Targets: [apple]
final class kotbase/Collection : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLCollection>, kotlin/AutoCloseable { // kotbase/Collection|null[0]
    final val count // kotbase/Collection.count|{}count[0]
        final fun <get-count>(): kotlin/Long // kotbase/Collection.count.<get-count>|<get-count>(){}[0]
    final val database // kotbase/Collection.database|{}database[0]
        final fun <get-database>(): kotbase/Database // kotbase/Collection.database.<get-database>|<get-database>(){}[0]
    final val fullName // kotbase/Collection.fullName|{}fullName[0]
        final fun <get-fullName>(): kotlin/String // kotbase/Collection.fullName.<get-fullName>|<get-fullName>(){}[0]
    final val indexes // kotbase/Collection.indexes|{}indexes[0]
        final fun <get-indexes>(): kotlin.collections/Set<kotlin/String> // kotbase/Collection.indexes.<get-indexes>|<get-indexes>(){}[0]
    final val name // kotbase/Collection.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotbase/Collection.name.<get-name>|<get-name>(){}[0]
    final val scope // kotbase/Collection.scope|{}scope[0]
        final fun <get-scope>(): kotbase/Scope // kotbase/Collection.scope.<get-scope>|<get-scope>(){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/CollectionChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Collection.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.CollectionChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/CollectionChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Collection.addChangeListener|addChangeListener(kotlin.Function1<kotbase.CollectionChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/CollectionChange, kotlin/Unit>) // kotbase/Collection.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.CollectionChange,kotlin.Unit>){}[0]
    final fun addDocumentChangeListener(kotlin/String, kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/DocumentChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Collection.addDocumentChangeListener|addDocumentChangeListener(kotlin.String;kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.DocumentChange,kotlin.Unit>){}[0]
    final fun addDocumentChangeListener(kotlin/String, kotlin/Function1<kotbase/DocumentChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Collection.addDocumentChangeListener|addDocumentChangeListener(kotlin.String;kotlin.Function1<kotbase.DocumentChange,kotlin.Unit>){}[0]
    final fun addDocumentChangeListener(kotlin/String, kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/DocumentChange, kotlin/Unit>) // kotbase/Collection.addDocumentChangeListener|addDocumentChangeListener(kotlin.String;kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.DocumentChange,kotlin.Unit>){}[0]
    final fun close() // kotbase/Collection.close|close(){}[0]
    final fun createIndex(kotlin/String, kotbase/Index) // kotbase/Collection.createIndex|createIndex(kotlin.String;kotbase.Index){}[0]
    final fun createIndex(kotlin/String, kotbase/IndexConfiguration) // kotbase/Collection.createIndex|createIndex(kotlin.String;kotbase.IndexConfiguration){}[0]
    final fun delete(kotbase/Document) // kotbase/Collection.delete|delete(kotbase.Document){}[0]
    final fun delete(kotbase/Document, kotbase/ConcurrencyControl): kotlin/Boolean // kotbase/Collection.delete|delete(kotbase.Document;kotbase.ConcurrencyControl){}[0]
    final fun deleteIndex(kotlin/String) // kotbase/Collection.deleteIndex|deleteIndex(kotlin.String){}[0]
    final fun getDocument(kotlin/String): kotbase/Document? // kotbase/Collection.getDocument|getDocument(kotlin.String){}[0]
    final fun getDocumentExpiration(kotlin/String): kotlinx.datetime/Instant? // kotbase/Collection.getDocumentExpiration|getDocumentExpiration(kotlin.String){}[0]
    final fun getIndex(kotlin/String): kotbase/QueryIndex? // kotbase/Collection.getIndex|getIndex(kotlin.String){}[0]
    final fun indexes(): kotlin.collections/Set<kotlin/String> // kotbase/Collection.indexes|indexes(){}[0]
    final fun purge(kotbase/Document) // kotbase/Collection.purge|purge(kotbase.Document){}[0]
    final fun purge(kotlin/String) // kotbase/Collection.purge|purge(kotlin.String){}[0]
    final fun save(kotbase/MutableDocument) // kotbase/Collection.save|save(kotbase.MutableDocument){}[0]
    final fun save(kotbase/MutableDocument, kotbase/ConcurrencyControl): kotlin/Boolean // kotbase/Collection.save|save(kotbase.MutableDocument;kotbase.ConcurrencyControl){}[0]
    final fun save(kotbase/MutableDocument, kotlin/Function2<kotbase/MutableDocument, kotbase/Document?, kotlin/Boolean>): kotlin/Boolean // kotbase/Collection.save|save(kotbase.MutableDocument;kotlin.Function2<kotbase.MutableDocument,kotbase.Document?,kotlin.Boolean>){}[0]
    final fun setDocumentExpiration(kotlin/String, kotlinx.datetime/Instant?) // kotbase/Collection.setDocumentExpiration|setDocumentExpiration(kotlin.String;kotlinx.datetime.Instant?){}[0]

    final object Companion // kotbase/Collection.Companion|null[0]
}

// Targets: [apple]
final class kotbase/CollectionChange : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLCollectionChange> { // kotbase/CollectionChange|null[0]
    final val collection // kotbase/CollectionChange.collection|{}collection[0]
        final fun <get-collection>(): kotbase/Collection // kotbase/CollectionChange.collection.<get-collection>|<get-collection>(){}[0]
    final val documentIDs // kotbase/CollectionChange.documentIDs|{}documentIDs[0]
        final fun <get-documentIDs>(): kotlin.collections/List<kotlin/String> // kotbase/CollectionChange.documentIDs.<get-documentIDs>|<get-documentIDs>(){}[0]
}

// Targets: [apple]
final class kotbase/CollectionConfiguration : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLCollectionConfiguration> { // kotbase/CollectionConfiguration|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String>? = ..., kotlin.collections/List<kotlin/String>? = ..., kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? = ..., kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? = ..., kotlin/Function1<kotbase/Conflict, kotbase/Document?>? = ...) // kotbase/CollectionConfiguration.<init>|<init>(kotlin.collections.List<kotlin.String>?;kotlin.collections.List<kotlin.String>?;kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?;kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?;kotlin.Function1<kotbase.Conflict,kotbase.Document?>?){}[0]

    final var channels // kotbase/CollectionConfiguration.channels|{}channels[0]
        final fun <get-channels>(): kotlin.collections/List<kotlin/String>? // kotbase/CollectionConfiguration.channels.<get-channels>|<get-channels>(){}[0]
        final fun <set-channels>(kotlin.collections/List<kotlin/String>?) // kotbase/CollectionConfiguration.channels.<set-channels>|<set-channels>(kotlin.collections.List<kotlin.String>?){}[0]
    final var conflictResolver // kotbase/CollectionConfiguration.conflictResolver|{}conflictResolver[0]
        final fun <get-conflictResolver>(): kotlin/Function1<kotbase/Conflict, kotbase/Document?>? // kotbase/CollectionConfiguration.conflictResolver.<get-conflictResolver>|<get-conflictResolver>(){}[0]
        final fun <set-conflictResolver>(kotlin/Function1<kotbase/Conflict, kotbase/Document?>?) // kotbase/CollectionConfiguration.conflictResolver.<set-conflictResolver>|<set-conflictResolver>(kotlin.Function1<kotbase.Conflict,kotbase.Document?>?){}[0]
    final var documentIDs // kotbase/CollectionConfiguration.documentIDs|{}documentIDs[0]
        final fun <get-documentIDs>(): kotlin.collections/List<kotlin/String>? // kotbase/CollectionConfiguration.documentIDs.<get-documentIDs>|<get-documentIDs>(){}[0]
        final fun <set-documentIDs>(kotlin.collections/List<kotlin/String>?) // kotbase/CollectionConfiguration.documentIDs.<set-documentIDs>|<set-documentIDs>(kotlin.collections.List<kotlin.String>?){}[0]
    final var pullFilter // kotbase/CollectionConfiguration.pullFilter|{}pullFilter[0]
        final fun <get-pullFilter>(): kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? // kotbase/CollectionConfiguration.pullFilter.<get-pullFilter>|<get-pullFilter>(){}[0]
        final fun <set-pullFilter>(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?) // kotbase/CollectionConfiguration.pullFilter.<set-pullFilter>|<set-pullFilter>(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
    final var pushFilter // kotbase/CollectionConfiguration.pushFilter|{}pushFilter[0]
        final fun <get-pushFilter>(): kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? // kotbase/CollectionConfiguration.pushFilter.<get-pushFilter>|<get-pushFilter>(){}[0]
        final fun <set-pushFilter>(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?) // kotbase/CollectionConfiguration.pushFilter.<set-pushFilter>|<set-pushFilter>(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]

    final fun setChannels(kotlin.collections/List<kotlin/String>?): kotbase/CollectionConfiguration // kotbase/CollectionConfiguration.setChannels|setChannels(kotlin.collections.List<kotlin.String>?){}[0]
    final fun setConflictResolver(kotlin/Function1<kotbase/Conflict, kotbase/Document?>?): kotbase/CollectionConfiguration // kotbase/CollectionConfiguration.setConflictResolver|setConflictResolver(kotlin.Function1<kotbase.Conflict,kotbase.Document?>?){}[0]
    final fun setDocumentIDs(kotlin.collections/List<kotlin/String>?): kotbase/CollectionConfiguration // kotbase/CollectionConfiguration.setDocumentIDs|setDocumentIDs(kotlin.collections.List<kotlin.String>?){}[0]
    final fun setPullFilter(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?): kotbase/CollectionConfiguration // kotbase/CollectionConfiguration.setPullFilter|setPullFilter(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
    final fun setPushFilter(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?): kotbase/CollectionConfiguration // kotbase/CollectionConfiguration.setPushFilter|setPushFilter(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
}

// Targets: [apple]
final class kotbase/Conflict : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLConflict> { // kotbase/Conflict|null[0]
    final val documentId // kotbase/Conflict.documentId|{}documentId[0]
        final fun <get-documentId>(): kotlin/String // kotbase/Conflict.documentId.<get-documentId>|<get-documentId>(){}[0]
    final val localDocument // kotbase/Conflict.localDocument|{}localDocument[0]
        final fun <get-localDocument>(): kotbase/Document? // kotbase/Conflict.localDocument.<get-localDocument>|<get-localDocument>(){}[0]
    final val remoteDocument // kotbase/Conflict.remoteDocument|{}remoteDocument[0]
        final fun <get-remoteDocument>(): kotbase/Document? // kotbase/Conflict.remoteDocument.<get-remoteDocument>|<get-remoteDocument>(){}[0]
}

// Targets: [apple]
final class kotbase/ConsoleLogger : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLConsoleLogger>, kotbase/Logger { // kotbase/ConsoleLogger|null[0]
    final var domains // kotbase/ConsoleLogger.domains|{}domains[0]
        final fun <get-domains>(): kotlin.collections/Set<kotbase/LogDomain> // kotbase/ConsoleLogger.domains.<get-domains>|<get-domains>(){}[0]
        final fun <set-domains>(kotlin.collections/Set<kotbase/LogDomain>) // kotbase/ConsoleLogger.domains.<set-domains>|<set-domains>(kotlin.collections.Set<kotbase.LogDomain>){}[0]
    final var level // kotbase/ConsoleLogger.level|{}level[0]
        final fun <get-level>(): kotbase/LogLevel // kotbase/ConsoleLogger.level.<get-level>|<get-level>(){}[0]
        final fun <set-level>(kotbase/LogLevel) // kotbase/ConsoleLogger.level.<set-level>|<set-level>(kotbase.LogLevel){}[0]

    final fun log(kotbase/LogLevel, kotbase/LogDomain, kotlin/String) // kotbase/ConsoleLogger.log|log(kotbase.LogLevel;kotbase.LogDomain;kotlin.String){}[0]
    final fun setDomains(kotlin/Array<out kotbase/LogDomain>...) // kotbase/ConsoleLogger.setDomains|setDomains(kotlin.Array<out|kotbase.LogDomain>...){}[0]
}

// Targets: [apple]
final class kotbase/Database : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLDatabase>, kotlin/AutoCloseable { // kotbase/Database|null[0]
    constructor <init>(kotlin/String) // kotbase/Database.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotbase/DatabaseConfiguration) // kotbase/Database.<init>|<init>(kotlin.String;kotbase.DatabaseConfiguration){}[0]

    final val collections // kotbase/Database.collections|{}collections[0]
        final fun <get-collections>(): kotlin.collections/Set<kotbase/Collection> // kotbase/Database.collections.<get-collections>|<get-collections>(){}[0]
    final val config // kotbase/Database.config|{}config[0]
        final fun <get-config>(): kotbase/DatabaseConfiguration // kotbase/Database.config.<get-config>|<get-config>(){}[0]
    final val count // kotbase/Database.count|{}count[0]
        final fun <get-count>(): kotlin/Long // kotbase/Database.count.<get-count>|<get-count>(){}[0]
    final val defaultCollection // kotbase/Database.defaultCollection|{}defaultCollection[0]
        final fun <get-defaultCollection>(): kotbase/Collection // kotbase/Database.defaultCollection.<get-defaultCollection>|<get-defaultCollection>(){}[0]
    final val defaultScope // kotbase/Database.defaultScope|{}defaultScope[0]
        final fun <get-defaultScope>(): kotbase/Scope // kotbase/Database.defaultScope.<get-defaultScope>|<get-defaultScope>(){}[0]
    final val indexes // kotbase/Database.indexes|{}indexes[0]
        final fun <get-indexes>(): kotlin.collections/List<kotlin/String> // kotbase/Database.indexes.<get-indexes>|<get-indexes>(){}[0]
    final val name // kotbase/Database.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotbase/Database.name.<get-name>|<get-name>(){}[0]
    final val path // kotbase/Database.path|{}path[0]
        final fun <get-path>(): kotlin/String? // kotbase/Database.path.<get-path>|<get-path>(){}[0]
    final val scopes // kotbase/Database.scopes|{}scopes[0]
        final fun <get-scopes>(): kotlin.collections/Set<kotbase/Scope> // kotbase/Database.scopes.<get-scopes>|<get-scopes>(){}[0]

    final fun <#A1: kotlin/Any?> inBatch(kotlin/Function1<kotbase/Database, #A1>): #A1 // kotbase/Database.inBatch|inBatch(kotlin.Function1<kotbase.Database,0:0>){0§<kotlin.Any?>}[0]
    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/DatabaseChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Database.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.DatabaseChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/DatabaseChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Database.addChangeListener|addChangeListener(kotlin.Function1<kotbase.DatabaseChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/DatabaseChange, kotlin/Unit>) // kotbase/Database.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.DatabaseChange,kotlin.Unit>){}[0]
    final fun addDocumentChangeListener(kotlin/String, kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/DocumentChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Database.addDocumentChangeListener|addDocumentChangeListener(kotlin.String;kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.DocumentChange,kotlin.Unit>){}[0]
    final fun addDocumentChangeListener(kotlin/String, kotlin/Function1<kotbase/DocumentChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Database.addDocumentChangeListener|addDocumentChangeListener(kotlin.String;kotlin.Function1<kotbase.DocumentChange,kotlin.Unit>){}[0]
    final fun addDocumentChangeListener(kotlin/String, kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/DocumentChange, kotlin/Unit>) // kotbase/Database.addDocumentChangeListener|addDocumentChangeListener(kotlin.String;kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.DocumentChange,kotlin.Unit>){}[0]
    final fun close() // kotbase/Database.close|close(){}[0]
    final fun collections(): kotlin.collections/Set<kotbase/Collection> // kotbase/Database.collections|collections(){}[0]
    final fun createCollection(kotlin/String): kotbase/Collection // kotbase/Database.createCollection|createCollection(kotlin.String){}[0]
    final fun createCollection(kotlin/String, kotlin/String?): kotbase/Collection // kotbase/Database.createCollection|createCollection(kotlin.String;kotlin.String?){}[0]
    final fun createIndex(kotlin/String, kotbase/Index) // kotbase/Database.createIndex|createIndex(kotlin.String;kotbase.Index){}[0]
    final fun createIndex(kotlin/String, kotbase/IndexConfiguration) // kotbase/Database.createIndex|createIndex(kotlin.String;kotbase.IndexConfiguration){}[0]
    final fun createQuery(kotlin/String): kotbase/Query // kotbase/Database.createQuery|createQuery(kotlin.String){}[0]
    final fun defaultCollection(): kotbase/Collection // kotbase/Database.defaultCollection|defaultCollection(){}[0]
    final fun defaultScope(): kotbase/Scope // kotbase/Database.defaultScope|defaultScope(){}[0]
    final fun delete() // kotbase/Database.delete|delete(){}[0]
    final fun delete(kotbase/Document) // kotbase/Database.delete|delete(kotbase.Document){}[0]
    final fun delete(kotbase/Document, kotbase/ConcurrencyControl): kotlin/Boolean // kotbase/Database.delete|delete(kotbase.Document;kotbase.ConcurrencyControl){}[0]
    final fun deleteCollection(kotlin/String) // kotbase/Database.deleteCollection|deleteCollection(kotlin.String){}[0]
    final fun deleteCollection(kotlin/String, kotlin/String?) // kotbase/Database.deleteCollection|deleteCollection(kotlin.String;kotlin.String?){}[0]
    final fun deleteIndex(kotlin/String) // kotbase/Database.deleteIndex|deleteIndex(kotlin.String){}[0]
    final fun getCollection(kotlin/String): kotbase/Collection? // kotbase/Database.getCollection|getCollection(kotlin.String){}[0]
    final fun getCollection(kotlin/String, kotlin/String?): kotbase/Collection? // kotbase/Database.getCollection|getCollection(kotlin.String;kotlin.String?){}[0]
    final fun getCollections(kotlin/String?): kotlin.collections/Set<kotbase/Collection> // kotbase/Database.getCollections|getCollections(kotlin.String?){}[0]
    final fun getDocument(kotlin/String): kotbase/Document? // kotbase/Database.getDocument|getDocument(kotlin.String){}[0]
    final fun getDocumentExpiration(kotlin/String): kotlinx.datetime/Instant? // kotbase/Database.getDocumentExpiration|getDocumentExpiration(kotlin.String){}[0]
    final fun getScope(kotlin/String): kotbase/Scope? // kotbase/Database.getScope|getScope(kotlin.String){}[0]
    final fun indexes(): kotlin.collections/List<kotlin/String> // kotbase/Database.indexes|indexes(){}[0]
    final fun performMaintenance(kotbase/MaintenanceType): kotlin/Boolean // kotbase/Database.performMaintenance|performMaintenance(kotbase.MaintenanceType){}[0]
    final fun purge(kotbase/Document) // kotbase/Database.purge|purge(kotbase.Document){}[0]
    final fun purge(kotlin/String) // kotbase/Database.purge|purge(kotlin.String){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Database.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
    final fun save(kotbase/MutableDocument) // kotbase/Database.save|save(kotbase.MutableDocument){}[0]
    final fun save(kotbase/MutableDocument, kotbase/ConcurrencyControl): kotlin/Boolean // kotbase/Database.save|save(kotbase.MutableDocument;kotbase.ConcurrencyControl){}[0]
    final fun save(kotbase/MutableDocument, kotlin/Function2<kotbase/MutableDocument, kotbase/Document?, kotlin/Boolean>): kotlin/Boolean // kotbase/Database.save|save(kotbase.MutableDocument;kotlin.Function2<kotbase.MutableDocument,kotbase.Document?,kotlin.Boolean>){}[0]
    final fun scopes(): kotlin.collections/Set<kotbase/Scope> // kotbase/Database.scopes|scopes(){}[0]
    final fun setDocumentExpiration(kotlin/String, kotlinx.datetime/Instant?) // kotbase/Database.setDocumentExpiration|setDocumentExpiration(kotlin.String;kotlinx.datetime.Instant?){}[0]

    final object Companion { // kotbase/Database.Companion|null[0]
        final val log // kotbase/Database.Companion.log|{}log[0]
            final fun <get-log>(): kotbase/Log // kotbase/Database.Companion.log.<get-log>|<get-log>(){}[0]

        final fun copy(kotlin/String, kotlin/String, kotbase/DatabaseConfiguration? = ...) // kotbase/Database.Companion.copy|copy(kotlin.String;kotlin.String;kotbase.DatabaseConfiguration?){}[0]
        final fun delete(kotlin/String, kotlin/String? = ...) // kotbase/Database.Companion.delete|delete(kotlin.String;kotlin.String?){}[0]
        final fun exists(kotlin/String, kotlin/String? = ...): kotlin/Boolean // kotbase/Database.Companion.exists|exists(kotlin.String;kotlin.String?){}[0]
    }
}

// Targets: [apple]
final class kotbase/DatabaseChange : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLDatabaseChange> { // kotbase/DatabaseChange|null[0]
    final val database // kotbase/DatabaseChange.database|{}database[0]
        final fun <get-database>(): kotbase/Database // kotbase/DatabaseChange.database.<get-database>|<get-database>(){}[0]
    final val documentIDs // kotbase/DatabaseChange.documentIDs|{}documentIDs[0]
        final fun <get-documentIDs>(): kotlin.collections/List<kotlin/String> // kotbase/DatabaseChange.documentIDs.<get-documentIDs>|<get-documentIDs>(){}[0]
}

// Targets: [apple]
final class kotbase/DatabaseConfiguration : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLDatabaseConfiguration> { // kotbase/DatabaseConfiguration|null[0]
    constructor <init>() // kotbase/DatabaseConfiguration.<init>|<init>(){}[0]
    constructor <init>(kotbase/DatabaseConfiguration?) // kotbase/DatabaseConfiguration.<init>|<init>(kotbase.DatabaseConfiguration?){}[0]

    final var directory // kotbase/DatabaseConfiguration.directory|{}directory[0]
        final fun <get-directory>(): kotlin/String // kotbase/DatabaseConfiguration.directory.<get-directory>|<get-directory>(){}[0]
        final fun <set-directory>(kotlin/String) // kotbase/DatabaseConfiguration.directory.<set-directory>|<set-directory>(kotlin.String){}[0]
    final var isFullSync // kotbase/DatabaseConfiguration.isFullSync|{}isFullSync[0]
        final fun <get-isFullSync>(): kotlin/Boolean // kotbase/DatabaseConfiguration.isFullSync.<get-isFullSync>|<get-isFullSync>(){}[0]
        final fun <set-isFullSync>(kotlin/Boolean) // kotbase/DatabaseConfiguration.isFullSync.<set-isFullSync>|<set-isFullSync>(kotlin.Boolean){}[0]
    final var isMMapEnabled // kotbase/DatabaseConfiguration.isMMapEnabled|{}isMMapEnabled[0]
        final fun <get-isMMapEnabled>(): kotlin/Boolean // kotbase/DatabaseConfiguration.isMMapEnabled.<get-isMMapEnabled>|<get-isMMapEnabled>(){}[0]
        final fun <set-isMMapEnabled>(kotlin/Boolean) // kotbase/DatabaseConfiguration.isMMapEnabled.<set-isMMapEnabled>|<set-isMMapEnabled>(kotlin.Boolean){}[0]

    final fun setDirectory(kotlin/String): kotbase/DatabaseConfiguration // kotbase/DatabaseConfiguration.setDirectory|setDirectory(kotlin.String){}[0]
    final fun setFullSync(kotlin/Boolean): kotbase/DatabaseConfiguration // kotbase/DatabaseConfiguration.setFullSync|setFullSync(kotlin.Boolean){}[0]
    final fun setMMapEnabled(kotlin/Boolean): kotbase/DatabaseConfiguration // kotbase/DatabaseConfiguration.setMMapEnabled|setMMapEnabled(kotlin.Boolean){}[0]
}

// Targets: [apple]
final class kotbase/DocumentChange : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLDocumentChange> { // kotbase/DocumentChange|null[0]
    final val collection // kotbase/DocumentChange.collection|{}collection[0]
        final fun <get-collection>(): kotbase/Collection // kotbase/DocumentChange.collection.<get-collection>|<get-collection>(){}[0]
    final val database // kotbase/DocumentChange.database|{}database[0]
        final fun <get-database>(): kotbase/Database // kotbase/DocumentChange.database.<get-database>|<get-database>(){}[0]
    final val documentID // kotbase/DocumentChange.documentID|{}documentID[0]
        final fun <get-documentID>(): kotlin/String // kotbase/DocumentChange.documentID.<get-documentID>|<get-documentID>(){}[0]
}

// Targets: [apple]
final class kotbase/DocumentReplication : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLDocumentReplication> { // kotbase/DocumentReplication|null[0]
    final val documents // kotbase/DocumentReplication.documents|{}documents[0]
        final fun <get-documents>(): kotlin.collections/List<kotbase/ReplicatedDocument> // kotbase/DocumentReplication.documents.<get-documents>|<get-documents>(){}[0]
    final val isPush // kotbase/DocumentReplication.isPush|{}isPush[0]
        final fun <get-isPush>(): kotlin/Boolean // kotbase/DocumentReplication.isPush.<get-isPush>|<get-isPush>(){}[0]
    final val replicator // kotbase/DocumentReplication.replicator|{}replicator[0]
        final fun <get-replicator>(): kotbase/Replicator // kotbase/DocumentReplication.replicator.<get-replicator>|<get-replicator>(){}[0]

    final fun toString(): kotlin/String // kotbase/DocumentReplication.toString|toString(){}[0]
}

// Targets: [apple]
final class kotbase/FileLogger : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLFileLogger>, kotbase/Logger { // kotbase/FileLogger|null[0]
    final var config // kotbase/FileLogger.config|{}config[0]
        final fun <get-config>(): kotbase/LogFileConfiguration? // kotbase/FileLogger.config.<get-config>|<get-config>(){}[0]
        final fun <set-config>(kotbase/LogFileConfiguration?) // kotbase/FileLogger.config.<set-config>|<set-config>(kotbase.LogFileConfiguration?){}[0]
    final var level // kotbase/FileLogger.level|{}level[0]
        final fun <get-level>(): kotbase/LogLevel // kotbase/FileLogger.level.<get-level>|<get-level>(){}[0]
        final fun <set-level>(kotbase/LogLevel) // kotbase/FileLogger.level.<set-level>|<set-level>(kotbase.LogLevel){}[0]

    final fun log(kotbase/LogLevel, kotbase/LogDomain, kotlin/String) // kotbase/FileLogger.log|log(kotbase.LogLevel;kotbase.LogDomain;kotlin.String){}[0]
}

// Targets: [apple]
final class kotbase/From : kotbase.internal/AbstractDelegatedClass<cocoapods.CouchbaseLite/CBLQuery>, kotbase/GroupByRouter, kotbase/JoinRouter, kotbase/LimitRouter, kotbase/OrderByRouter, kotbase/Query, kotbase/WhereRouter { // kotbase/From|null[0]
    final var parameters // kotbase/From.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/From.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/From.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/From.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/From.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/From.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/From.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/From.explain|explain(){}[0]
    final fun groupBy(kotlin/Array<out kotbase/Expression>...): kotbase/GroupBy // kotbase/From.groupBy|groupBy(kotlin.Array<out|kotbase.Expression>...){}[0]
    final fun join(kotlin/Array<out kotbase/Join>...): kotbase/Joins // kotbase/From.join|join(kotlin.Array<out|kotbase.Join>...){}[0]
    final fun limit(kotbase/Expression): kotbase/Limit // kotbase/From.limit|limit(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression, kotbase/Expression?): kotbase/Limit // kotbase/From.limit|limit(kotbase.Expression;kotbase.Expression?){}[0]
    final fun orderBy(kotlin/Array<out kotbase/Ordering>...): kotbase/OrderBy // kotbase/From.orderBy|orderBy(kotlin.Array<out|kotbase.Ordering>...){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/From.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
    final fun where(kotbase/Expression): kotbase/Where // kotbase/From.where|where(kotbase.Expression){}[0]
}

// Targets: [apple]
final class kotbase/FullTextIndexItem : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLFullTextIndexItem> { // kotbase/FullTextIndexItem|null[0]
    final object Companion { // kotbase/FullTextIndexItem.Companion|null[0]
        final fun property(kotlin/String): kotbase/FullTextIndexItem // kotbase/FullTextIndexItem.Companion.property|property(kotlin.String){}[0]
    }
}

// Targets: [apple]
final class kotbase/GroupBy : kotbase.internal/AbstractDelegatedClass<cocoapods.CouchbaseLite/CBLQuery>, kotbase/HavingRouter, kotbase/LimitRouter, kotbase/OrderByRouter, kotbase/Query { // kotbase/GroupBy|null[0]
    final var parameters // kotbase/GroupBy.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/GroupBy.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/GroupBy.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/GroupBy.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/GroupBy.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/GroupBy.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/GroupBy.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/GroupBy.explain|explain(){}[0]
    final fun having(kotbase/Expression): kotbase/Having // kotbase/GroupBy.having|having(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression): kotbase/Limit // kotbase/GroupBy.limit|limit(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression, kotbase/Expression?): kotbase/Limit // kotbase/GroupBy.limit|limit(kotbase.Expression;kotbase.Expression?){}[0]
    final fun orderBy(kotlin/Array<out kotbase/Ordering>...): kotbase/OrderBy // kotbase/GroupBy.orderBy|orderBy(kotlin.Array<out|kotbase.Ordering>...){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/GroupBy.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
}

// Targets: [apple]
final class kotbase/Having : kotbase.internal/AbstractDelegatedClass<cocoapods.CouchbaseLite/CBLQuery>, kotbase/LimitRouter, kotbase/OrderByRouter, kotbase/Query { // kotbase/Having|null[0]
    final var parameters // kotbase/Having.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/Having.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/Having.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Having.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Having.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/Having.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/Having.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/Having.explain|explain(){}[0]
    final fun limit(kotbase/Expression): kotbase/Limit // kotbase/Having.limit|limit(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression, kotbase/Expression?): kotbase/Limit // kotbase/Having.limit|limit(kotbase.Expression;kotbase.Expression?){}[0]
    final fun orderBy(kotlin/Array<out kotbase/Ordering>...): kotbase/OrderBy // kotbase/Having.orderBy|orderBy(kotlin.Array<out|kotbase.Ordering>...){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Having.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
}

// Targets: [apple]
final class kotbase/Joins : kotbase.internal/AbstractDelegatedClass<cocoapods.CouchbaseLite/CBLQuery>, kotbase/LimitRouter, kotbase/OrderByRouter, kotbase/Query, kotbase/WhereRouter { // kotbase/Joins|null[0]
    final var parameters // kotbase/Joins.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/Joins.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/Joins.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Joins.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Joins.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/Joins.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/Joins.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/Joins.explain|explain(){}[0]
    final fun limit(kotbase/Expression): kotbase/Limit // kotbase/Joins.limit|limit(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression, kotbase/Expression?): kotbase/Limit // kotbase/Joins.limit|limit(kotbase.Expression;kotbase.Expression?){}[0]
    final fun orderBy(kotlin/Array<out kotbase/Ordering>...): kotbase/OrderBy // kotbase/Joins.orderBy|orderBy(kotlin.Array<out|kotbase.Ordering>...){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Joins.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
    final fun where(kotbase/Expression): kotbase/Where // kotbase/Joins.where|where(kotbase.Expression){}[0]
}

// Targets: [apple]
final class kotbase/Limit : kotbase.internal/AbstractDelegatedClass<cocoapods.CouchbaseLite/CBLQuery>, kotbase/Query { // kotbase/Limit|null[0]
    final var parameters // kotbase/Limit.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/Limit.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/Limit.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Limit.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Limit.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/Limit.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/Limit.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/Limit.explain|explain(){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Limit.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
}

// Targets: [apple]
final class kotbase/Log : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLLog> { // kotbase/Log|null[0]
    final val console // kotbase/Log.console|{}console[0]
        final fun <get-console>(): kotbase/ConsoleLogger // kotbase/Log.console.<get-console>|<get-console>(){}[0]
    final val file // kotbase/Log.file|{}file[0]
        final fun <get-file>(): kotbase/FileLogger // kotbase/Log.file.<get-file>|<get-file>(){}[0]

    final var custom // kotbase/Log.custom|{}custom[0]
        final fun <get-custom>(): kotbase/Logger? // kotbase/Log.custom.<get-custom>|<get-custom>(){}[0]
        final fun <set-custom>(kotbase/Logger?) // kotbase/Log.custom.<set-custom>|<set-custom>(kotbase.Logger?){}[0]
}

// Targets: [apple]
final class kotbase/LogFileConfiguration : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLLogFileConfiguration> { // kotbase/LogFileConfiguration|null[0]
    constructor <init>(kotbase/LogFileConfiguration) // kotbase/LogFileConfiguration.<init>|<init>(kotbase.LogFileConfiguration){}[0]
    constructor <init>(kotlin/String) // kotbase/LogFileConfiguration.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotbase/LogFileConfiguration?) // kotbase/LogFileConfiguration.<init>|<init>(kotlin.String;kotbase.LogFileConfiguration?){}[0]

    final val directory // kotbase/LogFileConfiguration.directory|{}directory[0]
        final fun <get-directory>(): kotlin/String // kotbase/LogFileConfiguration.directory.<get-directory>|<get-directory>(){}[0]

    final var maxRotateCount // kotbase/LogFileConfiguration.maxRotateCount|{}maxRotateCount[0]
        final fun <get-maxRotateCount>(): kotlin/Int // kotbase/LogFileConfiguration.maxRotateCount.<get-maxRotateCount>|<get-maxRotateCount>(){}[0]
        final fun <set-maxRotateCount>(kotlin/Int) // kotbase/LogFileConfiguration.maxRotateCount.<set-maxRotateCount>|<set-maxRotateCount>(kotlin.Int){}[0]
    final var maxSize // kotbase/LogFileConfiguration.maxSize|{}maxSize[0]
        final fun <get-maxSize>(): kotlin/Long // kotbase/LogFileConfiguration.maxSize.<get-maxSize>|<get-maxSize>(){}[0]
        final fun <set-maxSize>(kotlin/Long) // kotbase/LogFileConfiguration.maxSize.<set-maxSize>|<set-maxSize>(kotlin.Long){}[0]
    final var usesPlaintext // kotbase/LogFileConfiguration.usesPlaintext|{}usesPlaintext[0]
        final fun <get-usesPlaintext>(): kotlin/Boolean // kotbase/LogFileConfiguration.usesPlaintext.<get-usesPlaintext>|<get-usesPlaintext>(){}[0]
        final fun <set-usesPlaintext>(kotlin/Boolean) // kotbase/LogFileConfiguration.usesPlaintext.<set-usesPlaintext>|<set-usesPlaintext>(kotlin.Boolean){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotbase/LogFileConfiguration.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotbase/LogFileConfiguration.hashCode|hashCode(){}[0]
    final fun setMaxRotateCount(kotlin/Int): kotbase/LogFileConfiguration // kotbase/LogFileConfiguration.setMaxRotateCount|setMaxRotateCount(kotlin.Int){}[0]
    final fun setMaxSize(kotlin/Long): kotbase/LogFileConfiguration // kotbase/LogFileConfiguration.setMaxSize|setMaxSize(kotlin.Long){}[0]
    final fun setUsePlaintext(kotlin/Boolean): kotbase/LogFileConfiguration // kotbase/LogFileConfiguration.setUsePlaintext|setUsePlaintext(kotlin.Boolean){}[0]
}

// Targets: [apple]
final class kotbase/OrderBy : kotbase.internal/AbstractDelegatedClass<cocoapods.CouchbaseLite/CBLQuery>, kotbase/LimitRouter, kotbase/Query { // kotbase/OrderBy|null[0]
    final var parameters // kotbase/OrderBy.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/OrderBy.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/OrderBy.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/OrderBy.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/OrderBy.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/OrderBy.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/OrderBy.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/OrderBy.explain|explain(){}[0]
    final fun limit(kotbase/Expression): kotbase/Limit // kotbase/OrderBy.limit|limit(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression, kotbase/Expression?): kotbase/Limit // kotbase/OrderBy.limit|limit(kotbase.Expression;kotbase.Expression?){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/OrderBy.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
}

// Targets: [apple]
final class kotbase/Parameters : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLQueryParameters> { // kotbase/Parameters|null[0]
    constructor <init>() // kotbase/Parameters.<init>|<init>(){}[0]
    constructor <init>(kotbase/Parameters?) // kotbase/Parameters.<init>|<init>(kotbase.Parameters?){}[0]

    final fun getValue(kotlin/String): kotlin/Any? // kotbase/Parameters.getValue|getValue(kotlin.String){}[0]
    final fun setArray(kotlin/String, kotbase/Array?): kotbase/Parameters // kotbase/Parameters.setArray|setArray(kotlin.String;kotbase.Array?){}[0]
    final fun setBlob(kotlin/String, kotbase/Blob?): kotbase/Parameters // kotbase/Parameters.setBlob|setBlob(kotlin.String;kotbase.Blob?){}[0]
    final fun setBoolean(kotlin/String, kotlin/Boolean): kotbase/Parameters // kotbase/Parameters.setBoolean|setBoolean(kotlin.String;kotlin.Boolean){}[0]
    final fun setDate(kotlin/String, kotlinx.datetime/Instant?): kotbase/Parameters // kotbase/Parameters.setDate|setDate(kotlin.String;kotlinx.datetime.Instant?){}[0]
    final fun setDictionary(kotlin/String, kotbase/Dictionary?): kotbase/Parameters // kotbase/Parameters.setDictionary|setDictionary(kotlin.String;kotbase.Dictionary?){}[0]
    final fun setDouble(kotlin/String, kotlin/Double): kotbase/Parameters // kotbase/Parameters.setDouble|setDouble(kotlin.String;kotlin.Double){}[0]
    final fun setFloat(kotlin/String, kotlin/Float): kotbase/Parameters // kotbase/Parameters.setFloat|setFloat(kotlin.String;kotlin.Float){}[0]
    final fun setInt(kotlin/String, kotlin/Int): kotbase/Parameters // kotbase/Parameters.setInt|setInt(kotlin.String;kotlin.Int){}[0]
    final fun setLong(kotlin/String, kotlin/Long): kotbase/Parameters // kotbase/Parameters.setLong|setLong(kotlin.String;kotlin.Long){}[0]
    final fun setNumber(kotlin/String, kotlin/Number?): kotbase/Parameters // kotbase/Parameters.setNumber|setNumber(kotlin.String;kotlin.Number?){}[0]
    final fun setString(kotlin/String, kotlin/String?): kotbase/Parameters // kotbase/Parameters.setString|setString(kotlin.String;kotlin.String?){}[0]
    final fun setValue(kotlin/String, kotlin/Any?): kotbase/Parameters // kotbase/Parameters.setValue|setValue(kotlin.String;kotlin.Any?){}[0]
}

// Targets: [apple]
final class kotbase/QueryChange : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLQueryChange> { // kotbase/QueryChange|null[0]
    final val error // kotbase/QueryChange.error|{}error[0]
        final fun <get-error>(): kotlin/Throwable? // kotbase/QueryChange.error.<get-error>|<get-error>(){}[0]
    final val query // kotbase/QueryChange.query|{}query[0]
        final fun <get-query>(): kotbase/Query // kotbase/QueryChange.query.<get-query>|<get-query>(){}[0]
    final val results // kotbase/QueryChange.results|{}results[0]
        final fun <get-results>(): kotbase/ResultSet? // kotbase/QueryChange.results.<get-results>|<get-results>(){}[0]
}

// Targets: [apple]
final class kotbase/QueryIndex : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLQueryIndex> { // kotbase/QueryIndex|null[0]
    final val collection // kotbase/QueryIndex.collection|{}collection[0]
        final fun <get-collection>(): kotbase/Collection // kotbase/QueryIndex.collection.<get-collection>|<get-collection>(){}[0]
    final val name // kotbase/QueryIndex.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotbase/QueryIndex.name.<get-name>|<get-name>(){}[0]
}

// Targets: [apple]
final class kotbase/ReplicatedDocument : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLReplicatedDocument> { // kotbase/ReplicatedDocument|null[0]
    final val collection // kotbase/ReplicatedDocument.collection|{}collection[0]
        final fun <get-collection>(): kotlin/String // kotbase/ReplicatedDocument.collection.<get-collection>|<get-collection>(){}[0]
    final val error // kotbase/ReplicatedDocument.error|{}error[0]
        final fun <get-error>(): kotbase/CouchbaseLiteException? // kotbase/ReplicatedDocument.error.<get-error>|<get-error>(){}[0]
    final val flags // kotbase/ReplicatedDocument.flags|{}flags[0]
        final fun <get-flags>(): kotlin.collections/Set<kotbase/DocumentFlag> // kotbase/ReplicatedDocument.flags.<get-flags>|<get-flags>(){}[0]
    final val id // kotbase/ReplicatedDocument.id|{}id[0]
        final fun <get-id>(): kotlin/String // kotbase/ReplicatedDocument.id.<get-id>|<get-id>(){}[0]
    final val scope // kotbase/ReplicatedDocument.scope|{}scope[0]
        final fun <get-scope>(): kotlin/String // kotbase/ReplicatedDocument.scope.<get-scope>|<get-scope>(){}[0]

    final fun toString(): kotlin/String // kotbase/ReplicatedDocument.toString|toString(){}[0]
}

// Targets: [apple]
final class kotbase/Replicator : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLReplicator>, kotlin/AutoCloseable { // kotbase/Replicator|null[0]
    constructor <init>(kotbase/ReplicatorConfiguration) // kotbase/Replicator.<init>|<init>(kotbase.ReplicatorConfiguration){}[0]

    final val config // kotbase/Replicator.config|{}config[0]
        final fun <get-config>(): kotbase/ReplicatorConfiguration // kotbase/Replicator.config.<get-config>|<get-config>(){}[0]
    final val isClosed // kotbase/Replicator.isClosed|{}isClosed[0]
        final fun <get-isClosed>(): kotlin/Boolean // kotbase/Replicator.isClosed.<get-isClosed>|<get-isClosed>(){}[0]
    final val pendingDocumentIds // kotbase/Replicator.pendingDocumentIds|{}pendingDocumentIds[0]
        final fun <get-pendingDocumentIds>(): kotlin.collections/Set<kotlin/String> // kotbase/Replicator.pendingDocumentIds.<get-pendingDocumentIds>|<get-pendingDocumentIds>(){}[0]
    final val serverCertificates // kotbase/Replicator.serverCertificates|{}serverCertificates[0]
        final fun <get-serverCertificates>(): kotlin.collections/List<kotlin/ByteArray>? // kotbase/Replicator.serverCertificates.<get-serverCertificates>|<get-serverCertificates>(){}[0]
    final val status // kotbase/Replicator.status|{}status[0]
        final fun <get-status>(): kotbase/ReplicatorStatus // kotbase/Replicator.status.<get-status>|<get-status>(){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/ReplicatorChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Replicator.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.ReplicatorChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/ReplicatorChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Replicator.addChangeListener|addChangeListener(kotlin.Function1<kotbase.ReplicatorChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/ReplicatorChange, kotlin/Unit>) // kotbase/Replicator.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.ReplicatorChange,kotlin.Unit>){}[0]
    final fun addDocumentReplicationListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/DocumentReplication, kotlin/Unit>): kotbase/ListenerToken // kotbase/Replicator.addDocumentReplicationListener|addDocumentReplicationListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.DocumentReplication,kotlin.Unit>){}[0]
    final fun addDocumentReplicationListener(kotlin/Function1<kotbase/DocumentReplication, kotlin/Unit>): kotbase/ListenerToken // kotbase/Replicator.addDocumentReplicationListener|addDocumentReplicationListener(kotlin.Function1<kotbase.DocumentReplication,kotlin.Unit>){}[0]
    final fun addDocumentReplicationListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/DocumentReplication, kotlin/Unit>) // kotbase/Replicator.addDocumentReplicationListener|addDocumentReplicationListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.DocumentReplication,kotlin.Unit>){}[0]
    final fun close() // kotbase/Replicator.close|close(){}[0]
    final fun getPendingDocumentIds(kotbase/Collection): kotlin.collections/Set<kotlin/String> // kotbase/Replicator.getPendingDocumentIds|getPendingDocumentIds(kotbase.Collection){}[0]
    final fun isDocumentPending(kotlin/String): kotlin/Boolean // kotbase/Replicator.isDocumentPending|isDocumentPending(kotlin.String){}[0]
    final fun isDocumentPending(kotlin/String, kotbase/Collection): kotlin/Boolean // kotbase/Replicator.isDocumentPending|isDocumentPending(kotlin.String;kotbase.Collection){}[0]
    final fun pendingDocumentIds(): kotlin.collections/Set<kotlin/String> // kotbase/Replicator.pendingDocumentIds|pendingDocumentIds(){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Replicator.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
    final fun start() // kotbase/Replicator.start|start(){}[0]
    final fun start(kotlin/Boolean) // kotbase/Replicator.start|start(kotlin.Boolean){}[0]
    final fun stop() // kotbase/Replicator.stop|stop(){}[0]
}

// Targets: [apple]
final class kotbase/ReplicatorChange : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLReplicatorChange> { // kotbase/ReplicatorChange|null[0]
    final val replicator // kotbase/ReplicatorChange.replicator|{}replicator[0]
        final fun <get-replicator>(): kotbase/Replicator // kotbase/ReplicatorChange.replicator.<get-replicator>|<get-replicator>(){}[0]
    final val status // kotbase/ReplicatorChange.status|{}status[0]
        final fun <get-status>(): kotbase/ReplicatorStatus // kotbase/ReplicatorChange.status.<get-status>|<get-status>(){}[0]

    final fun toString(): kotlin/String // kotbase/ReplicatorChange.toString|toString(){}[0]
}

// Targets: [apple]
final class kotbase/ReplicatorConfiguration : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLReplicatorConfiguration> { // kotbase/ReplicatorConfiguration|null[0]
    constructor <init>(kotbase/Database, kotbase/Endpoint) // kotbase/ReplicatorConfiguration.<init>|<init>(kotbase.Database;kotbase.Endpoint){}[0]
    constructor <init>(kotbase/Endpoint) // kotbase/ReplicatorConfiguration.<init>|<init>(kotbase.Endpoint){}[0]
    constructor <init>(kotbase/ReplicatorConfiguration) // kotbase/ReplicatorConfiguration.<init>|<init>(kotbase.ReplicatorConfiguration){}[0]

    final val collections // kotbase/ReplicatorConfiguration.collections|{}collections[0]
        final fun <get-collections>(): kotlin.collections/Set<kotbase/Collection> // kotbase/ReplicatorConfiguration.collections.<get-collections>|<get-collections>(){}[0]
    final val database // kotbase/ReplicatorConfiguration.database|{}database[0]
        final fun <get-database>(): kotbase/Database // kotbase/ReplicatorConfiguration.database.<get-database>|<get-database>(){}[0]
    final val target // kotbase/ReplicatorConfiguration.target|{}target[0]
        final fun <get-target>(): kotbase/Endpoint // kotbase/ReplicatorConfiguration.target.<get-target>|<get-target>(){}[0]

    final var authenticator // kotbase/ReplicatorConfiguration.authenticator|{}authenticator[0]
        final fun <get-authenticator>(): kotbase/Authenticator? // kotbase/ReplicatorConfiguration.authenticator.<get-authenticator>|<get-authenticator>(){}[0]
        final fun <set-authenticator>(kotbase/Authenticator?) // kotbase/ReplicatorConfiguration.authenticator.<set-authenticator>|<set-authenticator>(kotbase.Authenticator?){}[0]
    final var channels // kotbase/ReplicatorConfiguration.channels|{}channels[0]
        final fun <get-channels>(): kotlin.collections/List<kotlin/String>? // kotbase/ReplicatorConfiguration.channels.<get-channels>|<get-channels>(){}[0]
        final fun <set-channels>(kotlin.collections/List<kotlin/String>?) // kotbase/ReplicatorConfiguration.channels.<set-channels>|<set-channels>(kotlin.collections.List<kotlin.String>?){}[0]
    final var conflictResolver // kotbase/ReplicatorConfiguration.conflictResolver|{}conflictResolver[0]
        final fun <get-conflictResolver>(): kotlin/Function1<kotbase/Conflict, kotbase/Document?>? // kotbase/ReplicatorConfiguration.conflictResolver.<get-conflictResolver>|<get-conflictResolver>(){}[0]
        final fun <set-conflictResolver>(kotlin/Function1<kotbase/Conflict, kotbase/Document?>?) // kotbase/ReplicatorConfiguration.conflictResolver.<set-conflictResolver>|<set-conflictResolver>(kotlin.Function1<kotbase.Conflict,kotbase.Document?>?){}[0]
    final var documentIDs // kotbase/ReplicatorConfiguration.documentIDs|{}documentIDs[0]
        final fun <get-documentIDs>(): kotlin.collections/List<kotlin/String>? // kotbase/ReplicatorConfiguration.documentIDs.<get-documentIDs>|<get-documentIDs>(){}[0]
        final fun <set-documentIDs>(kotlin.collections/List<kotlin/String>?) // kotbase/ReplicatorConfiguration.documentIDs.<set-documentIDs>|<set-documentIDs>(kotlin.collections.List<kotlin.String>?){}[0]
    final var headers // kotbase/ReplicatorConfiguration.headers|{}headers[0]
        final fun <get-headers>(): kotlin.collections/Map<kotlin/String, kotlin/String>? // kotbase/ReplicatorConfiguration.headers.<get-headers>|<get-headers>(){}[0]
        final fun <set-headers>(kotlin.collections/Map<kotlin/String, kotlin/String>?) // kotbase/ReplicatorConfiguration.headers.<set-headers>|<set-headers>(kotlin.collections.Map<kotlin.String,kotlin.String>?){}[0]
    final var heartbeat // kotbase/ReplicatorConfiguration.heartbeat|{}heartbeat[0]
        final fun <get-heartbeat>(): kotlin/Int // kotbase/ReplicatorConfiguration.heartbeat.<get-heartbeat>|<get-heartbeat>(){}[0]
        final fun <set-heartbeat>(kotlin/Int) // kotbase/ReplicatorConfiguration.heartbeat.<set-heartbeat>|<set-heartbeat>(kotlin.Int){}[0]
    final var isAcceptParentDomainCookies // kotbase/ReplicatorConfiguration.isAcceptParentDomainCookies|{}isAcceptParentDomainCookies[0]
        final fun <get-isAcceptParentDomainCookies>(): kotlin/Boolean // kotbase/ReplicatorConfiguration.isAcceptParentDomainCookies.<get-isAcceptParentDomainCookies>|<get-isAcceptParentDomainCookies>(){}[0]
        final fun <set-isAcceptParentDomainCookies>(kotlin/Boolean) // kotbase/ReplicatorConfiguration.isAcceptParentDomainCookies.<set-isAcceptParentDomainCookies>|<set-isAcceptParentDomainCookies>(kotlin.Boolean){}[0]
    final var isAutoPurgeEnabled // kotbase/ReplicatorConfiguration.isAutoPurgeEnabled|{}isAutoPurgeEnabled[0]
        final fun <get-isAutoPurgeEnabled>(): kotlin/Boolean // kotbase/ReplicatorConfiguration.isAutoPurgeEnabled.<get-isAutoPurgeEnabled>|<get-isAutoPurgeEnabled>(){}[0]
        final fun <set-isAutoPurgeEnabled>(kotlin/Boolean) // kotbase/ReplicatorConfiguration.isAutoPurgeEnabled.<set-isAutoPurgeEnabled>|<set-isAutoPurgeEnabled>(kotlin.Boolean){}[0]
    final var isContinuous // kotbase/ReplicatorConfiguration.isContinuous|{}isContinuous[0]
        final fun <get-isContinuous>(): kotlin/Boolean // kotbase/ReplicatorConfiguration.isContinuous.<get-isContinuous>|<get-isContinuous>(){}[0]
        final fun <set-isContinuous>(kotlin/Boolean) // kotbase/ReplicatorConfiguration.isContinuous.<set-isContinuous>|<set-isContinuous>(kotlin.Boolean){}[0]
    final var maxAttemptWaitTime // kotbase/ReplicatorConfiguration.maxAttemptWaitTime|{}maxAttemptWaitTime[0]
        final fun <get-maxAttemptWaitTime>(): kotlin/Int // kotbase/ReplicatorConfiguration.maxAttemptWaitTime.<get-maxAttemptWaitTime>|<get-maxAttemptWaitTime>(){}[0]
        final fun <set-maxAttemptWaitTime>(kotlin/Int) // kotbase/ReplicatorConfiguration.maxAttemptWaitTime.<set-maxAttemptWaitTime>|<set-maxAttemptWaitTime>(kotlin.Int){}[0]
    final var maxAttempts // kotbase/ReplicatorConfiguration.maxAttempts|{}maxAttempts[0]
        final fun <get-maxAttempts>(): kotlin/Int // kotbase/ReplicatorConfiguration.maxAttempts.<get-maxAttempts>|<get-maxAttempts>(){}[0]
        final fun <set-maxAttempts>(kotlin/Int) // kotbase/ReplicatorConfiguration.maxAttempts.<set-maxAttempts>|<set-maxAttempts>(kotlin.Int){}[0]
    final var pinnedServerCertificate // kotbase/ReplicatorConfiguration.pinnedServerCertificate|{}pinnedServerCertificate[0]
        final fun <get-pinnedServerCertificate>(): kotlin/ByteArray? // kotbase/ReplicatorConfiguration.pinnedServerCertificate.<get-pinnedServerCertificate>|<get-pinnedServerCertificate>(){}[0]
        final fun <set-pinnedServerCertificate>(kotlin/ByteArray?) // kotbase/ReplicatorConfiguration.pinnedServerCertificate.<set-pinnedServerCertificate>|<set-pinnedServerCertificate>(kotlin.ByteArray?){}[0]
    final var pullFilter // kotbase/ReplicatorConfiguration.pullFilter|{}pullFilter[0]
        final fun <get-pullFilter>(): kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? // kotbase/ReplicatorConfiguration.pullFilter.<get-pullFilter>|<get-pullFilter>(){}[0]
        final fun <set-pullFilter>(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?) // kotbase/ReplicatorConfiguration.pullFilter.<set-pullFilter>|<set-pullFilter>(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
    final var pushFilter // kotbase/ReplicatorConfiguration.pushFilter|{}pushFilter[0]
        final fun <get-pushFilter>(): kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? // kotbase/ReplicatorConfiguration.pushFilter.<get-pushFilter>|<get-pushFilter>(){}[0]
        final fun <set-pushFilter>(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?) // kotbase/ReplicatorConfiguration.pushFilter.<set-pushFilter>|<set-pushFilter>(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
    final var type // kotbase/ReplicatorConfiguration.type|{}type[0]
        final fun <get-type>(): kotbase/ReplicatorType // kotbase/ReplicatorConfiguration.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(kotbase/ReplicatorType) // kotbase/ReplicatorConfiguration.type.<set-type>|<set-type>(kotbase.ReplicatorType){}[0]

    final fun addCollection(kotbase/Collection, kotbase/CollectionConfiguration? = ...): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.addCollection|addCollection(kotbase.Collection;kotbase.CollectionConfiguration?){}[0]
    final fun addCollections(kotlin.collections/Collection<kotbase/Collection>, kotbase/CollectionConfiguration? = ...): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.addCollections|addCollections(kotlin.collections.Collection<kotbase.Collection>;kotbase.CollectionConfiguration?){}[0]
    final fun getCollectionConfiguration(kotbase/Collection): kotbase/CollectionConfiguration? // kotbase/ReplicatorConfiguration.getCollectionConfiguration|getCollectionConfiguration(kotbase.Collection){}[0]
    final fun removeCollection(kotbase/Collection): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.removeCollection|removeCollection(kotbase.Collection){}[0]
    final fun setAcceptParentDomainCookies(kotlin/Boolean): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setAcceptParentDomainCookies|setAcceptParentDomainCookies(kotlin.Boolean){}[0]
    final fun setAuthenticator(kotbase/Authenticator?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setAuthenticator|setAuthenticator(kotbase.Authenticator?){}[0]
    final fun setAutoPurgeEnabled(kotlin/Boolean): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setAutoPurgeEnabled|setAutoPurgeEnabled(kotlin.Boolean){}[0]
    final fun setChannels(kotlin.collections/List<kotlin/String>?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setChannels|setChannels(kotlin.collections.List<kotlin.String>?){}[0]
    final fun setConflictResolver(kotlin/Function1<kotbase/Conflict, kotbase/Document?>?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setConflictResolver|setConflictResolver(kotlin.Function1<kotbase.Conflict,kotbase.Document?>?){}[0]
    final fun setContinuous(kotlin/Boolean): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setContinuous|setContinuous(kotlin.Boolean){}[0]
    final fun setDocumentIDs(kotlin.collections/List<kotlin/String>?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setDocumentIDs|setDocumentIDs(kotlin.collections.List<kotlin.String>?){}[0]
    final fun setHeaders(kotlin.collections/Map<kotlin/String, kotlin/String>?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setHeaders|setHeaders(kotlin.collections.Map<kotlin.String,kotlin.String>?){}[0]
    final fun setHeartbeat(kotlin/Int): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setHeartbeat|setHeartbeat(kotlin.Int){}[0]
    final fun setMaxAttemptWaitTime(kotlin/Int): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setMaxAttemptWaitTime|setMaxAttemptWaitTime(kotlin.Int){}[0]
    final fun setMaxAttempts(kotlin/Int): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setMaxAttempts|setMaxAttempts(kotlin.Int){}[0]
    final fun setPinnedServerCertificate(kotlin/ByteArray?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setPinnedServerCertificate|setPinnedServerCertificate(kotlin.ByteArray?){}[0]
    final fun setPullFilter(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setPullFilter|setPullFilter(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
    final fun setPushFilter(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setPushFilter|setPushFilter(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
    final fun setType(kotbase/ReplicatorType): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setType|setType(kotbase.ReplicatorType){}[0]
    final fun toString(): kotlin/String // kotbase/ReplicatorConfiguration.toString|toString(){}[0]

    final object Companion // kotbase/ReplicatorConfiguration.Companion|null[0]
}

// Targets: [apple]
final class kotbase/ReplicatorStatus : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLReplicatorStatus> { // kotbase/ReplicatorStatus|null[0]
    final val activityLevel // kotbase/ReplicatorStatus.activityLevel|{}activityLevel[0]
        final fun <get-activityLevel>(): kotbase/ReplicatorActivityLevel // kotbase/ReplicatorStatus.activityLevel.<get-activityLevel>|<get-activityLevel>(){}[0]
    final val error // kotbase/ReplicatorStatus.error|{}error[0]
        final fun <get-error>(): kotbase/CouchbaseLiteException? // kotbase/ReplicatorStatus.error.<get-error>|<get-error>(){}[0]
    final val progress // kotbase/ReplicatorStatus.progress|{}progress[0]
        final fun <get-progress>(): kotbase/ReplicatorProgress // kotbase/ReplicatorStatus.progress.<get-progress>|<get-progress>(){}[0]

    final fun toString(): kotlin/String // kotbase/ReplicatorStatus.toString|toString(){}[0]
}

// Targets: [apple]
final class kotbase/Result : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLQueryResult>, kotbase/ArrayInterface, kotbase/DictionaryInterface, kotlin.collections/Iterable<kotlin/String> { // kotbase/Result|null[0]
    final val count // kotbase/Result.count|{}count[0]
        final fun <get-count>(): kotlin/Int // kotbase/Result.count.<get-count>|<get-count>(){}[0]
    final val keys // kotbase/Result.keys|{}keys[0]
        final fun <get-keys>(): kotlin.collections/List<kotlin/String> // kotbase/Result.keys.<get-keys>|<get-keys>(){}[0]

    final fun contains(kotlin/String): kotlin/Boolean // kotbase/Result.contains|contains(kotlin.String){}[0]
    final fun getArray(kotlin/Int): kotbase/Array? // kotbase/Result.getArray|getArray(kotlin.Int){}[0]
    final fun getArray(kotlin/String): kotbase/Array? // kotbase/Result.getArray|getArray(kotlin.String){}[0]
    final fun getBlob(kotlin/Int): kotbase/Blob? // kotbase/Result.getBlob|getBlob(kotlin.Int){}[0]
    final fun getBlob(kotlin/String): kotbase/Blob? // kotbase/Result.getBlob|getBlob(kotlin.String){}[0]
    final fun getBoolean(kotlin/Int): kotlin/Boolean // kotbase/Result.getBoolean|getBoolean(kotlin.Int){}[0]
    final fun getBoolean(kotlin/String): kotlin/Boolean // kotbase/Result.getBoolean|getBoolean(kotlin.String){}[0]
    final fun getDate(kotlin/Int): kotlinx.datetime/Instant? // kotbase/Result.getDate|getDate(kotlin.Int){}[0]
    final fun getDate(kotlin/String): kotlinx.datetime/Instant? // kotbase/Result.getDate|getDate(kotlin.String){}[0]
    final fun getDictionary(kotlin/Int): kotbase/Dictionary? // kotbase/Result.getDictionary|getDictionary(kotlin.Int){}[0]
    final fun getDictionary(kotlin/String): kotbase/Dictionary? // kotbase/Result.getDictionary|getDictionary(kotlin.String){}[0]
    final fun getDouble(kotlin/Int): kotlin/Double // kotbase/Result.getDouble|getDouble(kotlin.Int){}[0]
    final fun getDouble(kotlin/String): kotlin/Double // kotbase/Result.getDouble|getDouble(kotlin.String){}[0]
    final fun getFloat(kotlin/Int): kotlin/Float // kotbase/Result.getFloat|getFloat(kotlin.Int){}[0]
    final fun getFloat(kotlin/String): kotlin/Float // kotbase/Result.getFloat|getFloat(kotlin.String){}[0]
    final fun getInt(kotlin/Int): kotlin/Int // kotbase/Result.getInt|getInt(kotlin.Int){}[0]
    final fun getInt(kotlin/String): kotlin/Int // kotbase/Result.getInt|getInt(kotlin.String){}[0]
    final fun getLong(kotlin/Int): kotlin/Long // kotbase/Result.getLong|getLong(kotlin.Int){}[0]
    final fun getLong(kotlin/String): kotlin/Long // kotbase/Result.getLong|getLong(kotlin.String){}[0]
    final fun getNumber(kotlin/Int): kotlin/Number? // kotbase/Result.getNumber|getNumber(kotlin.Int){}[0]
    final fun getNumber(kotlin/String): kotlin/Number? // kotbase/Result.getNumber|getNumber(kotlin.String){}[0]
    final fun getString(kotlin/Int): kotlin/String? // kotbase/Result.getString|getString(kotlin.Int){}[0]
    final fun getString(kotlin/String): kotlin/String? // kotbase/Result.getString|getString(kotlin.String){}[0]
    final fun getValue(kotlin/Int): kotlin/Any? // kotbase/Result.getValue|getValue(kotlin.Int){}[0]
    final fun getValue(kotlin/String): kotlin/Any? // kotbase/Result.getValue|getValue(kotlin.String){}[0]
    final fun iterator(): kotlin.collections/Iterator<kotlin/String> // kotbase/Result.iterator|iterator(){}[0]
    final fun toJSON(): kotlin/String // kotbase/Result.toJSON|toJSON(){}[0]
    final fun toList(): kotlin.collections/List<kotlin/Any?> // kotbase/Result.toList|toList(){}[0]
    final fun toMap(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // kotbase/Result.toMap|toMap(){}[0]
}

// Targets: [apple]
final class kotbase/ResultSet : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLQueryResultSet>, kotlin.collections/Iterable<kotbase/Result>, kotlin/AutoCloseable { // kotbase/ResultSet|null[0]
    final fun allResults(): kotlin.collections/List<kotbase/Result> // kotbase/ResultSet.allResults|allResults(){}[0]
    final fun close() // kotbase/ResultSet.close|close(){}[0]
    final fun iterator(): kotlin.collections/Iterator<kotbase/Result> // kotbase/ResultSet.iterator|iterator(){}[0]
    final fun next(): kotbase/Result? // kotbase/ResultSet.next|next(){}[0]
}

// Targets: [apple]
final class kotbase/Scope : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLScope> { // kotbase/Scope|null[0]
    final val collections // kotbase/Scope.collections|{}collections[0]
        final fun <get-collections>(): kotlin.collections/Set<kotbase/Collection> // kotbase/Scope.collections.<get-collections>|<get-collections>(){}[0]
    final val database // kotbase/Scope.database|{}database[0]
        final fun <get-database>(): kotbase/Database // kotbase/Scope.database.<get-database>|<get-database>(){}[0]
    final val name // kotbase/Scope.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotbase/Scope.name.<get-name>|<get-name>(){}[0]

    final fun collections(): kotlin.collections/Set<kotbase/Collection> // kotbase/Scope.collections|collections(){}[0]
    final fun getCollection(kotlin/String): kotbase/Collection? // kotbase/Scope.getCollection|getCollection(kotlin.String){}[0]

    final object Companion // kotbase/Scope.Companion|null[0]
}

// Targets: [apple]
final class kotbase/Select : kotbase.internal/AbstractDelegatedClass<cocoapods.CouchbaseLite/CBLQuery>, kotbase/FromRouter, kotbase/Query { // kotbase/Select|null[0]
    final var parameters // kotbase/Select.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/Select.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/Select.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Select.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Select.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/Select.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/Select.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/Select.explain|explain(){}[0]
    final fun from(kotbase/DataSource): kotbase/From // kotbase/Select.from|from(kotbase.DataSource){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Select.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
}

// Targets: [apple]
final class kotbase/ValueIndexItem : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLValueIndexItem> { // kotbase/ValueIndexItem|null[0]
    final object Companion { // kotbase/ValueIndexItem.Companion|null[0]
        final fun expression(kotbase/Expression): kotbase/ValueIndexItem // kotbase/ValueIndexItem.Companion.expression|expression(kotbase.Expression){}[0]
        final fun property(kotlin/String): kotbase/ValueIndexItem // kotbase/ValueIndexItem.Companion.property|property(kotlin.String){}[0]
    }
}

// Targets: [apple]
final class kotbase/Where : kotbase.internal/AbstractDelegatedClass<cocoapods.CouchbaseLite/CBLQuery>, kotbase/GroupByRouter, kotbase/LimitRouter, kotbase/OrderByRouter, kotbase/Query { // kotbase/Where|null[0]
    final var parameters // kotbase/Where.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/Where.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/Where.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Where.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Where.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/Where.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/Where.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/Where.explain|explain(){}[0]
    final fun groupBy(kotlin/Array<out kotbase/Expression>...): kotbase/GroupBy // kotbase/Where.groupBy|groupBy(kotlin.Array<out|kotbase.Expression>...){}[0]
    final fun limit(kotbase/Expression): kotbase/Limit // kotbase/Where.limit|limit(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression, kotbase/Expression?): kotbase/Limit // kotbase/Where.limit|limit(kotbase.Expression;kotbase.Expression?){}[0]
    final fun orderBy(kotlin/Array<out kotbase/Ordering>...): kotbase/OrderBy // kotbase/Where.orderBy|orderBy(kotlin.Array<out|kotbase.Ordering>...){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Where.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
}

// Targets: [apple]
open class kotbase/Array : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLArray>, kotbase/ArrayInterface, kotlin.collections/Iterable<kotlin/Any?> { // kotbase/Array|null[0]
    open val count // kotbase/Array.count|{}count[0]
        open fun <get-count>(): kotlin/Int // kotbase/Array.count.<get-count>|<get-count>(){}[0]

    final fun mutate() // kotbase/Array.mutate|mutate(){}[0]
    final fun toMutable(): kotbase/MutableArray // kotbase/Array.toMutable|toMutable(){}[0]
    open fun getArray(kotlin/Int): kotbase/Array? // kotbase/Array.getArray|getArray(kotlin.Int){}[0]
    open fun getBlob(kotlin/Int): kotbase/Blob? // kotbase/Array.getBlob|getBlob(kotlin.Int){}[0]
    open fun getBoolean(kotlin/Int): kotlin/Boolean // kotbase/Array.getBoolean|getBoolean(kotlin.Int){}[0]
    open fun getDate(kotlin/Int): kotlinx.datetime/Instant? // kotbase/Array.getDate|getDate(kotlin.Int){}[0]
    open fun getDictionary(kotlin/Int): kotbase/Dictionary? // kotbase/Array.getDictionary|getDictionary(kotlin.Int){}[0]
    open fun getDouble(kotlin/Int): kotlin/Double // kotbase/Array.getDouble|getDouble(kotlin.Int){}[0]
    open fun getFloat(kotlin/Int): kotlin/Float // kotbase/Array.getFloat|getFloat(kotlin.Int){}[0]
    open fun getInt(kotlin/Int): kotlin/Int // kotbase/Array.getInt|getInt(kotlin.Int){}[0]
    open fun getLong(kotlin/Int): kotlin/Long // kotbase/Array.getLong|getLong(kotlin.Int){}[0]
    open fun getNumber(kotlin/Int): kotlin/Number? // kotbase/Array.getNumber|getNumber(kotlin.Int){}[0]
    open fun getString(kotlin/Int): kotlin/String? // kotbase/Array.getString|getString(kotlin.Int){}[0]
    open fun getValue(kotlin/Int): kotlin/Any? // kotbase/Array.getValue|getValue(kotlin.Int){}[0]
    open fun iterator(): kotlin.collections/Iterator<kotlin/Any?> // kotbase/Array.iterator|iterator(){}[0]
    open fun toJSON(): kotlin/String // kotbase/Array.toJSON|toJSON(){}[0]
    open fun toList(): kotlin.collections/List<kotlin/Any?> // kotbase/Array.toList|toList(){}[0]
    open fun toString(): kotlin/String // kotbase/Array.toString|toString(){}[0]
}

// Targets: [apple]
open class kotbase/DataSource : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLQueryDataSource> { // kotbase/DataSource|null[0]
    final class As : kotbase/DataSource { // kotbase/DataSource.As|null[0]
        final fun as(kotlin/String): kotbase/DataSource // kotbase/DataSource.As.as|as(kotlin.String){}[0]
    }

    final object Companion { // kotbase/DataSource.Companion|null[0]
        final fun collection(kotbase/Collection): kotbase/DataSource.As // kotbase/DataSource.Companion.collection|collection(kotbase.Collection){}[0]
        final fun database(kotbase/Database): kotbase/DataSource.As // kotbase/DataSource.Companion.database|database(kotbase.Database){}[0]
    }
}

// Targets: [apple]
open class kotbase/Dictionary : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLDictionary>, kotbase/DictionaryInterface, kotlin.collections/Iterable<kotlin/String> { // kotbase/Dictionary|null[0]
    open val count // kotbase/Dictionary.count|{}count[0]
        open fun <get-count>(): kotlin/Int // kotbase/Dictionary.count.<get-count>|<get-count>(){}[0]
    open val keys // kotbase/Dictionary.keys|{}keys[0]
        open fun <get-keys>(): kotlin.collections/List<kotlin/String> // kotbase/Dictionary.keys.<get-keys>|<get-keys>(){}[0]

    final fun mutate() // kotbase/Dictionary.mutate|mutate(){}[0]
    final fun toMutable(): kotbase/MutableDictionary // kotbase/Dictionary.toMutable|toMutable(){}[0]
    open fun contains(kotlin/String): kotlin/Boolean // kotbase/Dictionary.contains|contains(kotlin.String){}[0]
    open fun getArray(kotlin/String): kotbase/Array? // kotbase/Dictionary.getArray|getArray(kotlin.String){}[0]
    open fun getBlob(kotlin/String): kotbase/Blob? // kotbase/Dictionary.getBlob|getBlob(kotlin.String){}[0]
    open fun getBoolean(kotlin/String): kotlin/Boolean // kotbase/Dictionary.getBoolean|getBoolean(kotlin.String){}[0]
    open fun getDate(kotlin/String): kotlinx.datetime/Instant? // kotbase/Dictionary.getDate|getDate(kotlin.String){}[0]
    open fun getDictionary(kotlin/String): kotbase/Dictionary? // kotbase/Dictionary.getDictionary|getDictionary(kotlin.String){}[0]
    open fun getDouble(kotlin/String): kotlin/Double // kotbase/Dictionary.getDouble|getDouble(kotlin.String){}[0]
    open fun getFloat(kotlin/String): kotlin/Float // kotbase/Dictionary.getFloat|getFloat(kotlin.String){}[0]
    open fun getInt(kotlin/String): kotlin/Int // kotbase/Dictionary.getInt|getInt(kotlin.String){}[0]
    open fun getLong(kotlin/String): kotlin/Long // kotbase/Dictionary.getLong|getLong(kotlin.String){}[0]
    open fun getNumber(kotlin/String): kotlin/Number? // kotbase/Dictionary.getNumber|getNumber(kotlin.String){}[0]
    open fun getString(kotlin/String): kotlin/String? // kotbase/Dictionary.getString|getString(kotlin.String){}[0]
    open fun getValue(kotlin/String): kotlin/Any? // kotbase/Dictionary.getValue|getValue(kotlin.String){}[0]
    open fun iterator(): kotlin.collections/Iterator<kotlin/String> // kotbase/Dictionary.iterator|iterator(){}[0]
    open fun toJSON(): kotlin/String // kotbase/Dictionary.toJSON|toJSON(){}[0]
    open fun toMap(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // kotbase/Dictionary.toMap|toMap(){}[0]
    open fun toString(): kotlin/String // kotbase/Dictionary.toString|toString(){}[0]
}

// Targets: [apple]
open class kotbase/Document : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLDocument>, kotbase/DictionaryInterface, kotlin.collections/Iterable<kotlin/String> { // kotbase/Document|null[0]
    final val collection // kotbase/Document.collection|{}collection[0]
        final fun <get-collection>(): kotbase/Collection? // kotbase/Document.collection.<get-collection>|<get-collection>(){}[0]
    final val id // kotbase/Document.id|{}id[0]
        final fun <get-id>(): kotlin/String // kotbase/Document.id.<get-id>|<get-id>(){}[0]
    final val revisionID // kotbase/Document.revisionID|{}revisionID[0]
        final fun <get-revisionID>(): kotlin/String? // kotbase/Document.revisionID.<get-revisionID>|<get-revisionID>(){}[0]
    final val sequence // kotbase/Document.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Long // kotbase/Document.sequence.<get-sequence>|<get-sequence>(){}[0]
    open val count // kotbase/Document.count|{}count[0]
        open fun <get-count>(): kotlin/Int // kotbase/Document.count.<get-count>|<get-count>(){}[0]
    open val keys // kotbase/Document.keys|{}keys[0]
        open fun <get-keys>(): kotlin.collections/List<kotlin/String> // kotbase/Document.keys.<get-keys>|<get-keys>(){}[0]

    final fun mutate() // kotbase/Document.mutate|mutate(){}[0]
    open fun contains(kotlin/String): kotlin/Boolean // kotbase/Document.contains|contains(kotlin.String){}[0]
    open fun getArray(kotlin/String): kotbase/Array? // kotbase/Document.getArray|getArray(kotlin.String){}[0]
    open fun getBlob(kotlin/String): kotbase/Blob? // kotbase/Document.getBlob|getBlob(kotlin.String){}[0]
    open fun getBoolean(kotlin/String): kotlin/Boolean // kotbase/Document.getBoolean|getBoolean(kotlin.String){}[0]
    open fun getDate(kotlin/String): kotlinx.datetime/Instant? // kotbase/Document.getDate|getDate(kotlin.String){}[0]
    open fun getDictionary(kotlin/String): kotbase/Dictionary? // kotbase/Document.getDictionary|getDictionary(kotlin.String){}[0]
    open fun getDouble(kotlin/String): kotlin/Double // kotbase/Document.getDouble|getDouble(kotlin.String){}[0]
    open fun getFloat(kotlin/String): kotlin/Float // kotbase/Document.getFloat|getFloat(kotlin.String){}[0]
    open fun getInt(kotlin/String): kotlin/Int // kotbase/Document.getInt|getInt(kotlin.String){}[0]
    open fun getLong(kotlin/String): kotlin/Long // kotbase/Document.getLong|getLong(kotlin.String){}[0]
    open fun getNumber(kotlin/String): kotlin/Number? // kotbase/Document.getNumber|getNumber(kotlin.String){}[0]
    open fun getString(kotlin/String): kotlin/String? // kotbase/Document.getString|getString(kotlin.String){}[0]
    open fun getValue(kotlin/String): kotlin/Any? // kotbase/Document.getValue|getValue(kotlin.String){}[0]
    open fun iterator(): kotlin.collections/Iterator<kotlin/String> // kotbase/Document.iterator|iterator(){}[0]
    open fun toJSON(): kotlin/String // kotbase/Document.toJSON|toJSON(){}[0]
    open fun toMap(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // kotbase/Document.toMap|toMap(){}[0]
    open fun toMutable(): kotbase/MutableDocument // kotbase/Document.toMutable|toMutable(){}[0]
}

// Targets: [apple]
open class kotbase/Expression : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLQueryExpression> { // kotbase/Expression|null[0]
    final fun add(kotbase/Expression): kotbase/Expression // kotbase/Expression.add|add(kotbase.Expression){}[0]
    final fun and(kotbase/Expression): kotbase/Expression // kotbase/Expression.and|and(kotbase.Expression){}[0]
    final fun between(kotbase/Expression, kotbase/Expression): kotbase/Expression // kotbase/Expression.between|between(kotbase.Expression;kotbase.Expression){}[0]
    final fun collate(kotbase/Collation): kotbase/Expression // kotbase/Expression.collate|collate(kotbase.Collation){}[0]
    final fun divide(kotbase/Expression): kotbase/Expression // kotbase/Expression.divide|divide(kotbase.Expression){}[0]
    final fun equalTo(kotbase/Expression): kotbase/Expression // kotbase/Expression.equalTo|equalTo(kotbase.Expression){}[0]
    final fun greaterThan(kotbase/Expression): kotbase/Expression // kotbase/Expression.greaterThan|greaterThan(kotbase.Expression){}[0]
    final fun greaterThanOrEqualTo(kotbase/Expression): kotbase/Expression // kotbase/Expression.greaterThanOrEqualTo|greaterThanOrEqualTo(kotbase.Expression){}[0]
    final fun in(kotlin/Array<out kotbase/Expression>...): kotbase/Expression // kotbase/Expression.in|in(kotlin.Array<out|kotbase.Expression>...){}[0]
    final fun is(kotbase/Expression): kotbase/Expression // kotbase/Expression.is|is(kotbase.Expression){}[0]
    final fun isNot(kotbase/Expression): kotbase/Expression // kotbase/Expression.isNot|isNot(kotbase.Expression){}[0]
    final fun isNotValued(): kotbase/Expression // kotbase/Expression.isNotValued|isNotValued(){}[0]
    final fun isValued(): kotbase/Expression // kotbase/Expression.isValued|isValued(){}[0]
    final fun lessThan(kotbase/Expression): kotbase/Expression // kotbase/Expression.lessThan|lessThan(kotbase.Expression){}[0]
    final fun lessThanOrEqualTo(kotbase/Expression): kotbase/Expression // kotbase/Expression.lessThanOrEqualTo|lessThanOrEqualTo(kotbase.Expression){}[0]
    final fun like(kotbase/Expression): kotbase/Expression // kotbase/Expression.like|like(kotbase.Expression){}[0]
    final fun modulo(kotbase/Expression): kotbase/Expression // kotbase/Expression.modulo|modulo(kotbase.Expression){}[0]
    final fun multiply(kotbase/Expression): kotbase/Expression // kotbase/Expression.multiply|multiply(kotbase.Expression){}[0]
    final fun notEqualTo(kotbase/Expression): kotbase/Expression // kotbase/Expression.notEqualTo|notEqualTo(kotbase.Expression){}[0]
    final fun or(kotbase/Expression): kotbase/Expression // kotbase/Expression.or|or(kotbase.Expression){}[0]
    final fun regex(kotbase/Expression): kotbase/Expression // kotbase/Expression.regex|regex(kotbase.Expression){}[0]
    final fun subtract(kotbase/Expression): kotbase/Expression // kotbase/Expression.subtract|subtract(kotbase.Expression){}[0]

    final object Companion { // kotbase/Expression.Companion|null[0]
        final fun all(): kotbase/PropertyExpression // kotbase/Expression.Companion.all|all(){}[0]
        final fun booleanValue(kotlin/Boolean): kotbase/Expression // kotbase/Expression.Companion.booleanValue|booleanValue(kotlin.Boolean){}[0]
        final fun date(kotlinx.datetime/Instant?): kotbase/Expression // kotbase/Expression.Companion.date|date(kotlinx.datetime.Instant?){}[0]
        final fun doubleValue(kotlin/Double): kotbase/Expression // kotbase/Expression.Companion.doubleValue|doubleValue(kotlin.Double){}[0]
        final fun floatValue(kotlin/Float): kotbase/Expression // kotbase/Expression.Companion.floatValue|floatValue(kotlin.Float){}[0]
        final fun fullTextIndex(kotlin/String): kotbase/FullTextIndexExpression // kotbase/Expression.Companion.fullTextIndex|fullTextIndex(kotlin.String){}[0]
        final fun intValue(kotlin/Int): kotbase/Expression // kotbase/Expression.Companion.intValue|intValue(kotlin.Int){}[0]
        final fun list(kotlin.collections/List<kotlin/Any?>?): kotbase/Expression // kotbase/Expression.Companion.list|list(kotlin.collections.List<kotlin.Any?>?){}[0]
        final fun longValue(kotlin/Long): kotbase/Expression // kotbase/Expression.Companion.longValue|longValue(kotlin.Long){}[0]
        final fun map(kotlin.collections/Map<kotlin/String, kotlin/Any?>?): kotbase/Expression // kotbase/Expression.Companion.map|map(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
        final fun negated(kotbase/Expression): kotbase/Expression // kotbase/Expression.Companion.negated|negated(kotbase.Expression){}[0]
        final fun not(kotbase/Expression): kotbase/Expression // kotbase/Expression.Companion.not|not(kotbase.Expression){}[0]
        final fun number(kotlin/Number?): kotbase/Expression // kotbase/Expression.Companion.number|number(kotlin.Number?){}[0]
        final fun parameter(kotlin/String): kotbase/Expression // kotbase/Expression.Companion.parameter|parameter(kotlin.String){}[0]
        final fun property(kotlin/String): kotbase/PropertyExpression // kotbase/Expression.Companion.property|property(kotlin.String){}[0]
        final fun string(kotlin/String?): kotbase/Expression // kotbase/Expression.Companion.string|string(kotlin.String?){}[0]
        final fun value(kotlin/Any?): kotbase/Expression // kotbase/Expression.Companion.value|value(kotlin.Any?){}[0]
    }
}

// Targets: [apple]
open class kotbase/Join : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLQueryJoin> { // kotbase/Join|null[0]
    final class On : kotbase/Join { // kotbase/Join.On|null[0]
        final fun on(kotbase/Expression): kotbase/Join // kotbase/Join.On.on|on(kotbase.Expression){}[0]
    }

    final object Companion { // kotbase/Join.Companion|null[0]
        final fun crossJoin(kotbase/DataSource): kotbase/Join // kotbase/Join.Companion.crossJoin|crossJoin(kotbase.DataSource){}[0]
        final fun innerJoin(kotbase/DataSource): kotbase/Join.On // kotbase/Join.Companion.innerJoin|innerJoin(kotbase.DataSource){}[0]
        final fun join(kotbase/DataSource): kotbase/Join.On // kotbase/Join.Companion.join|join(kotbase.DataSource){}[0]
        final fun leftJoin(kotbase/DataSource): kotbase/Join.On // kotbase/Join.Companion.leftJoin|leftJoin(kotbase.DataSource){}[0]
        final fun leftOuterJoin(kotbase/DataSource): kotbase/Join.On // kotbase/Join.Companion.leftOuterJoin|leftOuterJoin(kotbase.DataSource){}[0]
    }
}

// Targets: [apple]
open class kotbase/SelectResult : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLQuerySelectResult> { // kotbase/SelectResult|null[0]
    final class As : kotbase/SelectResult { // kotbase/SelectResult.As|null[0]
        final fun as(kotlin/String): kotbase/SelectResult.As // kotbase/SelectResult.As.as|as(kotlin.String){}[0]
    }

    final class From : kotbase/SelectResult { // kotbase/SelectResult.From|null[0]
        final fun from(kotlin/String): kotbase/SelectResult // kotbase/SelectResult.From.from|from(kotlin.String){}[0]
    }

    final object Companion { // kotbase/SelectResult.Companion|null[0]
        final fun all(): kotbase/SelectResult.From // kotbase/SelectResult.Companion.all|all(){}[0]
        final fun expression(kotbase/Expression): kotbase/SelectResult.As // kotbase/SelectResult.Companion.expression|expression(kotbase.Expression){}[0]
        final fun property(kotlin/String): kotbase/SelectResult.As // kotbase/SelectResult.Companion.property|property(kotlin.String){}[0]
    }
}

// Targets: [apple]
sealed class kotbase/Authenticator : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLAuthenticator> // kotbase/Authenticator|null[0]

// Targets: [apple]
sealed class kotbase/Collation : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLQueryCollation> { // kotbase/Collation|null[0]
    final class ASCII : kotbase/Collation { // kotbase/Collation.ASCII|null[0]
        final fun setIgnoreCase(kotlin/Boolean): kotbase/Collation.ASCII // kotbase/Collation.ASCII.setIgnoreCase|setIgnoreCase(kotlin.Boolean){}[0]
    }

    final class Unicode : kotbase/Collation { // kotbase/Collation.Unicode|null[0]
        final fun setIgnoreAccents(kotlin/Boolean): kotbase/Collation.Unicode // kotbase/Collation.Unicode.setIgnoreAccents|setIgnoreAccents(kotlin.Boolean){}[0]
        final fun setIgnoreCase(kotlin/Boolean): kotbase/Collation.Unicode // kotbase/Collation.Unicode.setIgnoreCase|setIgnoreCase(kotlin.Boolean){}[0]
        final fun setLocale(kotlin/String?): kotbase/Collation.Unicode // kotbase/Collation.Unicode.setLocale|setLocale(kotlin.String?){}[0]
    }

    final object Companion { // kotbase/Collation.Companion|null[0]
        final fun ascii(): kotbase/Collation.ASCII // kotbase/Collation.Companion.ascii|ascii(){}[0]
        final fun unicode(): kotbase/Collation.Unicode // kotbase/Collation.Companion.unicode|unicode(){}[0]
    }
}

// Targets: [apple]
sealed class kotbase/Endpoint : kotbase.internal/DelegatedProtocol<cocoapods.CouchbaseLite/CBLEndpointProtocol> // kotbase/Endpoint|null[0]

// Targets: [apple]
sealed class kotbase/Index : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLIndex> // kotbase/Index|null[0]

// Targets: [apple]
sealed class kotbase/IndexConfiguration : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLIndexConfiguration> { // kotbase/IndexConfiguration|null[0]
    final val expressions // kotbase/IndexConfiguration.expressions|{}expressions[0]
        final fun <get-expressions>(): kotlin.collections/List<kotlin/String> // kotbase/IndexConfiguration.expressions.<get-expressions>|<get-expressions>(){}[0]
}

// Targets: [apple]
sealed class kotbase/ListenerToken : kotbase.internal/DelegatedProtocol<cocoapods.CouchbaseLite/CBLListenerTokenProtocol>, kotlin/AutoCloseable { // kotbase/ListenerToken|null[0]
    final fun remove() // kotbase/ListenerToken.remove|remove(){}[0]
    open fun close() // kotbase/ListenerToken.close|close(){}[0]
    open fun removeImpl() // kotbase/ListenerToken.removeImpl|removeImpl(){}[0]
}

// Targets: [apple]
sealed class kotbase/Ordering : kotbase.internal/DelegatedClass<cocoapods.CouchbaseLite/CBLQueryOrdering> { // kotbase/Ordering|null[0]
    final class SortOrder : kotbase/Ordering { // kotbase/Ordering.SortOrder|null[0]
        final fun ascending(): kotbase/Ordering // kotbase/Ordering.SortOrder.ascending|ascending(){}[0]
        final fun descending(): kotbase/Ordering // kotbase/Ordering.SortOrder.descending|descending(){}[0]
    }

    final object Companion { // kotbase/Ordering.Companion|null[0]
        final fun expression(kotbase/Expression): kotbase/Ordering.SortOrder // kotbase/Ordering.Companion.expression|expression(kotbase.Expression){}[0]
        final fun property(kotlin/String): kotbase/Ordering.SortOrder // kotbase/Ordering.Companion.property|property(kotlin.String){}[0]
    }
}

// Targets: [apple]
final var kotbase/pinnedServerSecCertificate // kotbase/pinnedServerSecCertificate|@kotbase.ReplicatorConfiguration{}pinnedServerSecCertificate[0]
    final fun (kotbase/ReplicatorConfiguration).<get-pinnedServerSecCertificate>(): kotlinx.cinterop/CPointer<cnames.structs/__SecCertificate>? // kotbase/pinnedServerSecCertificate.<get-pinnedServerSecCertificate>|<get-pinnedServerSecCertificate>@kotbase.ReplicatorConfiguration(){}[0]
    final fun (kotbase/ReplicatorConfiguration).<set-pinnedServerSecCertificate>(kotlinx.cinterop/CPointer<cnames.structs/__SecCertificate>?) // kotbase/pinnedServerSecCertificate.<set-pinnedServerSecCertificate>|<set-pinnedServerSecCertificate>@kotbase.ReplicatorConfiguration(kotlinx.cinterop.CPointer<cnames.structs.__SecCertificate>?){}[0]

// Targets: [apple]
final fun (kotbase/ReplicatorConfiguration).kotbase/setPinnedServerSecCertificate(kotlinx.cinterop/CPointer<cnames.structs/__SecCertificate>?): kotbase/ReplicatorConfiguration // kotbase/setPinnedServerSecCertificate|setPinnedServerSecCertificate@kotbase.ReplicatorConfiguration(kotlinx.cinterop.CPointer<cnames.structs.__SecCertificate>?){}[0]

// Targets: [apple]
final fun (kotlin/ByteArray).kotbase.ext/toCFData(): kotlinx.cinterop/CPointer<cnames.structs/__CFData> // kotbase.ext/toCFData|toCFData@kotlin.ByteArray(){}[0]

// Targets: [apple]
final fun (kotlin/ByteArray).kotbase.ext/toNSData(): platform.Foundation/NSData // kotbase.ext/toNSData|toNSData@kotlin.ByteArray(){}[0]

// Targets: [apple]
final fun (kotlin/ByteArray).kotbase.ext/toSecCertificate(): kotlinx.cinterop/CPointer<cnames.structs/__SecCertificate> // kotbase.ext/toSecCertificate|toSecCertificate@kotlin.ByteArray(){}[0]

// Targets: [apple]
final fun (kotlin/Exception).kotbase.ext/toNSError(): platform.Foundation/NSError // kotbase.ext/toNSError|toNSError@kotlin.Exception(){}[0]

// Targets: [apple]
final fun (kotlinx.cinterop/CPointer<cnames.structs/__CFData>).kotbase.ext/toByteArray(): kotlin/ByteArray // kotbase.ext/toByteArray|toByteArray@kotlinx.cinterop.CPointer<cnames.structs.__CFData>(){}[0]

// Targets: [apple]
final fun (kotlinx.cinterop/CPointer<cnames.structs/__SecCertificate>).kotbase.ext/toByteArray(): kotlin/ByteArray // kotbase.ext/toByteArray|toByteArray@kotlinx.cinterop.CPointer<cnames.structs.__SecCertificate>(){}[0]

// Targets: [apple]
final fun (platform.Foundation/NSData).kotbase.ext/toByteArray(): kotlin/ByteArray // kotbase.ext/toByteArray|toByteArray@platform.Foundation.NSData(){}[0]

// Targets: [apple]
final fun (platform.Foundation/NSError).kotbase.ext/toException(): kotlin/Exception // kotbase.ext/toException|toException@platform.Foundation.NSError(){}[0]

// Targets: [apple]
final fun <#A: kotlin/Any?, #B: kotlin/Exception> kotbase.ext/wrapError(kotlin/Function1<platform.Foundation/NSError, #B>, kotlin/Function1<kotlinx.cinterop/CPointer<kotlinx.cinterop/ObjCObjectVar<platform.Foundation/NSError?>>, #A>): #A // kotbase.ext/wrapError|wrapError(kotlin.Function1<platform.Foundation.NSError,0:1>;kotlin.Function1<kotlinx.cinterop.CPointer<kotlinx.cinterop.ObjCObjectVar<platform.Foundation.NSError?>>,0:0>){0§<kotlin.Any?>;1§<kotlin.Exception>}[0]

// Targets: [apple]
final fun <#A: kotlin/Any?> kotbase.ext/wrapError(kotlin/Function1<kotlinx.cinterop/CPointer<kotlinx.cinterop/ObjCObjectVar<platform.Foundation/NSError?>>, #A>): #A // kotbase.ext/wrapError|wrapError(kotlin.Function1<kotlinx.cinterop.CPointer<kotlinx.cinterop.ObjCObjectVar<platform.Foundation.NSError?>>,0:0>){0§<kotlin.Any?>}[0]

// Targets: [linux, mingwX64]
final class kotbase/Blob { // kotbase/Blob|null[0]
    constructor <init>(kotlin/String, kotlin/ByteArray) // kotbase/Blob.<init>|<init>(kotlin.String;kotlin.ByteArray){}[0]
    constructor <init>(kotlin/String, kotlin/String) // kotbase/Blob.<init>|<init>(kotlin.String;kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlinx.io/Source) // kotbase/Blob.<init>|<init>(kotlin.String;kotlinx.io.Source){}[0]

    final val content // kotbase/Blob.content|{}content[0]
        final fun <get-content>(): kotlin/ByteArray? // kotbase/Blob.content.<get-content>|<get-content>(){}[0]
    final val contentStream // kotbase/Blob.contentStream|{}contentStream[0]
        final fun <get-contentStream>(): kotlinx.io/Source? // kotbase/Blob.contentStream.<get-contentStream>|<get-contentStream>(){}[0]
    final val contentType // kotbase/Blob.contentType|{}contentType[0]
        final fun <get-contentType>(): kotlin/String // kotbase/Blob.contentType.<get-contentType>|<get-contentType>(){}[0]
    final val digest // kotbase/Blob.digest|{}digest[0]
        final fun <get-digest>(): kotlin/String? // kotbase/Blob.digest.<get-digest>|<get-digest>(){}[0]
    final val length // kotbase/Blob.length|{}length[0]
        final fun <get-length>(): kotlin/Long // kotbase/Blob.length.<get-length>|<get-length>(){}[0]
    final val properties // kotbase/Blob.properties|{}properties[0]
        final fun <get-properties>(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // kotbase/Blob.properties.<get-properties>|<get-properties>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotbase/Blob.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotbase/Blob.hashCode|hashCode(){}[0]
    final fun toJSON(): kotlin/String // kotbase/Blob.toJSON|toJSON(){}[0]
    final fun toString(): kotlin/String // kotbase/Blob.toString|toString(){}[0]

    final object Companion { // kotbase/Blob.Companion|null[0]
        final fun isBlob(kotlin.collections/Map<kotlin/String, kotlin/Any?>?): kotlin/Boolean // kotbase/Blob.Companion.isBlob|isBlob(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
    }
}

// Targets: [linux, mingwX64]
final class kotbase/Collection : kotlin/AutoCloseable { // kotbase/Collection|null[0]
    final val count // kotbase/Collection.count|{}count[0]
        final fun <get-count>(): kotlin/Long // kotbase/Collection.count.<get-count>|<get-count>(){}[0]
    final val database // kotbase/Collection.database|{}database[0]
        final fun <get-database>(): kotbase/Database // kotbase/Collection.database.<get-database>|<get-database>(){}[0]
    final val fullName // kotbase/Collection.fullName|{}fullName[0]
        final fun <get-fullName>(): kotlin/String // kotbase/Collection.fullName.<get-fullName>|<get-fullName>(){}[0]
    final val indexes // kotbase/Collection.indexes|{}indexes[0]
        final fun <get-indexes>(): kotlin.collections/Set<kotlin/String> // kotbase/Collection.indexes.<get-indexes>|<get-indexes>(){}[0]
    final val name // kotbase/Collection.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotbase/Collection.name.<get-name>|<get-name>(){}[0]
    final val scope // kotbase/Collection.scope|{}scope[0]
        final fun <get-scope>(): kotbase/Scope // kotbase/Collection.scope.<get-scope>|<get-scope>(){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/CollectionChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Collection.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.CollectionChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/CollectionChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Collection.addChangeListener|addChangeListener(kotlin.Function1<kotbase.CollectionChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/CollectionChange, kotlin/Unit>) // kotbase/Collection.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.CollectionChange,kotlin.Unit>){}[0]
    final fun addDocumentChangeListener(kotlin/String, kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/DocumentChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Collection.addDocumentChangeListener|addDocumentChangeListener(kotlin.String;kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.DocumentChange,kotlin.Unit>){}[0]
    final fun addDocumentChangeListener(kotlin/String, kotlin/Function1<kotbase/DocumentChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Collection.addDocumentChangeListener|addDocumentChangeListener(kotlin.String;kotlin.Function1<kotbase.DocumentChange,kotlin.Unit>){}[0]
    final fun addDocumentChangeListener(kotlin/String, kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/DocumentChange, kotlin/Unit>) // kotbase/Collection.addDocumentChangeListener|addDocumentChangeListener(kotlin.String;kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.DocumentChange,kotlin.Unit>){}[0]
    final fun close() // kotbase/Collection.close|close(){}[0]
    final fun createIndex(kotlin/String, kotbase/Index) // kotbase/Collection.createIndex|createIndex(kotlin.String;kotbase.Index){}[0]
    final fun createIndex(kotlin/String, kotbase/IndexConfiguration) // kotbase/Collection.createIndex|createIndex(kotlin.String;kotbase.IndexConfiguration){}[0]
    final fun delete(kotbase/Document) // kotbase/Collection.delete|delete(kotbase.Document){}[0]
    final fun delete(kotbase/Document, kotbase/ConcurrencyControl): kotlin/Boolean // kotbase/Collection.delete|delete(kotbase.Document;kotbase.ConcurrencyControl){}[0]
    final fun deleteIndex(kotlin/String) // kotbase/Collection.deleteIndex|deleteIndex(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotbase/Collection.equals|equals(kotlin.Any?){}[0]
    final fun getDocument(kotlin/String): kotbase/Document? // kotbase/Collection.getDocument|getDocument(kotlin.String){}[0]
    final fun getDocumentExpiration(kotlin/String): kotlinx.datetime/Instant? // kotbase/Collection.getDocumentExpiration|getDocumentExpiration(kotlin.String){}[0]
    final fun getIndex(kotlin/String): kotbase/QueryIndex? // kotbase/Collection.getIndex|getIndex(kotlin.String){}[0]
    final fun hashCode(): kotlin/Int // kotbase/Collection.hashCode|hashCode(){}[0]
    final fun purge(kotbase/Document) // kotbase/Collection.purge|purge(kotbase.Document){}[0]
    final fun purge(kotlin/String) // kotbase/Collection.purge|purge(kotlin.String){}[0]
    final fun save(kotbase/MutableDocument) // kotbase/Collection.save|save(kotbase.MutableDocument){}[0]
    final fun save(kotbase/MutableDocument, kotbase/ConcurrencyControl): kotlin/Boolean // kotbase/Collection.save|save(kotbase.MutableDocument;kotbase.ConcurrencyControl){}[0]
    final fun save(kotbase/MutableDocument, kotlin/Function2<kotbase/MutableDocument, kotbase/Document?, kotlin/Boolean>): kotlin/Boolean // kotbase/Collection.save|save(kotbase.MutableDocument;kotlin.Function2<kotbase.MutableDocument,kotbase.Document?,kotlin.Boolean>){}[0]
    final fun setDocumentExpiration(kotlin/String, kotlinx.datetime/Instant?) // kotbase/Collection.setDocumentExpiration|setDocumentExpiration(kotlin.String;kotlinx.datetime.Instant?){}[0]
    final fun toString(): kotlin/String // kotbase/Collection.toString|toString(){}[0]

    final object Companion // kotbase/Collection.Companion|null[0]
}

// Targets: [linux, mingwX64]
final class kotbase/CollectionChange { // kotbase/CollectionChange|null[0]
    final val collection // kotbase/CollectionChange.collection|{}collection[0]
        final fun <get-collection>(): kotbase/Collection // kotbase/CollectionChange.collection.<get-collection>|<get-collection>(){}[0]
    final val documentIDs // kotbase/CollectionChange.documentIDs|{}documentIDs[0]
        final fun <get-documentIDs>(): kotlin.collections/List<kotlin/String> // kotbase/CollectionChange.documentIDs.<get-documentIDs>|<get-documentIDs>(){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/CollectionConfiguration { // kotbase/CollectionConfiguration|null[0]
    constructor <init>(kotlin.collections/List<kotlin/String>? = ..., kotlin.collections/List<kotlin/String>? = ..., kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? = ..., kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? = ..., kotlin/Function1<kotbase/Conflict, kotbase/Document?>? = ...) // kotbase/CollectionConfiguration.<init>|<init>(kotlin.collections.List<kotlin.String>?;kotlin.collections.List<kotlin.String>?;kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?;kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?;kotlin.Function1<kotbase.Conflict,kotbase.Document?>?){}[0]

    final var channels // kotbase/CollectionConfiguration.channels|{}channels[0]
        final fun <get-channels>(): kotlin.collections/List<kotlin/String>? // kotbase/CollectionConfiguration.channels.<get-channels>|<get-channels>(){}[0]
        final fun <set-channels>(kotlin.collections/List<kotlin/String>?) // kotbase/CollectionConfiguration.channels.<set-channels>|<set-channels>(kotlin.collections.List<kotlin.String>?){}[0]
    final var conflictResolver // kotbase/CollectionConfiguration.conflictResolver|{}conflictResolver[0]
        final fun <get-conflictResolver>(): kotlin/Function1<kotbase/Conflict, kotbase/Document?>? // kotbase/CollectionConfiguration.conflictResolver.<get-conflictResolver>|<get-conflictResolver>(){}[0]
        final fun <set-conflictResolver>(kotlin/Function1<kotbase/Conflict, kotbase/Document?>?) // kotbase/CollectionConfiguration.conflictResolver.<set-conflictResolver>|<set-conflictResolver>(kotlin.Function1<kotbase.Conflict,kotbase.Document?>?){}[0]
    final var documentIDs // kotbase/CollectionConfiguration.documentIDs|{}documentIDs[0]
        final fun <get-documentIDs>(): kotlin.collections/List<kotlin/String>? // kotbase/CollectionConfiguration.documentIDs.<get-documentIDs>|<get-documentIDs>(){}[0]
        final fun <set-documentIDs>(kotlin.collections/List<kotlin/String>?) // kotbase/CollectionConfiguration.documentIDs.<set-documentIDs>|<set-documentIDs>(kotlin.collections.List<kotlin.String>?){}[0]
    final var pullFilter // kotbase/CollectionConfiguration.pullFilter|{}pullFilter[0]
        final fun <get-pullFilter>(): kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? // kotbase/CollectionConfiguration.pullFilter.<get-pullFilter>|<get-pullFilter>(){}[0]
        final fun <set-pullFilter>(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?) // kotbase/CollectionConfiguration.pullFilter.<set-pullFilter>|<set-pullFilter>(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
    final var pushFilter // kotbase/CollectionConfiguration.pushFilter|{}pushFilter[0]
        final fun <get-pushFilter>(): kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? // kotbase/CollectionConfiguration.pushFilter.<get-pushFilter>|<get-pushFilter>(){}[0]
        final fun <set-pushFilter>(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?) // kotbase/CollectionConfiguration.pushFilter.<set-pushFilter>|<set-pushFilter>(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]

    final fun setChannels(kotlin.collections/List<kotlin/String>?): kotbase/CollectionConfiguration // kotbase/CollectionConfiguration.setChannels|setChannels(kotlin.collections.List<kotlin.String>?){}[0]
    final fun setConflictResolver(kotlin/Function1<kotbase/Conflict, kotbase/Document?>?): kotbase/CollectionConfiguration // kotbase/CollectionConfiguration.setConflictResolver|setConflictResolver(kotlin.Function1<kotbase.Conflict,kotbase.Document?>?){}[0]
    final fun setDocumentIDs(kotlin.collections/List<kotlin/String>?): kotbase/CollectionConfiguration // kotbase/CollectionConfiguration.setDocumentIDs|setDocumentIDs(kotlin.collections.List<kotlin.String>?){}[0]
    final fun setPullFilter(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?): kotbase/CollectionConfiguration // kotbase/CollectionConfiguration.setPullFilter|setPullFilter(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
    final fun setPushFilter(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?): kotbase/CollectionConfiguration // kotbase/CollectionConfiguration.setPushFilter|setPushFilter(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/Conflict { // kotbase/Conflict|null[0]
    final val documentId // kotbase/Conflict.documentId|{}documentId[0]
        final fun <get-documentId>(): kotlin/String // kotbase/Conflict.documentId.<get-documentId>|<get-documentId>(){}[0]
    final val localDocument // kotbase/Conflict.localDocument|{}localDocument[0]
        final fun <get-localDocument>(): kotbase/Document? // kotbase/Conflict.localDocument.<get-localDocument>|<get-localDocument>(){}[0]
    final val remoteDocument // kotbase/Conflict.remoteDocument|{}remoteDocument[0]
        final fun <get-remoteDocument>(): kotbase/Document? // kotbase/Conflict.remoteDocument.<get-remoteDocument>|<get-remoteDocument>(){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/ConsoleLogger : kotbase/Logger { // kotbase/ConsoleLogger|null[0]
    final var domains // kotbase/ConsoleLogger.domains|{}domains[0]
        final fun <get-domains>(): kotlin.collections/Set<kotbase/LogDomain> // kotbase/ConsoleLogger.domains.<get-domains>|<get-domains>(){}[0]
        final fun <set-domains>(kotlin.collections/Set<kotbase/LogDomain>) // kotbase/ConsoleLogger.domains.<set-domains>|<set-domains>(kotlin.collections.Set<kotbase.LogDomain>){}[0]
    final var level // kotbase/ConsoleLogger.level|{}level[0]
        final fun <get-level>(): kotbase/LogLevel // kotbase/ConsoleLogger.level.<get-level>|<get-level>(){}[0]
        final fun <set-level>(kotbase/LogLevel) // kotbase/ConsoleLogger.level.<set-level>|<set-level>(kotbase.LogLevel){}[0]

    final fun log(kotbase/LogLevel, kotbase/LogDomain, kotlin/String) // kotbase/ConsoleLogger.log|log(kotbase.LogLevel;kotbase.LogDomain;kotlin.String){}[0]
    final fun setDomains(kotlin/Array<out kotbase/LogDomain>...) // kotbase/ConsoleLogger.setDomains|setDomains(kotlin.Array<out|kotbase.LogDomain>...){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/Database : kotlin/AutoCloseable { // kotbase/Database|null[0]
    constructor <init>(kotlin/String) // kotbase/Database.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotbase/DatabaseConfiguration) // kotbase/Database.<init>|<init>(kotlin.String;kotbase.DatabaseConfiguration){}[0]

    final val collections // kotbase/Database.collections|{}collections[0]
        final fun <get-collections>(): kotlin.collections/Set<kotbase/Collection> // kotbase/Database.collections.<get-collections>|<get-collections>(){}[0]
    final val config // kotbase/Database.config|{}config[0]
        final fun <get-config>(): kotbase/DatabaseConfiguration // kotbase/Database.config.<get-config>|<get-config>(){}[0]
    final val count // kotbase/Database.count|{}count[0]
        final fun <get-count>(): kotlin/Long // kotbase/Database.count.<get-count>|<get-count>(){}[0]
    final val defaultCollection // kotbase/Database.defaultCollection|{}defaultCollection[0]
        final fun <get-defaultCollection>(): kotbase/Collection // kotbase/Database.defaultCollection.<get-defaultCollection>|<get-defaultCollection>(){}[0]
    final val defaultScope // kotbase/Database.defaultScope|{}defaultScope[0]
        final fun <get-defaultScope>(): kotbase/Scope // kotbase/Database.defaultScope.<get-defaultScope>|<get-defaultScope>(){}[0]
    final val indexes // kotbase/Database.indexes|{}indexes[0]
        final fun <get-indexes>(): kotlin.collections/List<kotlin/String> // kotbase/Database.indexes.<get-indexes>|<get-indexes>(){}[0]
    final val name // kotbase/Database.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotbase/Database.name.<get-name>|<get-name>(){}[0]
    final val path // kotbase/Database.path|{}path[0]
        final fun <get-path>(): kotlin/String? // kotbase/Database.path.<get-path>|<get-path>(){}[0]
    final val scopes // kotbase/Database.scopes|{}scopes[0]
        final fun <get-scopes>(): kotlin.collections/Set<kotbase/Scope> // kotbase/Database.scopes.<get-scopes>|<get-scopes>(){}[0]

    final fun <#A1: kotlin/Any?> inBatch(kotlin/Function1<kotbase/Database, #A1>): #A1 // kotbase/Database.inBatch|inBatch(kotlin.Function1<kotbase.Database,0:0>){0§<kotlin.Any?>}[0]
    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/DatabaseChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Database.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.DatabaseChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/DatabaseChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Database.addChangeListener|addChangeListener(kotlin.Function1<kotbase.DatabaseChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/DatabaseChange, kotlin/Unit>) // kotbase/Database.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.DatabaseChange,kotlin.Unit>){}[0]
    final fun addDocumentChangeListener(kotlin/String, kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/DocumentChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Database.addDocumentChangeListener|addDocumentChangeListener(kotlin.String;kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.DocumentChange,kotlin.Unit>){}[0]
    final fun addDocumentChangeListener(kotlin/String, kotlin/Function1<kotbase/DocumentChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Database.addDocumentChangeListener|addDocumentChangeListener(kotlin.String;kotlin.Function1<kotbase.DocumentChange,kotlin.Unit>){}[0]
    final fun addDocumentChangeListener(kotlin/String, kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/DocumentChange, kotlin/Unit>) // kotbase/Database.addDocumentChangeListener|addDocumentChangeListener(kotlin.String;kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.DocumentChange,kotlin.Unit>){}[0]
    final fun close() // kotbase/Database.close|close(){}[0]
    final fun createCollection(kotlin/String): kotbase/Collection // kotbase/Database.createCollection|createCollection(kotlin.String){}[0]
    final fun createCollection(kotlin/String, kotlin/String?): kotbase/Collection // kotbase/Database.createCollection|createCollection(kotlin.String;kotlin.String?){}[0]
    final fun createIndex(kotlin/String, kotbase/Index) // kotbase/Database.createIndex|createIndex(kotlin.String;kotbase.Index){}[0]
    final fun createIndex(kotlin/String, kotbase/IndexConfiguration) // kotbase/Database.createIndex|createIndex(kotlin.String;kotbase.IndexConfiguration){}[0]
    final fun createQuery(kotlin/String): kotbase/Query // kotbase/Database.createQuery|createQuery(kotlin.String){}[0]
    final fun delete() // kotbase/Database.delete|delete(){}[0]
    final fun delete(kotbase/Document) // kotbase/Database.delete|delete(kotbase.Document){}[0]
    final fun delete(kotbase/Document, kotbase/ConcurrencyControl): kotlin/Boolean // kotbase/Database.delete|delete(kotbase.Document;kotbase.ConcurrencyControl){}[0]
    final fun deleteCollection(kotlin/String) // kotbase/Database.deleteCollection|deleteCollection(kotlin.String){}[0]
    final fun deleteCollection(kotlin/String, kotlin/String?) // kotbase/Database.deleteCollection|deleteCollection(kotlin.String;kotlin.String?){}[0]
    final fun deleteIndex(kotlin/String) // kotbase/Database.deleteIndex|deleteIndex(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotbase/Database.equals|equals(kotlin.Any?){}[0]
    final fun getCollection(kotlin/String): kotbase/Collection? // kotbase/Database.getCollection|getCollection(kotlin.String){}[0]
    final fun getCollection(kotlin/String, kotlin/String?): kotbase/Collection? // kotbase/Database.getCollection|getCollection(kotlin.String;kotlin.String?){}[0]
    final fun getCollections(kotlin/String?): kotlin.collections/Set<kotbase/Collection> // kotbase/Database.getCollections|getCollections(kotlin.String?){}[0]
    final fun getDocument(kotlin/String): kotbase/Document? // kotbase/Database.getDocument|getDocument(kotlin.String){}[0]
    final fun getDocumentExpiration(kotlin/String): kotlinx.datetime/Instant? // kotbase/Database.getDocumentExpiration|getDocumentExpiration(kotlin.String){}[0]
    final fun getScope(kotlin/String): kotbase/Scope? // kotbase/Database.getScope|getScope(kotlin.String){}[0]
    final fun hashCode(): kotlin/Int // kotbase/Database.hashCode|hashCode(){}[0]
    final fun performMaintenance(kotbase/MaintenanceType): kotlin/Boolean // kotbase/Database.performMaintenance|performMaintenance(kotbase.MaintenanceType){}[0]
    final fun purge(kotbase/Document) // kotbase/Database.purge|purge(kotbase.Document){}[0]
    final fun purge(kotlin/String) // kotbase/Database.purge|purge(kotlin.String){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Database.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
    final fun save(kotbase/MutableDocument) // kotbase/Database.save|save(kotbase.MutableDocument){}[0]
    final fun save(kotbase/MutableDocument, kotbase/ConcurrencyControl): kotlin/Boolean // kotbase/Database.save|save(kotbase.MutableDocument;kotbase.ConcurrencyControl){}[0]
    final fun save(kotbase/MutableDocument, kotlin/Function2<kotbase/MutableDocument, kotbase/Document?, kotlin/Boolean>): kotlin/Boolean // kotbase/Database.save|save(kotbase.MutableDocument;kotlin.Function2<kotbase.MutableDocument,kotbase.Document?,kotlin.Boolean>){}[0]
    final fun setDocumentExpiration(kotlin/String, kotlinx.datetime/Instant?) // kotbase/Database.setDocumentExpiration|setDocumentExpiration(kotlin.String;kotlinx.datetime.Instant?){}[0]
    final fun toString(): kotlin/String // kotbase/Database.toString|toString(){}[0]

    final object Companion { // kotbase/Database.Companion|null[0]
        final val log // kotbase/Database.Companion.log|{}log[0]
            final fun <get-log>(): kotbase/Log // kotbase/Database.Companion.log.<get-log>|<get-log>(){}[0]

        final fun copy(kotlin/String, kotlin/String, kotbase/DatabaseConfiguration? = ...) // kotbase/Database.Companion.copy|copy(kotlin.String;kotlin.String;kotbase.DatabaseConfiguration?){}[0]
        final fun delete(kotlin/String, kotlin/String? = ...) // kotbase/Database.Companion.delete|delete(kotlin.String;kotlin.String?){}[0]
        final fun exists(kotlin/String, kotlin/String? = ...): kotlin/Boolean // kotbase/Database.Companion.exists|exists(kotlin.String;kotlin.String?){}[0]
    }
}

// Targets: [linux, mingwX64]
final class kotbase/DatabaseChange { // kotbase/DatabaseChange|null[0]
    final val database // kotbase/DatabaseChange.database|{}database[0]
        final fun <get-database>(): kotbase/Database // kotbase/DatabaseChange.database.<get-database>|<get-database>(){}[0]
    final val documentIDs // kotbase/DatabaseChange.documentIDs|{}documentIDs[0]
        final fun <get-documentIDs>(): kotlin.collections/List<kotlin/String> // kotbase/DatabaseChange.documentIDs.<get-documentIDs>|<get-documentIDs>(){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/DatabaseConfiguration { // kotbase/DatabaseConfiguration|null[0]
    constructor <init>() // kotbase/DatabaseConfiguration.<init>|<init>(){}[0]
    constructor <init>(kotbase/DatabaseConfiguration?) // kotbase/DatabaseConfiguration.<init>|<init>(kotbase.DatabaseConfiguration?){}[0]

    final var directory // kotbase/DatabaseConfiguration.directory|{}directory[0]
        final fun <get-directory>(): kotlin/String // kotbase/DatabaseConfiguration.directory.<get-directory>|<get-directory>(){}[0]
        final fun <set-directory>(kotlin/String) // kotbase/DatabaseConfiguration.directory.<set-directory>|<set-directory>(kotlin.String){}[0]
    final var isFullSync // kotbase/DatabaseConfiguration.isFullSync|{}isFullSync[0]
        final fun <get-isFullSync>(): kotlin/Boolean // kotbase/DatabaseConfiguration.isFullSync.<get-isFullSync>|<get-isFullSync>(){}[0]
        final fun <set-isFullSync>(kotlin/Boolean) // kotbase/DatabaseConfiguration.isFullSync.<set-isFullSync>|<set-isFullSync>(kotlin.Boolean){}[0]
    final var isMMapEnabled // kotbase/DatabaseConfiguration.isMMapEnabled|{}isMMapEnabled[0]
        final fun <get-isMMapEnabled>(): kotlin/Boolean // kotbase/DatabaseConfiguration.isMMapEnabled.<get-isMMapEnabled>|<get-isMMapEnabled>(){}[0]
        final fun <set-isMMapEnabled>(kotlin/Boolean) // kotbase/DatabaseConfiguration.isMMapEnabled.<set-isMMapEnabled>|<set-isMMapEnabled>(kotlin.Boolean){}[0]

    final fun setDirectory(kotlin/String): kotbase/DatabaseConfiguration // kotbase/DatabaseConfiguration.setDirectory|setDirectory(kotlin.String){}[0]
    final fun setFullSync(kotlin/Boolean): kotbase/DatabaseConfiguration // kotbase/DatabaseConfiguration.setFullSync|setFullSync(kotlin.Boolean){}[0]
    final fun setMMapEnabled(kotlin/Boolean): kotbase/DatabaseConfiguration // kotbase/DatabaseConfiguration.setMMapEnabled|setMMapEnabled(kotlin.Boolean){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/DocumentChange { // kotbase/DocumentChange|null[0]
    final val collection // kotbase/DocumentChange.collection|{}collection[0]
        final fun <get-collection>(): kotbase/Collection // kotbase/DocumentChange.collection.<get-collection>|<get-collection>(){}[0]
    final val database // kotbase/DocumentChange.database|{}database[0]
        final fun <get-database>(): kotbase/Database // kotbase/DocumentChange.database.<get-database>|<get-database>(){}[0]
    final val documentID // kotbase/DocumentChange.documentID|{}documentID[0]
        final fun <get-documentID>(): kotlin/String // kotbase/DocumentChange.documentID.<get-documentID>|<get-documentID>(){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/DocumentReplication { // kotbase/DocumentReplication|null[0]
    final val documents // kotbase/DocumentReplication.documents|{}documents[0]
        final fun <get-documents>(): kotlin.collections/List<kotbase/ReplicatedDocument> // kotbase/DocumentReplication.documents.<get-documents>|<get-documents>(){}[0]
    final val isPush // kotbase/DocumentReplication.isPush|{}isPush[0]
        final fun <get-isPush>(): kotlin/Boolean // kotbase/DocumentReplication.isPush.<get-isPush>|<get-isPush>(){}[0]
    final val replicator // kotbase/DocumentReplication.replicator|{}replicator[0]
        final fun <get-replicator>(): kotbase/Replicator // kotbase/DocumentReplication.replicator.<get-replicator>|<get-replicator>(){}[0]

    final fun toString(): kotlin/String // kotbase/DocumentReplication.toString|toString(){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/FileLogger : kotbase/Logger { // kotbase/FileLogger|null[0]
    final var config // kotbase/FileLogger.config|{}config[0]
        final fun <get-config>(): kotbase/LogFileConfiguration? // kotbase/FileLogger.config.<get-config>|<get-config>(){}[0]
        final fun <set-config>(kotbase/LogFileConfiguration?) // kotbase/FileLogger.config.<set-config>|<set-config>(kotbase.LogFileConfiguration?){}[0]
    final var level // kotbase/FileLogger.level|{}level[0]
        final fun <get-level>(): kotbase/LogLevel // kotbase/FileLogger.level.<get-level>|<get-level>(){}[0]
        final fun <set-level>(kotbase/LogLevel) // kotbase/FileLogger.level.<set-level>|<set-level>(kotbase.LogLevel){}[0]

    final fun log(kotbase/LogLevel, kotbase/LogDomain, kotlin/String) // kotbase/FileLogger.log|log(kotbase.LogLevel;kotbase.LogDomain;kotlin.String){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/From : kotbase/GroupByRouter, kotbase/JoinRouter, kotbase/LimitRouter, kotbase/OrderByRouter, kotbase/Query, kotbase/WhereRouter { // kotbase/From|null[0]
    final var parameters // kotbase/From.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/From.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/From.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/From.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/From.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/From.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/From.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/From.explain|explain(){}[0]
    final fun groupBy(kotlin/Array<out kotbase/Expression>...): kotbase/GroupBy // kotbase/From.groupBy|groupBy(kotlin.Array<out|kotbase.Expression>...){}[0]
    final fun join(kotlin/Array<out kotbase/Join>...): kotbase/Joins // kotbase/From.join|join(kotlin.Array<out|kotbase.Join>...){}[0]
    final fun limit(kotbase/Expression): kotbase/Limit // kotbase/From.limit|limit(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression, kotbase/Expression?): kotbase/Limit // kotbase/From.limit|limit(kotbase.Expression;kotbase.Expression?){}[0]
    final fun orderBy(kotlin/Array<out kotbase/Ordering>...): kotbase/OrderBy // kotbase/From.orderBy|orderBy(kotlin.Array<out|kotbase.Ordering>...){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/From.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
    final fun where(kotbase/Expression): kotbase/Where // kotbase/From.where|where(kotbase.Expression){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/FullTextIndexItem { // kotbase/FullTextIndexItem|null[0]
    final object Companion { // kotbase/FullTextIndexItem.Companion|null[0]
        final fun property(kotlin/String): kotbase/FullTextIndexItem // kotbase/FullTextIndexItem.Companion.property|property(kotlin.String){}[0]
    }
}

// Targets: [linux, mingwX64]
final class kotbase/GroupBy : kotbase/HavingRouter, kotbase/LimitRouter, kotbase/OrderByRouter, kotbase/Query { // kotbase/GroupBy|null[0]
    final var parameters // kotbase/GroupBy.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/GroupBy.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/GroupBy.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/GroupBy.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/GroupBy.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/GroupBy.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/GroupBy.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/GroupBy.explain|explain(){}[0]
    final fun having(kotbase/Expression): kotbase/Having // kotbase/GroupBy.having|having(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression): kotbase/Limit // kotbase/GroupBy.limit|limit(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression, kotbase/Expression?): kotbase/Limit // kotbase/GroupBy.limit|limit(kotbase.Expression;kotbase.Expression?){}[0]
    final fun orderBy(kotlin/Array<out kotbase/Ordering>...): kotbase/OrderBy // kotbase/GroupBy.orderBy|orderBy(kotlin.Array<out|kotbase.Ordering>...){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/GroupBy.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/Having : kotbase/LimitRouter, kotbase/OrderByRouter, kotbase/Query { // kotbase/Having|null[0]
    final var parameters // kotbase/Having.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/Having.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/Having.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Having.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Having.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/Having.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/Having.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/Having.explain|explain(){}[0]
    final fun limit(kotbase/Expression): kotbase/Limit // kotbase/Having.limit|limit(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression, kotbase/Expression?): kotbase/Limit // kotbase/Having.limit|limit(kotbase.Expression;kotbase.Expression?){}[0]
    final fun orderBy(kotlin/Array<out kotbase/Ordering>...): kotbase/OrderBy // kotbase/Having.orderBy|orderBy(kotlin.Array<out|kotbase.Ordering>...){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Having.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/Joins : kotbase/LimitRouter, kotbase/OrderByRouter, kotbase/Query, kotbase/WhereRouter { // kotbase/Joins|null[0]
    final var parameters // kotbase/Joins.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/Joins.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/Joins.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Joins.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Joins.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/Joins.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/Joins.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/Joins.explain|explain(){}[0]
    final fun limit(kotbase/Expression): kotbase/Limit // kotbase/Joins.limit|limit(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression, kotbase/Expression?): kotbase/Limit // kotbase/Joins.limit|limit(kotbase.Expression;kotbase.Expression?){}[0]
    final fun orderBy(kotlin/Array<out kotbase/Ordering>...): kotbase/OrderBy // kotbase/Joins.orderBy|orderBy(kotlin.Array<out|kotbase.Ordering>...){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Joins.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
    final fun where(kotbase/Expression): kotbase/Where // kotbase/Joins.where|where(kotbase.Expression){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/Limit : kotbase/Query { // kotbase/Limit|null[0]
    final var parameters // kotbase/Limit.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/Limit.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/Limit.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Limit.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Limit.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/Limit.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/Limit.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/Limit.explain|explain(){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Limit.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/Log { // kotbase/Log|null[0]
    final val console // kotbase/Log.console|{}console[0]
        final fun <get-console>(): kotbase/ConsoleLogger // kotbase/Log.console.<get-console>|<get-console>(){}[0]
    final val file // kotbase/Log.file|{}file[0]
        final fun <get-file>(): kotbase/FileLogger // kotbase/Log.file.<get-file>|<get-file>(){}[0]

    final var custom // kotbase/Log.custom|{}custom[0]
        final fun <get-custom>(): kotbase/Logger? // kotbase/Log.custom.<get-custom>|<get-custom>(){}[0]
        final fun <set-custom>(kotbase/Logger?) // kotbase/Log.custom.<set-custom>|<set-custom>(kotbase.Logger?){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/LogFileConfiguration { // kotbase/LogFileConfiguration|null[0]
    constructor <init>(kotbase/LogFileConfiguration) // kotbase/LogFileConfiguration.<init>|<init>(kotbase.LogFileConfiguration){}[0]
    constructor <init>(kotlin/String) // kotbase/LogFileConfiguration.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotbase/LogFileConfiguration?) // kotbase/LogFileConfiguration.<init>|<init>(kotlin.String;kotbase.LogFileConfiguration?){}[0]

    final val directory // kotbase/LogFileConfiguration.directory|{}directory[0]
        final fun <get-directory>(): kotlin/String // kotbase/LogFileConfiguration.directory.<get-directory>|<get-directory>(){}[0]

    final var maxRotateCount // kotbase/LogFileConfiguration.maxRotateCount|{}maxRotateCount[0]
        final fun <get-maxRotateCount>(): kotlin/Int // kotbase/LogFileConfiguration.maxRotateCount.<get-maxRotateCount>|<get-maxRotateCount>(){}[0]
        final fun <set-maxRotateCount>(kotlin/Int) // kotbase/LogFileConfiguration.maxRotateCount.<set-maxRotateCount>|<set-maxRotateCount>(kotlin.Int){}[0]
    final var maxSize // kotbase/LogFileConfiguration.maxSize|{}maxSize[0]
        final fun <get-maxSize>(): kotlin/Long // kotbase/LogFileConfiguration.maxSize.<get-maxSize>|<get-maxSize>(){}[0]
        final fun <set-maxSize>(kotlin/Long) // kotbase/LogFileConfiguration.maxSize.<set-maxSize>|<set-maxSize>(kotlin.Long){}[0]
    final var usesPlaintext // kotbase/LogFileConfiguration.usesPlaintext|{}usesPlaintext[0]
        final fun <get-usesPlaintext>(): kotlin/Boolean // kotbase/LogFileConfiguration.usesPlaintext.<get-usesPlaintext>|<get-usesPlaintext>(){}[0]
        final fun <set-usesPlaintext>(kotlin/Boolean) // kotbase/LogFileConfiguration.usesPlaintext.<set-usesPlaintext>|<set-usesPlaintext>(kotlin.Boolean){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotbase/LogFileConfiguration.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // kotbase/LogFileConfiguration.hashCode|hashCode(){}[0]
    final fun setMaxRotateCount(kotlin/Int): kotbase/LogFileConfiguration // kotbase/LogFileConfiguration.setMaxRotateCount|setMaxRotateCount(kotlin.Int){}[0]
    final fun setMaxSize(kotlin/Long): kotbase/LogFileConfiguration // kotbase/LogFileConfiguration.setMaxSize|setMaxSize(kotlin.Long){}[0]
    final fun setUsePlaintext(kotlin/Boolean): kotbase/LogFileConfiguration // kotbase/LogFileConfiguration.setUsePlaintext|setUsePlaintext(kotlin.Boolean){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/OrderBy : kotbase/LimitRouter, kotbase/Query { // kotbase/OrderBy|null[0]
    final var parameters // kotbase/OrderBy.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/OrderBy.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/OrderBy.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/OrderBy.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/OrderBy.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/OrderBy.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/OrderBy.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/OrderBy.explain|explain(){}[0]
    final fun limit(kotbase/Expression): kotbase/Limit // kotbase/OrderBy.limit|limit(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression, kotbase/Expression?): kotbase/Limit // kotbase/OrderBy.limit|limit(kotbase.Expression;kotbase.Expression?){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/OrderBy.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/Parameters { // kotbase/Parameters|null[0]
    constructor <init>() // kotbase/Parameters.<init>|<init>(){}[0]
    constructor <init>(kotbase/Parameters?) // kotbase/Parameters.<init>|<init>(kotbase.Parameters?){}[0]

    final fun getValue(kotlin/String): kotlin/Any? // kotbase/Parameters.getValue|getValue(kotlin.String){}[0]
    final fun setArray(kotlin/String, kotbase/Array?): kotbase/Parameters // kotbase/Parameters.setArray|setArray(kotlin.String;kotbase.Array?){}[0]
    final fun setBlob(kotlin/String, kotbase/Blob?): kotbase/Parameters // kotbase/Parameters.setBlob|setBlob(kotlin.String;kotbase.Blob?){}[0]
    final fun setBoolean(kotlin/String, kotlin/Boolean): kotbase/Parameters // kotbase/Parameters.setBoolean|setBoolean(kotlin.String;kotlin.Boolean){}[0]
    final fun setDate(kotlin/String, kotlinx.datetime/Instant?): kotbase/Parameters // kotbase/Parameters.setDate|setDate(kotlin.String;kotlinx.datetime.Instant?){}[0]
    final fun setDictionary(kotlin/String, kotbase/Dictionary?): kotbase/Parameters // kotbase/Parameters.setDictionary|setDictionary(kotlin.String;kotbase.Dictionary?){}[0]
    final fun setDouble(kotlin/String, kotlin/Double): kotbase/Parameters // kotbase/Parameters.setDouble|setDouble(kotlin.String;kotlin.Double){}[0]
    final fun setFloat(kotlin/String, kotlin/Float): kotbase/Parameters // kotbase/Parameters.setFloat|setFloat(kotlin.String;kotlin.Float){}[0]
    final fun setInt(kotlin/String, kotlin/Int): kotbase/Parameters // kotbase/Parameters.setInt|setInt(kotlin.String;kotlin.Int){}[0]
    final fun setLong(kotlin/String, kotlin/Long): kotbase/Parameters // kotbase/Parameters.setLong|setLong(kotlin.String;kotlin.Long){}[0]
    final fun setNumber(kotlin/String, kotlin/Number?): kotbase/Parameters // kotbase/Parameters.setNumber|setNumber(kotlin.String;kotlin.Number?){}[0]
    final fun setString(kotlin/String, kotlin/String?): kotbase/Parameters // kotbase/Parameters.setString|setString(kotlin.String;kotlin.String?){}[0]
    final fun setValue(kotlin/String, kotlin/Any?): kotbase/Parameters // kotbase/Parameters.setValue|setValue(kotlin.String;kotlin.Any?){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/QueryChange { // kotbase/QueryChange|null[0]
    final val error // kotbase/QueryChange.error|{}error[0]
        final fun <get-error>(): kotlin/Throwable? // kotbase/QueryChange.error.<get-error>|<get-error>(){}[0]
    final val query // kotbase/QueryChange.query|{}query[0]
        final fun <get-query>(): kotbase/Query // kotbase/QueryChange.query.<get-query>|<get-query>(){}[0]
    final val results // kotbase/QueryChange.results|{}results[0]
        final fun <get-results>(): kotbase/ResultSet? // kotbase/QueryChange.results.<get-results>|<get-results>(){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/QueryIndex { // kotbase/QueryIndex|null[0]
    final val collection // kotbase/QueryIndex.collection|{}collection[0]
        final fun <get-collection>(): kotbase/Collection // kotbase/QueryIndex.collection.<get-collection>|<get-collection>(){}[0]
    final val name // kotbase/QueryIndex.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotbase/QueryIndex.name.<get-name>|<get-name>(){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/ReplicatedDocument { // kotbase/ReplicatedDocument|null[0]
    final val collection // kotbase/ReplicatedDocument.collection|{}collection[0]
        final fun <get-collection>(): kotlin/String // kotbase/ReplicatedDocument.collection.<get-collection>|<get-collection>(){}[0]
    final val error // kotbase/ReplicatedDocument.error|{}error[0]
        final fun <get-error>(): kotbase/CouchbaseLiteException? // kotbase/ReplicatedDocument.error.<get-error>|<get-error>(){}[0]
    final val flags // kotbase/ReplicatedDocument.flags|{}flags[0]
        final fun <get-flags>(): kotlin.collections/Set<kotbase/DocumentFlag> // kotbase/ReplicatedDocument.flags.<get-flags>|<get-flags>(){}[0]
    final val id // kotbase/ReplicatedDocument.id|{}id[0]
        final fun <get-id>(): kotlin/String // kotbase/ReplicatedDocument.id.<get-id>|<get-id>(){}[0]
    final val scope // kotbase/ReplicatedDocument.scope|{}scope[0]
        final fun <get-scope>(): kotlin/String // kotbase/ReplicatedDocument.scope.<get-scope>|<get-scope>(){}[0]

    final fun toString(): kotlin/String // kotbase/ReplicatedDocument.toString|toString(){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/Replicator : kotlin/AutoCloseable { // kotbase/Replicator|null[0]
    constructor <init>(kotbase/ReplicatorConfiguration) // kotbase/Replicator.<init>|<init>(kotbase.ReplicatorConfiguration){}[0]

    final val config // kotbase/Replicator.config|{}config[0]
        final fun <get-config>(): kotbase/ReplicatorConfiguration // kotbase/Replicator.config.<get-config>|<get-config>(){}[0]
    final val isClosed // kotbase/Replicator.isClosed|{}isClosed[0]
        final fun <get-isClosed>(): kotlin/Boolean // kotbase/Replicator.isClosed.<get-isClosed>|<get-isClosed>(){}[0]
    final val pendingDocumentIds // kotbase/Replicator.pendingDocumentIds|{}pendingDocumentIds[0]
        final fun <get-pendingDocumentIds>(): kotlin.collections/Set<kotlin/String> // kotbase/Replicator.pendingDocumentIds.<get-pendingDocumentIds>|<get-pendingDocumentIds>(){}[0]
    final val serverCertificates // kotbase/Replicator.serverCertificates|{}serverCertificates[0]
        final fun <get-serverCertificates>(): kotlin.collections/List<kotlin/ByteArray>? // kotbase/Replicator.serverCertificates.<get-serverCertificates>|<get-serverCertificates>(){}[0]
    final val status // kotbase/Replicator.status|{}status[0]
        final fun <get-status>(): kotbase/ReplicatorStatus // kotbase/Replicator.status.<get-status>|<get-status>(){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/ReplicatorChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Replicator.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.ReplicatorChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/ReplicatorChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Replicator.addChangeListener|addChangeListener(kotlin.Function1<kotbase.ReplicatorChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/ReplicatorChange, kotlin/Unit>) // kotbase/Replicator.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.ReplicatorChange,kotlin.Unit>){}[0]
    final fun addDocumentReplicationListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/DocumentReplication, kotlin/Unit>): kotbase/ListenerToken // kotbase/Replicator.addDocumentReplicationListener|addDocumentReplicationListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.DocumentReplication,kotlin.Unit>){}[0]
    final fun addDocumentReplicationListener(kotlin/Function1<kotbase/DocumentReplication, kotlin/Unit>): kotbase/ListenerToken // kotbase/Replicator.addDocumentReplicationListener|addDocumentReplicationListener(kotlin.Function1<kotbase.DocumentReplication,kotlin.Unit>){}[0]
    final fun addDocumentReplicationListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/DocumentReplication, kotlin/Unit>) // kotbase/Replicator.addDocumentReplicationListener|addDocumentReplicationListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.DocumentReplication,kotlin.Unit>){}[0]
    final fun close() // kotbase/Replicator.close|close(){}[0]
    final fun getPendingDocumentIds(kotbase/Collection): kotlin.collections/Set<kotlin/String> // kotbase/Replicator.getPendingDocumentIds|getPendingDocumentIds(kotbase.Collection){}[0]
    final fun isDocumentPending(kotlin/String): kotlin/Boolean // kotbase/Replicator.isDocumentPending|isDocumentPending(kotlin.String){}[0]
    final fun isDocumentPending(kotlin/String, kotbase/Collection): kotlin/Boolean // kotbase/Replicator.isDocumentPending|isDocumentPending(kotlin.String;kotbase.Collection){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Replicator.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
    final fun start() // kotbase/Replicator.start|start(){}[0]
    final fun start(kotlin/Boolean) // kotbase/Replicator.start|start(kotlin.Boolean){}[0]
    final fun stop() // kotbase/Replicator.stop|stop(){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/ReplicatorChange { // kotbase/ReplicatorChange|null[0]
    final val replicator // kotbase/ReplicatorChange.replicator|{}replicator[0]
        final fun <get-replicator>(): kotbase/Replicator // kotbase/ReplicatorChange.replicator.<get-replicator>|<get-replicator>(){}[0]
    final val status // kotbase/ReplicatorChange.status|{}status[0]
        final fun <get-status>(): kotbase/ReplicatorStatus // kotbase/ReplicatorChange.status.<get-status>|<get-status>(){}[0]

    final fun toString(): kotlin/String // kotbase/ReplicatorChange.toString|toString(){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/ReplicatorConfiguration { // kotbase/ReplicatorConfiguration|null[0]
    constructor <init>(kotbase/Database, kotbase/Endpoint) // kotbase/ReplicatorConfiguration.<init>|<init>(kotbase.Database;kotbase.Endpoint){}[0]
    constructor <init>(kotbase/Endpoint) // kotbase/ReplicatorConfiguration.<init>|<init>(kotbase.Endpoint){}[0]
    constructor <init>(kotbase/ReplicatorConfiguration) // kotbase/ReplicatorConfiguration.<init>|<init>(kotbase.ReplicatorConfiguration){}[0]

    final val collections // kotbase/ReplicatorConfiguration.collections|{}collections[0]
        final fun <get-collections>(): kotlin.collections/Set<kotbase/Collection> // kotbase/ReplicatorConfiguration.collections.<get-collections>|<get-collections>(){}[0]
    final val database // kotbase/ReplicatorConfiguration.database|{}database[0]
        final fun <get-database>(): kotbase/Database // kotbase/ReplicatorConfiguration.database.<get-database>|<get-database>(){}[0]
    final val target // kotbase/ReplicatorConfiguration.target|{}target[0]
        final fun <get-target>(): kotbase/Endpoint // kotbase/ReplicatorConfiguration.target.<get-target>|<get-target>(){}[0]

    final var authenticator // kotbase/ReplicatorConfiguration.authenticator|{}authenticator[0]
        final fun <get-authenticator>(): kotbase/Authenticator? // kotbase/ReplicatorConfiguration.authenticator.<get-authenticator>|<get-authenticator>(){}[0]
        final fun <set-authenticator>(kotbase/Authenticator?) // kotbase/ReplicatorConfiguration.authenticator.<set-authenticator>|<set-authenticator>(kotbase.Authenticator?){}[0]
    final var channels // kotbase/ReplicatorConfiguration.channels|{}channels[0]
        final fun <get-channels>(): kotlin.collections/List<kotlin/String>? // kotbase/ReplicatorConfiguration.channels.<get-channels>|<get-channels>(){}[0]
        final fun <set-channels>(kotlin.collections/List<kotlin/String>?) // kotbase/ReplicatorConfiguration.channels.<set-channels>|<set-channels>(kotlin.collections.List<kotlin.String>?){}[0]
    final var conflictResolver // kotbase/ReplicatorConfiguration.conflictResolver|{}conflictResolver[0]
        final fun <get-conflictResolver>(): kotlin/Function1<kotbase/Conflict, kotbase/Document?>? // kotbase/ReplicatorConfiguration.conflictResolver.<get-conflictResolver>|<get-conflictResolver>(){}[0]
        final fun <set-conflictResolver>(kotlin/Function1<kotbase/Conflict, kotbase/Document?>?) // kotbase/ReplicatorConfiguration.conflictResolver.<set-conflictResolver>|<set-conflictResolver>(kotlin.Function1<kotbase.Conflict,kotbase.Document?>?){}[0]
    final var documentIDs // kotbase/ReplicatorConfiguration.documentIDs|{}documentIDs[0]
        final fun <get-documentIDs>(): kotlin.collections/List<kotlin/String>? // kotbase/ReplicatorConfiguration.documentIDs.<get-documentIDs>|<get-documentIDs>(){}[0]
        final fun <set-documentIDs>(kotlin.collections/List<kotlin/String>?) // kotbase/ReplicatorConfiguration.documentIDs.<set-documentIDs>|<set-documentIDs>(kotlin.collections.List<kotlin.String>?){}[0]
    final var headers // kotbase/ReplicatorConfiguration.headers|{}headers[0]
        final fun <get-headers>(): kotlin.collections/Map<kotlin/String, kotlin/String>? // kotbase/ReplicatorConfiguration.headers.<get-headers>|<get-headers>(){}[0]
        final fun <set-headers>(kotlin.collections/Map<kotlin/String, kotlin/String>?) // kotbase/ReplicatorConfiguration.headers.<set-headers>|<set-headers>(kotlin.collections.Map<kotlin.String,kotlin.String>?){}[0]
    final var heartbeat // kotbase/ReplicatorConfiguration.heartbeat|{}heartbeat[0]
        final fun <get-heartbeat>(): kotlin/Int // kotbase/ReplicatorConfiguration.heartbeat.<get-heartbeat>|<get-heartbeat>(){}[0]
        final fun <set-heartbeat>(kotlin/Int) // kotbase/ReplicatorConfiguration.heartbeat.<set-heartbeat>|<set-heartbeat>(kotlin.Int){}[0]
    final var isAcceptParentDomainCookies // kotbase/ReplicatorConfiguration.isAcceptParentDomainCookies|{}isAcceptParentDomainCookies[0]
        final fun <get-isAcceptParentDomainCookies>(): kotlin/Boolean // kotbase/ReplicatorConfiguration.isAcceptParentDomainCookies.<get-isAcceptParentDomainCookies>|<get-isAcceptParentDomainCookies>(){}[0]
        final fun <set-isAcceptParentDomainCookies>(kotlin/Boolean) // kotbase/ReplicatorConfiguration.isAcceptParentDomainCookies.<set-isAcceptParentDomainCookies>|<set-isAcceptParentDomainCookies>(kotlin.Boolean){}[0]
    final var isAutoPurgeEnabled // kotbase/ReplicatorConfiguration.isAutoPurgeEnabled|{}isAutoPurgeEnabled[0]
        final fun <get-isAutoPurgeEnabled>(): kotlin/Boolean // kotbase/ReplicatorConfiguration.isAutoPurgeEnabled.<get-isAutoPurgeEnabled>|<get-isAutoPurgeEnabled>(){}[0]
        final fun <set-isAutoPurgeEnabled>(kotlin/Boolean) // kotbase/ReplicatorConfiguration.isAutoPurgeEnabled.<set-isAutoPurgeEnabled>|<set-isAutoPurgeEnabled>(kotlin.Boolean){}[0]
    final var isContinuous // kotbase/ReplicatorConfiguration.isContinuous|{}isContinuous[0]
        final fun <get-isContinuous>(): kotlin/Boolean // kotbase/ReplicatorConfiguration.isContinuous.<get-isContinuous>|<get-isContinuous>(){}[0]
        final fun <set-isContinuous>(kotlin/Boolean) // kotbase/ReplicatorConfiguration.isContinuous.<set-isContinuous>|<set-isContinuous>(kotlin.Boolean){}[0]
    final var maxAttemptWaitTime // kotbase/ReplicatorConfiguration.maxAttemptWaitTime|{}maxAttemptWaitTime[0]
        final fun <get-maxAttemptWaitTime>(): kotlin/Int // kotbase/ReplicatorConfiguration.maxAttemptWaitTime.<get-maxAttemptWaitTime>|<get-maxAttemptWaitTime>(){}[0]
        final fun <set-maxAttemptWaitTime>(kotlin/Int) // kotbase/ReplicatorConfiguration.maxAttemptWaitTime.<set-maxAttemptWaitTime>|<set-maxAttemptWaitTime>(kotlin.Int){}[0]
    final var maxAttempts // kotbase/ReplicatorConfiguration.maxAttempts|{}maxAttempts[0]
        final fun <get-maxAttempts>(): kotlin/Int // kotbase/ReplicatorConfiguration.maxAttempts.<get-maxAttempts>|<get-maxAttempts>(){}[0]
        final fun <set-maxAttempts>(kotlin/Int) // kotbase/ReplicatorConfiguration.maxAttempts.<set-maxAttempts>|<set-maxAttempts>(kotlin.Int){}[0]
    final var pinnedServerCertificate // kotbase/ReplicatorConfiguration.pinnedServerCertificate|{}pinnedServerCertificate[0]
        final fun <get-pinnedServerCertificate>(): kotlin/ByteArray? // kotbase/ReplicatorConfiguration.pinnedServerCertificate.<get-pinnedServerCertificate>|<get-pinnedServerCertificate>(){}[0]
        final fun <set-pinnedServerCertificate>(kotlin/ByteArray?) // kotbase/ReplicatorConfiguration.pinnedServerCertificate.<set-pinnedServerCertificate>|<set-pinnedServerCertificate>(kotlin.ByteArray?){}[0]
    final var pullFilter // kotbase/ReplicatorConfiguration.pullFilter|{}pullFilter[0]
        final fun <get-pullFilter>(): kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? // kotbase/ReplicatorConfiguration.pullFilter.<get-pullFilter>|<get-pullFilter>(){}[0]
        final fun <set-pullFilter>(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?) // kotbase/ReplicatorConfiguration.pullFilter.<set-pullFilter>|<set-pullFilter>(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
    final var pushFilter // kotbase/ReplicatorConfiguration.pushFilter|{}pushFilter[0]
        final fun <get-pushFilter>(): kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>? // kotbase/ReplicatorConfiguration.pushFilter.<get-pushFilter>|<get-pushFilter>(){}[0]
        final fun <set-pushFilter>(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?) // kotbase/ReplicatorConfiguration.pushFilter.<set-pushFilter>|<set-pushFilter>(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
    final var type // kotbase/ReplicatorConfiguration.type|{}type[0]
        final fun <get-type>(): kotbase/ReplicatorType // kotbase/ReplicatorConfiguration.type.<get-type>|<get-type>(){}[0]
        final fun <set-type>(kotbase/ReplicatorType) // kotbase/ReplicatorConfiguration.type.<set-type>|<set-type>(kotbase.ReplicatorType){}[0]

    final fun addCollection(kotbase/Collection, kotbase/CollectionConfiguration? = ...): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.addCollection|addCollection(kotbase.Collection;kotbase.CollectionConfiguration?){}[0]
    final fun addCollections(kotlin.collections/Collection<kotbase/Collection>, kotbase/CollectionConfiguration? = ...): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.addCollections|addCollections(kotlin.collections.Collection<kotbase.Collection>;kotbase.CollectionConfiguration?){}[0]
    final fun getCollectionConfiguration(kotbase/Collection): kotbase/CollectionConfiguration? // kotbase/ReplicatorConfiguration.getCollectionConfiguration|getCollectionConfiguration(kotbase.Collection){}[0]
    final fun removeCollection(kotbase/Collection): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.removeCollection|removeCollection(kotbase.Collection){}[0]
    final fun setAcceptParentDomainCookies(kotlin/Boolean): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setAcceptParentDomainCookies|setAcceptParentDomainCookies(kotlin.Boolean){}[0]
    final fun setAuthenticator(kotbase/Authenticator?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setAuthenticator|setAuthenticator(kotbase.Authenticator?){}[0]
    final fun setAutoPurgeEnabled(kotlin/Boolean): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setAutoPurgeEnabled|setAutoPurgeEnabled(kotlin.Boolean){}[0]
    final fun setChannels(kotlin.collections/List<kotlin/String>?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setChannels|setChannels(kotlin.collections.List<kotlin.String>?){}[0]
    final fun setConflictResolver(kotlin/Function1<kotbase/Conflict, kotbase/Document?>?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setConflictResolver|setConflictResolver(kotlin.Function1<kotbase.Conflict,kotbase.Document?>?){}[0]
    final fun setContinuous(kotlin/Boolean): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setContinuous|setContinuous(kotlin.Boolean){}[0]
    final fun setDocumentIDs(kotlin.collections/List<kotlin/String>?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setDocumentIDs|setDocumentIDs(kotlin.collections.List<kotlin.String>?){}[0]
    final fun setHeaders(kotlin.collections/Map<kotlin/String, kotlin/String>?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setHeaders|setHeaders(kotlin.collections.Map<kotlin.String,kotlin.String>?){}[0]
    final fun setHeartbeat(kotlin/Int): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setHeartbeat|setHeartbeat(kotlin.Int){}[0]
    final fun setMaxAttemptWaitTime(kotlin/Int): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setMaxAttemptWaitTime|setMaxAttemptWaitTime(kotlin.Int){}[0]
    final fun setMaxAttempts(kotlin/Int): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setMaxAttempts|setMaxAttempts(kotlin.Int){}[0]
    final fun setPinnedServerCertificate(kotlin/ByteArray?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setPinnedServerCertificate|setPinnedServerCertificate(kotlin.ByteArray?){}[0]
    final fun setPullFilter(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setPullFilter|setPullFilter(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
    final fun setPushFilter(kotlin/Function2<kotbase/Document, kotlin.collections/Set<kotbase/DocumentFlag>, kotlin/Boolean>?): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setPushFilter|setPushFilter(kotlin.Function2<kotbase.Document,kotlin.collections.Set<kotbase.DocumentFlag>,kotlin.Boolean>?){}[0]
    final fun setType(kotbase/ReplicatorType): kotbase/ReplicatorConfiguration // kotbase/ReplicatorConfiguration.setType|setType(kotbase.ReplicatorType){}[0]
    final fun toString(): kotlin/String // kotbase/ReplicatorConfiguration.toString|toString(){}[0]

    final object Companion // kotbase/ReplicatorConfiguration.Companion|null[0]
}

// Targets: [linux, mingwX64]
final class kotbase/ReplicatorStatus { // kotbase/ReplicatorStatus|null[0]
    final val activityLevel // kotbase/ReplicatorStatus.activityLevel|{}activityLevel[0]
        final fun <get-activityLevel>(): kotbase/ReplicatorActivityLevel // kotbase/ReplicatorStatus.activityLevel.<get-activityLevel>|<get-activityLevel>(){}[0]
    final val error // kotbase/ReplicatorStatus.error|{}error[0]
        final fun <get-error>(): kotbase/CouchbaseLiteException? // kotbase/ReplicatorStatus.error.<get-error>|<get-error>(){}[0]
    final val progress // kotbase/ReplicatorStatus.progress|{}progress[0]
        final fun <get-progress>(): kotbase/ReplicatorProgress // kotbase/ReplicatorStatus.progress.<get-progress>|<get-progress>(){}[0]

    final fun toString(): kotlin/String // kotbase/ReplicatorStatus.toString|toString(){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/Result : kotbase/ArrayInterface, kotbase/DictionaryInterface, kotlin.collections/Iterable<kotlin/String> { // kotbase/Result|null[0]
    final val count // kotbase/Result.count|{}count[0]
        final fun <get-count>(): kotlin/Int // kotbase/Result.count.<get-count>|<get-count>(){}[0]
    final val keys // kotbase/Result.keys|{}keys[0]
        final fun <get-keys>(): kotlin.collections/List<kotlin/String> // kotbase/Result.keys.<get-keys>|<get-keys>(){}[0]

    final fun contains(kotlin/String): kotlin/Boolean // kotbase/Result.contains|contains(kotlin.String){}[0]
    final fun getArray(kotlin/Int): kotbase/Array? // kotbase/Result.getArray|getArray(kotlin.Int){}[0]
    final fun getArray(kotlin/String): kotbase/Array? // kotbase/Result.getArray|getArray(kotlin.String){}[0]
    final fun getBlob(kotlin/Int): kotbase/Blob? // kotbase/Result.getBlob|getBlob(kotlin.Int){}[0]
    final fun getBlob(kotlin/String): kotbase/Blob? // kotbase/Result.getBlob|getBlob(kotlin.String){}[0]
    final fun getBoolean(kotlin/Int): kotlin/Boolean // kotbase/Result.getBoolean|getBoolean(kotlin.Int){}[0]
    final fun getBoolean(kotlin/String): kotlin/Boolean // kotbase/Result.getBoolean|getBoolean(kotlin.String){}[0]
    final fun getDate(kotlin/Int): kotlinx.datetime/Instant? // kotbase/Result.getDate|getDate(kotlin.Int){}[0]
    final fun getDate(kotlin/String): kotlinx.datetime/Instant? // kotbase/Result.getDate|getDate(kotlin.String){}[0]
    final fun getDictionary(kotlin/Int): kotbase/Dictionary? // kotbase/Result.getDictionary|getDictionary(kotlin.Int){}[0]
    final fun getDictionary(kotlin/String): kotbase/Dictionary? // kotbase/Result.getDictionary|getDictionary(kotlin.String){}[0]
    final fun getDouble(kotlin/Int): kotlin/Double // kotbase/Result.getDouble|getDouble(kotlin.Int){}[0]
    final fun getDouble(kotlin/String): kotlin/Double // kotbase/Result.getDouble|getDouble(kotlin.String){}[0]
    final fun getFloat(kotlin/Int): kotlin/Float // kotbase/Result.getFloat|getFloat(kotlin.Int){}[0]
    final fun getFloat(kotlin/String): kotlin/Float // kotbase/Result.getFloat|getFloat(kotlin.String){}[0]
    final fun getInt(kotlin/Int): kotlin/Int // kotbase/Result.getInt|getInt(kotlin.Int){}[0]
    final fun getInt(kotlin/String): kotlin/Int // kotbase/Result.getInt|getInt(kotlin.String){}[0]
    final fun getLong(kotlin/Int): kotlin/Long // kotbase/Result.getLong|getLong(kotlin.Int){}[0]
    final fun getLong(kotlin/String): kotlin/Long // kotbase/Result.getLong|getLong(kotlin.String){}[0]
    final fun getNumber(kotlin/Int): kotlin/Number? // kotbase/Result.getNumber|getNumber(kotlin.Int){}[0]
    final fun getNumber(kotlin/String): kotlin/Number? // kotbase/Result.getNumber|getNumber(kotlin.String){}[0]
    final fun getString(kotlin/Int): kotlin/String? // kotbase/Result.getString|getString(kotlin.Int){}[0]
    final fun getString(kotlin/String): kotlin/String? // kotbase/Result.getString|getString(kotlin.String){}[0]
    final fun getValue(kotlin/Int): kotlin/Any? // kotbase/Result.getValue|getValue(kotlin.Int){}[0]
    final fun getValue(kotlin/String): kotlin/Any? // kotbase/Result.getValue|getValue(kotlin.String){}[0]
    final fun iterator(): kotlin.collections/Iterator<kotlin/String> // kotbase/Result.iterator|iterator(){}[0]
    final fun toJSON(): kotlin/String // kotbase/Result.toJSON|toJSON(){}[0]
    final fun toList(): kotlin.collections/List<kotlin/Any?> // kotbase/Result.toList|toList(){}[0]
    final fun toMap(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // kotbase/Result.toMap|toMap(){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/ResultSet : kotlin.collections/Iterable<kotbase/Result>, kotlin/AutoCloseable { // kotbase/ResultSet|null[0]
    final fun allResults(): kotlin.collections/List<kotbase/Result> // kotbase/ResultSet.allResults|allResults(){}[0]
    final fun close() // kotbase/ResultSet.close|close(){}[0]
    final fun iterator(): kotlin.collections/Iterator<kotbase/Result> // kotbase/ResultSet.iterator|iterator(){}[0]
    final fun next(): kotbase/Result? // kotbase/ResultSet.next|next(){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/Scope { // kotbase/Scope|null[0]
    final val collections // kotbase/Scope.collections|{}collections[0]
        final fun <get-collections>(): kotlin.collections/Set<kotbase/Collection> // kotbase/Scope.collections.<get-collections>|<get-collections>(){}[0]
    final val database // kotbase/Scope.database|{}database[0]
        final fun <get-database>(): kotbase/Database // kotbase/Scope.database.<get-database>|<get-database>(){}[0]
    final val name // kotbase/Scope.name|{}name[0]
        final fun <get-name>(): kotlin/String // kotbase/Scope.name.<get-name>|<get-name>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // kotbase/Scope.equals|equals(kotlin.Any?){}[0]
    final fun getCollection(kotlin/String): kotbase/Collection? // kotbase/Scope.getCollection|getCollection(kotlin.String){}[0]
    final fun hashCode(): kotlin/Int // kotbase/Scope.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // kotbase/Scope.toString|toString(){}[0]

    final object Companion // kotbase/Scope.Companion|null[0]
}

// Targets: [linux, mingwX64]
final class kotbase/Select : kotbase/FromRouter, kotbase/Query { // kotbase/Select|null[0]
    final var parameters // kotbase/Select.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/Select.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/Select.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Select.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Select.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/Select.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/Select.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/Select.explain|explain(){}[0]
    final fun from(kotbase/DataSource): kotbase/From // kotbase/Select.from|from(kotbase.DataSource){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Select.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
}

// Targets: [linux, mingwX64]
final class kotbase/ValueIndexItem { // kotbase/ValueIndexItem|null[0]
    final object Companion { // kotbase/ValueIndexItem.Companion|null[0]
        final fun expression(kotbase/Expression): kotbase/ValueIndexItem // kotbase/ValueIndexItem.Companion.expression|expression(kotbase.Expression){}[0]
        final fun property(kotlin/String): kotbase/ValueIndexItem // kotbase/ValueIndexItem.Companion.property|property(kotlin.String){}[0]
    }
}

// Targets: [linux, mingwX64]
final class kotbase/Where : kotbase/GroupByRouter, kotbase/LimitRouter, kotbase/OrderByRouter, kotbase/Query { // kotbase/Where|null[0]
    final var parameters // kotbase/Where.parameters|{}parameters[0]
        final fun <get-parameters>(): kotbase/Parameters? // kotbase/Where.parameters.<get-parameters>|<get-parameters>(){}[0]
        final fun <set-parameters>(kotbase/Parameters?) // kotbase/Where.parameters.<set-parameters>|<set-parameters>(kotbase.Parameters?){}[0]

    final fun addChangeListener(kotlin.coroutines/CoroutineContext, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Where.addChangeListener|addChangeListener(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlin/Function1<kotbase/QueryChange, kotlin/Unit>): kotbase/ListenerToken // kotbase/Where.addChangeListener|addChangeListener(kotlin.Function1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun addChangeListener(kotlinx.coroutines/CoroutineScope, kotlin.coroutines/SuspendFunction1<kotbase/QueryChange, kotlin/Unit>) // kotbase/Where.addChangeListener|addChangeListener(kotlinx.coroutines.CoroutineScope;kotlin.coroutines.SuspendFunction1<kotbase.QueryChange,kotlin.Unit>){}[0]
    final fun execute(): kotbase/ResultSet // kotbase/Where.execute|execute(){}[0]
    final fun explain(): kotlin/String // kotbase/Where.explain|explain(){}[0]
    final fun groupBy(kotlin/Array<out kotbase/Expression>...): kotbase/GroupBy // kotbase/Where.groupBy|groupBy(kotlin.Array<out|kotbase.Expression>...){}[0]
    final fun limit(kotbase/Expression): kotbase/Limit // kotbase/Where.limit|limit(kotbase.Expression){}[0]
    final fun limit(kotbase/Expression, kotbase/Expression?): kotbase/Limit // kotbase/Where.limit|limit(kotbase.Expression;kotbase.Expression?){}[0]
    final fun orderBy(kotlin/Array<out kotbase/Ordering>...): kotbase/OrderBy // kotbase/Where.orderBy|orderBy(kotlin.Array<out|kotbase.Ordering>...){}[0]
    final fun removeChangeListener(kotbase/ListenerToken) // kotbase/Where.removeChangeListener|removeChangeListener(kotbase.ListenerToken){}[0]
}

// Targets: [linux, mingwX64]
open class kotbase/Array : kotbase/ArrayInterface, kotlin.collections/Iterable<kotlin/Any?> { // kotbase/Array|null[0]
    open val actual // kotbase/Array.actual|{}actual[0]
        open fun <get-actual>(): kotlinx.cinterop/CPointer<cnames.structs/_FLArray> // kotbase/Array.actual.<get-actual>|<get-actual>(){}[0]
    open val count // kotbase/Array.count|{}count[0]
        open fun <get-count>(): kotlin/Int // kotbase/Array.count.<get-count>|<get-count>(){}[0]

    final fun getFLValue(kotlin/Int): kotlinx.cinterop/CPointer<cnames.structs/_FLValue>? // kotbase/Array.getFLValue|getFLValue(kotlin.Int){}[0]
    final fun mutate() // kotbase/Array.mutate|mutate(){}[0]
    final fun toMutable(): kotbase/MutableArray // kotbase/Array.toMutable|toMutable(){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // kotbase/Array.equals|equals(kotlin.Any?){}[0]
    open fun getArray(kotlin/Int): kotbase/Array? // kotbase/Array.getArray|getArray(kotlin.Int){}[0]
    open fun getBlob(kotlin/Int): kotbase/Blob? // kotbase/Array.getBlob|getBlob(kotlin.Int){}[0]
    open fun getBoolean(kotlin/Int): kotlin/Boolean // kotbase/Array.getBoolean|getBoolean(kotlin.Int){}[0]
    open fun getDate(kotlin/Int): kotlinx.datetime/Instant? // kotbase/Array.getDate|getDate(kotlin.Int){}[0]
    open fun getDictionary(kotlin/Int): kotbase/Dictionary? // kotbase/Array.getDictionary|getDictionary(kotlin.Int){}[0]
    open fun getDouble(kotlin/Int): kotlin/Double // kotbase/Array.getDouble|getDouble(kotlin.Int){}[0]
    open fun getFloat(kotlin/Int): kotlin/Float // kotbase/Array.getFloat|getFloat(kotlin.Int){}[0]
    open fun getInt(kotlin/Int): kotlin/Int // kotbase/Array.getInt|getInt(kotlin.Int){}[0]
    open fun getLong(kotlin/Int): kotlin/Long // kotbase/Array.getLong|getLong(kotlin.Int){}[0]
    open fun getNumber(kotlin/Int): kotlin/Number? // kotbase/Array.getNumber|getNumber(kotlin.Int){}[0]
    open fun getString(kotlin/Int): kotlin/String? // kotbase/Array.getString|getString(kotlin.Int){}[0]
    open fun getValue(kotlin/Int): kotlin/Any? // kotbase/Array.getValue|getValue(kotlin.Int){}[0]
    open fun hashCode(): kotlin/Int // kotbase/Array.hashCode|hashCode(){}[0]
    open fun iterator(): kotlin.collections/Iterator<kotlin/Any?> // kotbase/Array.iterator|iterator(){}[0]
    open fun toJSON(): kotlin/String // kotbase/Array.toJSON|toJSON(){}[0]
    open fun toList(): kotlin.collections/List<kotlin/Any?> // kotbase/Array.toList|toList(){}[0]
    open fun toString(): kotlin/String // kotbase/Array.toString|toString(){}[0]
}

// Targets: [linux, mingwX64]
open class kotbase/DataSource { // kotbase/DataSource|null[0]
    final var alias // kotbase/DataSource.alias|{}alias[0]
        final fun <get-alias>(): kotlin/String? // kotbase/DataSource.alias.<get-alias>|<get-alias>(){}[0]
        final fun <set-alias>(kotlin/String?) // kotbase/DataSource.alias.<set-alias>|<set-alias>(kotlin.String?){}[0]

    final class As : kotbase/DataSource { // kotbase/DataSource.As|null[0]
        final fun as(kotlin/String): kotbase/DataSource // kotbase/DataSource.As.as|as(kotlin.String){}[0]
    }

    final object Companion { // kotbase/DataSource.Companion|null[0]
        final fun collection(kotbase/Collection): kotbase/DataSource.As // kotbase/DataSource.Companion.collection|collection(kotbase.Collection){}[0]
        final fun database(kotbase/Database): kotbase/DataSource.As // kotbase/DataSource.Companion.database|database(kotbase.Database){}[0]
    }
}

// Targets: [linux, mingwX64]
open class kotbase/Dictionary : kotbase/DictionaryInterface, kotlin.collections/Iterable<kotlin/String> { // kotbase/Dictionary|null[0]
    open val count // kotbase/Dictionary.count|{}count[0]
        open fun <get-count>(): kotlin/Int // kotbase/Dictionary.count.<get-count>|<get-count>(){}[0]
    open val keys // kotbase/Dictionary.keys|{}keys[0]
        open fun <get-keys>(): kotlin.collections/List<kotlin/String> // kotbase/Dictionary.keys.<get-keys>|<get-keys>(){}[0]

    final fun getFLValue(kotlin/String): kotlinx.cinterop/CPointer<cnames.structs/_FLValue>? // kotbase/Dictionary.getFLValue|getFLValue(kotlin.String){}[0]
    final fun mutate() // kotbase/Dictionary.mutate|mutate(){}[0]
    final fun toMutable(): kotbase/MutableDictionary // kotbase/Dictionary.toMutable|toMutable(){}[0]
    open fun contains(kotlin/String): kotlin/Boolean // kotbase/Dictionary.contains|contains(kotlin.String){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // kotbase/Dictionary.equals|equals(kotlin.Any?){}[0]
    open fun getArray(kotlin/String): kotbase/Array? // kotbase/Dictionary.getArray|getArray(kotlin.String){}[0]
    open fun getBlob(kotlin/String): kotbase/Blob? // kotbase/Dictionary.getBlob|getBlob(kotlin.String){}[0]
    open fun getBoolean(kotlin/String): kotlin/Boolean // kotbase/Dictionary.getBoolean|getBoolean(kotlin.String){}[0]
    open fun getDate(kotlin/String): kotlinx.datetime/Instant? // kotbase/Dictionary.getDate|getDate(kotlin.String){}[0]
    open fun getDictionary(kotlin/String): kotbase/Dictionary? // kotbase/Dictionary.getDictionary|getDictionary(kotlin.String){}[0]
    open fun getDouble(kotlin/String): kotlin/Double // kotbase/Dictionary.getDouble|getDouble(kotlin.String){}[0]
    open fun getFloat(kotlin/String): kotlin/Float // kotbase/Dictionary.getFloat|getFloat(kotlin.String){}[0]
    open fun getInt(kotlin/String): kotlin/Int // kotbase/Dictionary.getInt|getInt(kotlin.String){}[0]
    open fun getLong(kotlin/String): kotlin/Long // kotbase/Dictionary.getLong|getLong(kotlin.String){}[0]
    open fun getNumber(kotlin/String): kotlin/Number? // kotbase/Dictionary.getNumber|getNumber(kotlin.String){}[0]
    open fun getString(kotlin/String): kotlin/String? // kotbase/Dictionary.getString|getString(kotlin.String){}[0]
    open fun getValue(kotlin/String): kotlin/Any? // kotbase/Dictionary.getValue|getValue(kotlin.String){}[0]
    open fun hashCode(): kotlin/Int // kotbase/Dictionary.hashCode|hashCode(){}[0]
    open fun iterator(): kotlin.collections/Iterator<kotlin/String> // kotbase/Dictionary.iterator|iterator(){}[0]
    open fun toJSON(): kotlin/String // kotbase/Dictionary.toJSON|toJSON(){}[0]
    open fun toMap(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // kotbase/Dictionary.toMap|toMap(){}[0]
    open fun toString(): kotlin/String // kotbase/Dictionary.toString|toString(){}[0]
}

// Targets: [linux, mingwX64]
open class kotbase/Document : kotbase/DictionaryInterface, kotlin.collections/Iterable<kotlin/String> { // kotbase/Document|null[0]
    final val collection // kotbase/Document.collection|{}collection[0]
        final fun <get-collection>(): kotbase/Collection? // kotbase/Document.collection.<get-collection>|<get-collection>(){}[0]
    final val id // kotbase/Document.id|{}id[0]
        final fun <get-id>(): kotlin/String // kotbase/Document.id.<get-id>|<get-id>(){}[0]
    final val revisionID // kotbase/Document.revisionID|{}revisionID[0]
        final fun <get-revisionID>(): kotlin/String? // kotbase/Document.revisionID.<get-revisionID>|<get-revisionID>(){}[0]
    final val sequence // kotbase/Document.sequence|{}sequence[0]
        final fun <get-sequence>(): kotlin/Long // kotbase/Document.sequence.<get-sequence>|<get-sequence>(){}[0]
    open val count // kotbase/Document.count|{}count[0]
        open fun <get-count>(): kotlin/Int // kotbase/Document.count.<get-count>|<get-count>(){}[0]
    open val keys // kotbase/Document.keys|{}keys[0]
        open fun <get-keys>(): kotlin.collections/List<kotlin/String> // kotbase/Document.keys.<get-keys>|<get-keys>(){}[0]

    final fun getFLValue(kotlin/String): kotlinx.cinterop/CPointer<cnames.structs/_FLValue>? // kotbase/Document.getFLValue|getFLValue(kotlin.String){}[0]
    final fun mutate() // kotbase/Document.mutate|mutate(){}[0]
    open fun contains(kotlin/String): kotlin/Boolean // kotbase/Document.contains|contains(kotlin.String){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // kotbase/Document.equals|equals(kotlin.Any?){}[0]
    open fun getArray(kotlin/String): kotbase/Array? // kotbase/Document.getArray|getArray(kotlin.String){}[0]
    open fun getBlob(kotlin/String): kotbase/Blob? // kotbase/Document.getBlob|getBlob(kotlin.String){}[0]
    open fun getBoolean(kotlin/String): kotlin/Boolean // kotbase/Document.getBoolean|getBoolean(kotlin.String){}[0]
    open fun getDate(kotlin/String): kotlinx.datetime/Instant? // kotbase/Document.getDate|getDate(kotlin.String){}[0]
    open fun getDictionary(kotlin/String): kotbase/Dictionary? // kotbase/Document.getDictionary|getDictionary(kotlin.String){}[0]
    open fun getDouble(kotlin/String): kotlin/Double // kotbase/Document.getDouble|getDouble(kotlin.String){}[0]
    open fun getFloat(kotlin/String): kotlin/Float // kotbase/Document.getFloat|getFloat(kotlin.String){}[0]
    open fun getInt(kotlin/String): kotlin/Int // kotbase/Document.getInt|getInt(kotlin.String){}[0]
    open fun getLong(kotlin/String): kotlin/Long // kotbase/Document.getLong|getLong(kotlin.String){}[0]
    open fun getNumber(kotlin/String): kotlin/Number? // kotbase/Document.getNumber|getNumber(kotlin.String){}[0]
    open fun getString(kotlin/String): kotlin/String? // kotbase/Document.getString|getString(kotlin.String){}[0]
    open fun getValue(kotlin/String): kotlin/Any? // kotbase/Document.getValue|getValue(kotlin.String){}[0]
    open fun hashCode(): kotlin/Int // kotbase/Document.hashCode|hashCode(){}[0]
    open fun iterator(): kotlin.collections/Iterator<kotlin/String> // kotbase/Document.iterator|iterator(){}[0]
    open fun toJSON(): kotlin/String // kotbase/Document.toJSON|toJSON(){}[0]
    open fun toMap(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // kotbase/Document.toMap|toMap(){}[0]
    open fun toMutable(): kotbase/MutableDocument // kotbase/Document.toMutable|toMutable(){}[0]
    open fun toString(): kotlin/String // kotbase/Document.toString|toString(){}[0]
}

// Targets: [linux, mingwX64]
open class kotbase/Expression { // kotbase/Expression|null[0]
    constructor <init>() // kotbase/Expression.<init>|<init>(){}[0]

    final fun add(kotbase/Expression): kotbase/Expression // kotbase/Expression.add|add(kotbase.Expression){}[0]
    final fun and(kotbase/Expression): kotbase/Expression // kotbase/Expression.and|and(kotbase.Expression){}[0]
    final fun between(kotbase/Expression, kotbase/Expression): kotbase/Expression // kotbase/Expression.between|between(kotbase.Expression;kotbase.Expression){}[0]
    final fun collate(kotbase/Collation): kotbase/Expression // kotbase/Expression.collate|collate(kotbase.Collation){}[0]
    final fun divide(kotbase/Expression): kotbase/Expression // kotbase/Expression.divide|divide(kotbase.Expression){}[0]
    final fun equalTo(kotbase/Expression): kotbase/Expression // kotbase/Expression.equalTo|equalTo(kotbase.Expression){}[0]
    final fun greaterThan(kotbase/Expression): kotbase/Expression // kotbase/Expression.greaterThan|greaterThan(kotbase.Expression){}[0]
    final fun greaterThanOrEqualTo(kotbase/Expression): kotbase/Expression // kotbase/Expression.greaterThanOrEqualTo|greaterThanOrEqualTo(kotbase.Expression){}[0]
    final fun in(kotlin/Array<out kotbase/Expression>...): kotbase/Expression // kotbase/Expression.in|in(kotlin.Array<out|kotbase.Expression>...){}[0]
    final fun is(kotbase/Expression): kotbase/Expression // kotbase/Expression.is|is(kotbase.Expression){}[0]
    final fun isNot(kotbase/Expression): kotbase/Expression // kotbase/Expression.isNot|isNot(kotbase.Expression){}[0]
    final fun isNotValued(): kotbase/Expression // kotbase/Expression.isNotValued|isNotValued(){}[0]
    final fun isValued(): kotbase/Expression // kotbase/Expression.isValued|isValued(){}[0]
    final fun lessThan(kotbase/Expression): kotbase/Expression // kotbase/Expression.lessThan|lessThan(kotbase.Expression){}[0]
    final fun lessThanOrEqualTo(kotbase/Expression): kotbase/Expression // kotbase/Expression.lessThanOrEqualTo|lessThanOrEqualTo(kotbase.Expression){}[0]
    final fun like(kotbase/Expression): kotbase/Expression // kotbase/Expression.like|like(kotbase.Expression){}[0]
    final fun modulo(kotbase/Expression): kotbase/Expression // kotbase/Expression.modulo|modulo(kotbase.Expression){}[0]
    final fun multiply(kotbase/Expression): kotbase/Expression // kotbase/Expression.multiply|multiply(kotbase.Expression){}[0]
    final fun notEqualTo(kotbase/Expression): kotbase/Expression // kotbase/Expression.notEqualTo|notEqualTo(kotbase.Expression){}[0]
    final fun or(kotbase/Expression): kotbase/Expression // kotbase/Expression.or|or(kotbase.Expression){}[0]
    final fun regex(kotbase/Expression): kotbase/Expression // kotbase/Expression.regex|regex(kotbase.Expression){}[0]
    final fun subtract(kotbase/Expression): kotbase/Expression // kotbase/Expression.subtract|subtract(kotbase.Expression){}[0]
    open fun toString(): kotlin/String // kotbase/Expression.toString|toString(){}[0]

    final object Companion { // kotbase/Expression.Companion|null[0]
        final fun all(): kotbase/PropertyExpression // kotbase/Expression.Companion.all|all(){}[0]
        final fun booleanValue(kotlin/Boolean): kotbase/Expression // kotbase/Expression.Companion.booleanValue|booleanValue(kotlin.Boolean){}[0]
        final fun date(kotlinx.datetime/Instant?): kotbase/Expression // kotbase/Expression.Companion.date|date(kotlinx.datetime.Instant?){}[0]
        final fun doubleValue(kotlin/Double): kotbase/Expression // kotbase/Expression.Companion.doubleValue|doubleValue(kotlin.Double){}[0]
        final fun floatValue(kotlin/Float): kotbase/Expression // kotbase/Expression.Companion.floatValue|floatValue(kotlin.Float){}[0]
        final fun fullTextIndex(kotlin/String): kotbase/FullTextIndexExpression // kotbase/Expression.Companion.fullTextIndex|fullTextIndex(kotlin.String){}[0]
        final fun intValue(kotlin/Int): kotbase/Expression // kotbase/Expression.Companion.intValue|intValue(kotlin.Int){}[0]
        final fun list(kotlin.collections/List<kotlin/Any?>?): kotbase/Expression // kotbase/Expression.Companion.list|list(kotlin.collections.List<kotlin.Any?>?){}[0]
        final fun longValue(kotlin/Long): kotbase/Expression // kotbase/Expression.Companion.longValue|longValue(kotlin.Long){}[0]
        final fun map(kotlin.collections/Map<kotlin/String, kotlin/Any?>?): kotbase/Expression // kotbase/Expression.Companion.map|map(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
        final fun negated(kotbase/Expression): kotbase/Expression // kotbase/Expression.Companion.negated|negated(kotbase.Expression){}[0]
        final fun not(kotbase/Expression): kotbase/Expression // kotbase/Expression.Companion.not|not(kotbase.Expression){}[0]
        final fun number(kotlin/Number?): kotbase/Expression // kotbase/Expression.Companion.number|number(kotlin.Number?){}[0]
        final fun parameter(kotlin/String): kotbase/Expression // kotbase/Expression.Companion.parameter|parameter(kotlin.String){}[0]
        final fun property(kotlin/String): kotbase/PropertyExpression // kotbase/Expression.Companion.property|property(kotlin.String){}[0]
        final fun string(kotlin/String?): kotbase/Expression // kotbase/Expression.Companion.string|string(kotlin.String?){}[0]
        final fun value(kotlin/Any?): kotbase/Expression // kotbase/Expression.Companion.value|value(kotlin.Any?){}[0]
    }
}

// Targets: [linux, mingwX64]
open class kotbase/Join { // kotbase/Join|null[0]
    final val datasource // kotbase/Join.datasource|{}datasource[0]
        final fun <get-datasource>(): kotbase/DataSource // kotbase/Join.datasource.<get-datasource>|<get-datasource>(){}[0]

    final class On : kotbase/Join { // kotbase/Join.On|null[0]
        final fun on(kotbase/Expression): kotbase/Join // kotbase/Join.On.on|on(kotbase.Expression){}[0]
    }

    final object Companion { // kotbase/Join.Companion|null[0]
        final fun crossJoin(kotbase/DataSource): kotbase/Join // kotbase/Join.Companion.crossJoin|crossJoin(kotbase.DataSource){}[0]
        final fun innerJoin(kotbase/DataSource): kotbase/Join.On // kotbase/Join.Companion.innerJoin|innerJoin(kotbase.DataSource){}[0]
        final fun join(kotbase/DataSource): kotbase/Join.On // kotbase/Join.Companion.join|join(kotbase.DataSource){}[0]
        final fun leftJoin(kotbase/DataSource): kotbase/Join.On // kotbase/Join.Companion.leftJoin|leftJoin(kotbase.DataSource){}[0]
        final fun leftOuterJoin(kotbase/DataSource): kotbase/Join.On // kotbase/Join.Companion.leftOuterJoin|leftOuterJoin(kotbase.DataSource){}[0]
    }
}

// Targets: [linux, mingwX64]
open class kotbase/SelectResult { // kotbase/SelectResult|null[0]
    open val expression // kotbase/SelectResult.expression|{}expression[0]
        open fun <get-expression>(): kotbase/Expression // kotbase/SelectResult.expression.<get-expression>|<get-expression>(){}[0]

    final var alias // kotbase/SelectResult.alias|{}alias[0]
        final fun <get-alias>(): kotlin/String? // kotbase/SelectResult.alias.<get-alias>|<get-alias>(){}[0]
        final fun <set-alias>(kotlin/String?) // kotbase/SelectResult.alias.<set-alias>|<set-alias>(kotlin.String?){}[0]

    final class As : kotbase/SelectResult { // kotbase/SelectResult.As|null[0]
        final fun as(kotlin/String): kotbase/SelectResult.As // kotbase/SelectResult.As.as|as(kotlin.String){}[0]
    }

    final class From : kotbase/SelectResult { // kotbase/SelectResult.From|null[0]
        final fun from(kotlin/String): kotbase/SelectResult // kotbase/SelectResult.From.from|from(kotlin.String){}[0]
    }

    final object Companion { // kotbase/SelectResult.Companion|null[0]
        final fun all(): kotbase/SelectResult.From // kotbase/SelectResult.Companion.all|all(){}[0]
        final fun expression(kotbase/Expression): kotbase/SelectResult.As // kotbase/SelectResult.Companion.expression|expression(kotbase.Expression){}[0]
        final fun property(kotlin/String): kotbase/SelectResult.As // kotbase/SelectResult.Companion.property|property(kotlin.String){}[0]
    }
}

// Targets: [linux, mingwX64]
sealed class kotbase/Authenticator // kotbase/Authenticator|null[0]

// Targets: [linux, mingwX64]
sealed class kotbase/Collation { // kotbase/Collation|null[0]
    final var ignAccents // kotbase/Collation.ignAccents|{}ignAccents[0]
        final fun <get-ignAccents>(): kotlin/Boolean // kotbase/Collation.ignAccents.<get-ignAccents>|<get-ignAccents>(){}[0]
        final fun <set-ignAccents>(kotlin/Boolean) // kotbase/Collation.ignAccents.<set-ignAccents>|<set-ignAccents>(kotlin.Boolean){}[0]
    final var ignCase // kotbase/Collation.ignCase|{}ignCase[0]
        final fun <get-ignCase>(): kotlin/Boolean // kotbase/Collation.ignCase.<get-ignCase>|<get-ignCase>(){}[0]
        final fun <set-ignCase>(kotlin/Boolean) // kotbase/Collation.ignCase.<set-ignCase>|<set-ignCase>(kotlin.Boolean){}[0]
    final var locale // kotbase/Collation.locale|{}locale[0]
        final fun <get-locale>(): kotlin/String? // kotbase/Collation.locale.<get-locale>|<get-locale>(){}[0]
        final fun <set-locale>(kotlin/String?) // kotbase/Collation.locale.<set-locale>|<set-locale>(kotlin.String?){}[0]

    final class ASCII : kotbase/Collation { // kotbase/Collation.ASCII|null[0]
        constructor <init>() // kotbase/Collation.ASCII.<init>|<init>(){}[0]

        final fun setIgnoreCase(kotlin/Boolean): kotbase/Collation.ASCII // kotbase/Collation.ASCII.setIgnoreCase|setIgnoreCase(kotlin.Boolean){}[0]
    }

    final class Unicode : kotbase/Collation { // kotbase/Collation.Unicode|null[0]
        constructor <init>() // kotbase/Collation.Unicode.<init>|<init>(){}[0]

        final fun setIgnoreAccents(kotlin/Boolean): kotbase/Collation.Unicode // kotbase/Collation.Unicode.setIgnoreAccents|setIgnoreAccents(kotlin.Boolean){}[0]
        final fun setIgnoreCase(kotlin/Boolean): kotbase/Collation.Unicode // kotbase/Collation.Unicode.setIgnoreCase|setIgnoreCase(kotlin.Boolean){}[0]
        final fun setLocale(kotlin/String?): kotbase/Collation.Unicode // kotbase/Collation.Unicode.setLocale|setLocale(kotlin.String?){}[0]
    }

    final object Companion { // kotbase/Collation.Companion|null[0]
        final fun ascii(): kotbase/Collation.ASCII // kotbase/Collation.Companion.ascii|ascii(){}[0]
        final fun unicode(): kotbase/Collation.Unicode // kotbase/Collation.Companion.unicode|unicode(){}[0]
    }
}

// Targets: [linux, mingwX64]
sealed class kotbase/Endpoint // kotbase/Endpoint|null[0]

// Targets: [linux, mingwX64]
sealed class kotbase/Index // kotbase/Index|null[0]

// Targets: [linux, mingwX64]
sealed class kotbase/IndexConfiguration { // kotbase/IndexConfiguration|null[0]
    final val expressions // kotbase/IndexConfiguration.expressions|{}expressions[0]
        final fun <get-expressions>(): kotlin.collections/List<kotlin/String> // kotbase/IndexConfiguration.expressions.<get-expressions>|<get-expressions>(){}[0]
}

// Targets: [linux, mingwX64]
sealed class kotbase/ListenerToken : kotlin/AutoCloseable { // kotbase/ListenerToken|null[0]
    abstract fun removeImpl() // kotbase/ListenerToken.removeImpl|removeImpl(){}[0]
    final fun remove() // kotbase/ListenerToken.remove|remove(){}[0]
    open fun close() // kotbase/ListenerToken.close|close(){}[0]
}

// Targets: [linux, mingwX64]
sealed class kotbase/Ordering { // kotbase/Ordering|null[0]
    final val expression // kotbase/Ordering.expression|{}expression[0]
        final fun <get-expression>(): kotbase/Expression // kotbase/Ordering.expression.<get-expression>|<get-expression>(){}[0]

    final class SortOrder : kotbase/Ordering { // kotbase/Ordering.SortOrder|null[0]
        final fun ascending(): kotbase/Ordering // kotbase/Ordering.SortOrder.ascending|ascending(){}[0]
        final fun descending(): kotbase/Ordering // kotbase/Ordering.SortOrder.descending|descending(){}[0]
    }

    final object Companion { // kotbase/Ordering.Companion|null[0]
        final fun expression(kotbase/Expression): kotbase/Ordering.SortOrder // kotbase/Ordering.Companion.expression|expression(kotbase.Expression){}[0]
        final fun property(kotlin/String): kotbase/Ordering.SortOrder // kotbase/Ordering.Companion.property|property(kotlin.String){}[0]
    }
}
