/*
 * Copyright 2022-2023 Jeff Lockhart
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Based on https://github.com/cashapp/sqldelight/blob/master/extensions/androidx-paging3/src/commonMain/kotlin/app/cash/sqldelight/paging3/QueryPagingSource.kt
 */

@file:Suppress("FunctionName")

package kotbase.paging

import app.cash.paging.PagingSource
import kotbase.Database
import kotbase.From
import kotbase.LimitRouter
import kotbase.Select
import kotlin.coroutines.CoroutineContext
import kotlin.jvm.JvmName

/**
 * Create a [PagingSource] that pages through all results from the `database`.
 *
 * Queries will be executed without join, where, order by, or group by clauses.
 * Call the version of `QueryPagingSource` that takes a `queryProvider` in order
 * to append these clauses to the paging queries.
 *
 * The [PagingSource] will do SQL offset/limit based paging. Use
 * the `select` statement and `mapper` to map paged documents to objects.
 *
 * Queries will be executed on `context`.
 *
 * @param context `CoroutineContext` to execute queries on
 * @param select query `Select` statement
 * @param database database to query
 * @param mapper mapping function from JSON query results to objects
 */
public fun <RowType : Any> QueryPagingSource(
    context: CoroutineContext,
    select: Select,
    database: Database,
    mapper: (Map<String, Any?>) -> RowType
): PagingSource<Int, RowType> = OffsetQueryPagingSource(
    select,
    database,
    { this },
    context,
    mapMapper = mapper
)

/**
 * Create a [PagingSource] that pages through all results from the `database`.
 *
 * Queries will be executed without JOIN, WHERE, ORDER BY, or GROUP BY clauses.
 * Call the version of `QueryPagingSource` that takes a `queryProvider` in order
 * to append these clauses to the paging queries.
 *
 * The [PagingSource] will do SQL offset/limit based paging. Use
 * the `select` statement and `mapper` to map paged documents to objects.
 *
 * Queries will be executed on `context`.
 *
 * @param context `CoroutineContext` to execute queries on
 * @param select query `Select` statement
 * @param database database to query
 * @param mapper mapping function from JSON query results to objects
 */
@JvmName("QueryPagingSourceString")
public fun <RowType : Any> QueryPagingSource(
    context: CoroutineContext,
    select: Select,
    database: Database,
    mapper: (String) -> RowType
): PagingSource<Int, RowType> = OffsetQueryPagingSource(
    select,
    database,
    { this },
    context,
    jsonStringMapper = mapper
)

/**
 * Create a [PagingSource] that pages through results according to queries generated by
 * `queryProvider`. `queryProvider` receives a SELECT FROM `database` and should append
 * any necessary SQL JOIN, WHERE, ORDER BY, and GROUP BY clauses.
 *
 * Queries returned by `queryProvider` should expect the [PagingSource] to do SQL
 * offset/limit based paging. `queryProvider` will be called multiple times both as a
 * count query for total records as well as with the `select` statement with page
 * offsets to retrieve documents, which are mapped to objects via the provided `mapper`.
 *
 * Queries will be executed on `context`.
 *
 * @param context `CoroutineContext` to execute queries on
 * @param select query `Select` statement
 * @param database database to query
 * @param mapper mapping function from JSON query results to objects
 * @param queryProvider query provider function
 */
@JvmName("QueryPagingSourceWithQuery")
public fun <RowType : Any> QueryPagingSource(
    context: CoroutineContext,
    select: Select,
    database: Database,
    mapper: (Map<String, Any?>) -> RowType,
    queryProvider: From.() -> LimitRouter
): PagingSource<Int, RowType> = OffsetQueryPagingSource(
    select,
    database,
    queryProvider,
    context,
    mapMapper = mapper
)

/**
 * Create a [PagingSource] that pages through results according to queries generated by
 * `queryProvider`. `queryProvider` receives a SELECT FROM `database` and should append
 * any necessary SQL JOIN, WHERE, ORDER BY, and GROUP BY clauses.
 *
 * Queries returned by `queryProvider` should expect the [PagingSource] to do SQL
 * offset/limit based paging. `queryProvider` will be called multiple times both as a
 * count query for total records as well as with the `select` statement with page
 * offsets to retrieve documents, which are mapped to objects via the provided `mapper`.
 *
 * Queries will be executed on `context`.
 *
 * @param context `CoroutineContext` to execute queries on
 * @param select query `Select` statement
 * @param database database to query
 * @param mapper mapping function from JSON query results to objects
 * @param queryProvider query provider function
 */
@JvmName("QueryPagingSourceStringWithQuery")
public fun <RowType : Any> QueryPagingSource(
    context: CoroutineContext,
    select: Select,
    database: Database,
    mapper: (String) -> RowType,
    queryProvider: From.() -> LimitRouter
): PagingSource<Int, RowType> = OffsetQueryPagingSource(
    select,
    database,
    queryProvider,
    context,
    jsonStringMapper = mapper
)
